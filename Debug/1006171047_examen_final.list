
1006171047_examen_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ec4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001504  08007054  08007054  00017054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008558  08008558  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008558  08008558  00018558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008560  08008560  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008560  08008560  00018560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008564  08008564  00018564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  20000070  080085d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e8  080085d8  000206e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000114b0  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002981  00000000  00000000  00031593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  00033f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b66  00000000  00000000  00034df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027928  00000000  00000000  0003595e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013082  00000000  00000000  0005d286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed6f0  00000000  00000000  00070308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004660  00000000  00000000  0015d9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00162058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800703c 	.word	0x0800703c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800703c 	.word	0x0800703c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	b29a      	uxth	r2, r3
 800057c:	f04f 33ff 	mov.w	r3, #4294967295
 8000580:	68b9      	ldr	r1, [r7, #8]
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <_write+0x28>)
 8000584:	f003 fd42 	bl	800400c <HAL_UART_Transmit>
  return len;
 8000588:	687b      	ldr	r3, [r7, #4]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200000e0 	.word	0x200000e0

08000598 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	if (ring_buffer_put(&ring_buffer_uart_rx, rx_data) == 0) {
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <HAL_UART_RxCpltCallback+0x34>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <HAL_UART_RxCpltCallback+0x38>)
 80005a8:	f005 f8c6 	bl	8005738 <ring_buffer_put>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d102      	bne.n	80005b8 <HAL_UART_RxCpltCallback+0x20>
		printf("Rx buffer is full\r\n");
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <HAL_UART_RxCpltCallback+0x3c>)
 80005b4:	f005 fbdc 	bl	8005d70 <puts>
	}
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80005b8:	2201      	movs	r2, #1
 80005ba:	4904      	ldr	r1, [pc, #16]	; (80005cc <HAL_UART_RxCpltCallback+0x34>)
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <HAL_UART_RxCpltCallback+0x40>)
 80005be:	f003 fdaf 	bl	8004120 <HAL_UART_Receive_IT>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	2000018a 	.word	0x2000018a
 80005d0:	20000168 	.word	0x20000168
 80005d4:	08007054 	.word	0x08007054
 80005d8:	200000e0 	.word	0x200000e0

080005dc <process_code_int>:
		ssd1306_SetCursor(5, 5);
		ssd1306_WriteString("failed", Font_16x26, White);
		ssd1306_UpdateScreen();
	}
}
void process_code_int (uint8_t code_int){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	for (uint8_t idx = 0; idx < 10; idx++) {
 80005e6:	2300      	movs	r3, #0
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	e009      	b.n	8000600 <process_code_int+0x24>
			// Get ring buffer variables
		  ring_buffer_get(&ring_buffer_uart_rx, & rx_buffer[idx]);
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	4a08      	ldr	r2, [pc, #32]	; (8000610 <process_code_int+0x34>)
 80005f0:	4413      	add	r3, r2
 80005f2:	4619      	mov	r1, r3
 80005f4:	4807      	ldr	r0, [pc, #28]	; (8000614 <process_code_int+0x38>)
 80005f6:	f005 f8dc 	bl	80057b2 <ring_buffer_get>
	for (uint8_t idx = 0; idx < 10; idx++) {
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	3301      	adds	r3, #1
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	2b09      	cmp	r3, #9
 8000604:	d9f2      	bls.n	80005ec <process_code_int+0x10>
	}
	}
 8000606:	bf00      	nop
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000180 	.word	0x20000180
 8000614:	20000168 	.word	0x20000168

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fb79 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f847 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 f907 	bl	8000838 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062a:	f000 f8d5 	bl	80007d8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800062e:	f000 f893 	bl	8000758 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ring_buffer_init(&ring_buffer_code, rx_buffer, 5);
 8000632:	2205      	movs	r2, #5
 8000634:	4918      	ldr	r1, [pc, #96]	; (8000698 <main+0x80>)
 8000636:	4819      	ldr	r0, [pc, #100]	; (800069c <main+0x84>)
 8000638:	f005 f862 	bl	8005700 <ring_buffer_init>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800063c:	2201      	movs	r2, #1
 800063e:	4918      	ldr	r1, [pc, #96]	; (80006a0 <main+0x88>)
 8000640:	4818      	ldr	r0, [pc, #96]	; (80006a4 <main+0x8c>)
 8000642:	f003 fd6d 	bl	8004120 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000646:	2201      	movs	r2, #1
 8000648:	4915      	ldr	r1, [pc, #84]	; (80006a0 <main+0x88>)
 800064a:	4816      	ldr	r0, [pc, #88]	; (80006a4 <main+0x8c>)
 800064c:	f003 fd68 	bl	8004120 <HAL_UART_Receive_IT>
  ssd1306_Fill(Black);
 8000650:	2000      	movs	r0, #0
 8000652:	f005 f923 	bl	800589c <ssd1306_Fill>
  ssd1306_SetCursor(5, 5);
 8000656:	2105      	movs	r1, #5
 8000658:	2005      	movs	r0, #5
 800065a:	f005 fa6d 	bl	8005b38 <ssd1306_SetCursor>
  ssd1306_WriteString("WAITING", Font_16x26, White);
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <main+0x90>)
 8000660:	2301      	movs	r3, #1
 8000662:	ca06      	ldmia	r2, {r1, r2}
 8000664:	4811      	ldr	r0, [pc, #68]	; (80006ac <main+0x94>)
 8000666:	f005 fa41 	bl	8005aec <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800066a:	f005 f93b 	bl	80058e4 <ssd1306_UpdateScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i = 0; i < 10; ++i) {
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	e00c      	b.n	800068e <main+0x76>
	        int key_event;
	        scanf("%d", &key_event);
 8000674:	463b      	mov	r3, r7
 8000676:	4619      	mov	r1, r3
 8000678:	480d      	ldr	r0, [pc, #52]	; (80006b0 <main+0x98>)
 800067a:	f005 fb81 	bl	8005d80 <iscanf>

	        // Agrega el nuevo valor a key_event
	        process_code_int(key_event);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ffaa 	bl	80005dc <process_code_int>
	  for (int i = 0; i < 10; ++i) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3301      	adds	r3, #1
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b09      	cmp	r3, #9
 8000692:	ddef      	ble.n	8000674 <main+0x5c>
 8000694:	e7eb      	b.n	800066e <main+0x56>
 8000696:	bf00      	nop
 8000698:	20000180 	.word	0x20000180
 800069c:	20000174 	.word	0x20000174
 80006a0:	2000018a 	.word	0x2000018a
 80006a4:	200000e0 	.word	0x200000e0
 80006a8:	2000000c 	.word	0x2000000c
 80006ac:	0800708c 	.word	0x0800708c
 80006b0:	08007094 	.word	0x08007094

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b096      	sub	sp, #88	; 0x58
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2244      	movs	r2, #68	; 0x44
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f005 fc46 	bl	8005f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006da:	f002 f937 	bl	800294c <HAL_PWREx_ControlVoltageScaling>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006e4:	f000 f90e 	bl	8000904 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f2:	2310      	movs	r3, #16
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fa:	2302      	movs	r3, #2
 80006fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000702:	230a      	movs	r3, #10
 8000704:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000706:	2307      	movs	r3, #7
 8000708:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4618      	mov	r0, r3
 8000718:	f002 f96e 	bl	80029f8 <HAL_RCC_OscConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000722:	f000 f8ef 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2303      	movs	r3, #3
 800072c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	2104      	movs	r1, #4
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fd36 	bl	80031b0 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800074a:	f000 f8db 	bl	8000904 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3758      	adds	r7, #88	; 0x58
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_I2C1_Init+0x74>)
 800075e:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <MX_I2C1_Init+0x78>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_I2C1_Init+0x74>)
 8000764:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <MX_I2C1_Init+0x7c>)
 8000766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_I2C1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_I2C1_Init+0x74>)
 8000770:	2201      	movs	r2, #1
 8000772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_I2C1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_I2C1_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_I2C1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000792:	480e      	ldr	r0, [pc, #56]	; (80007cc <MX_I2C1_Init+0x74>)
 8000794:	f000 fe9a 	bl	80014cc <HAL_I2C_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800079e:	f000 f8b1 	bl	8000904 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007a2:	2100      	movs	r1, #0
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <MX_I2C1_Init+0x74>)
 80007a6:	f002 f82b 	bl	8002800 <HAL_I2CEx_ConfigAnalogFilter>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007b0:	f000 f8a8 	bl	8000904 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007b4:	2100      	movs	r1, #0
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_I2C1_Init+0x74>)
 80007b8:	f002 f86d 	bl	8002896 <HAL_I2CEx_ConfigDigitalFilter>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007c2:	f000 f89f 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	40005400 	.word	0x40005400
 80007d4:	10909cec 	.word	0x10909cec

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <MX_USART2_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART2_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART2_UART_Init+0x58>)
 800081c:	f003 fba8 	bl	8003f70 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 f86d 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000e0 	.word	0x200000e0
 8000834:	40004400 	.word	0x40004400

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <MX_GPIO_Init+0xc4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a2a      	ldr	r2, [pc, #168]	; (80008fc <MX_GPIO_Init+0xc4>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b28      	ldr	r3, [pc, #160]	; (80008fc <MX_GPIO_Init+0xc4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <MX_GPIO_Init+0xc4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a24      	ldr	r2, [pc, #144]	; (80008fc <MX_GPIO_Init+0xc4>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b22      	ldr	r3, [pc, #136]	; (80008fc <MX_GPIO_Init+0xc4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_GPIO_Init+0xc4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a1e      	ldr	r2, [pc, #120]	; (80008fc <MX_GPIO_Init+0xc4>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_GPIO_Init+0xc4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <MX_GPIO_Init+0xc4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a18      	ldr	r2, [pc, #96]	; (80008fc <MX_GPIO_Init+0xc4>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <MX_GPIO_Init+0xc4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2120      	movs	r1, #32
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b6:	f000 fdf1 	bl	800149c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	480b      	ldr	r0, [pc, #44]	; (8000900 <MX_GPIO_Init+0xc8>)
 80008d2:	f000 fc39 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008d6:	2320      	movs	r3, #32
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f0:	f000 fc2a 	bl	8001148 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40021000 	.word	0x40021000
 8000900:	48000800 	.word	0x48000800

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <HAL_MspInit+0x44>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091a:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <HAL_MspInit+0x44>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6613      	str	r3, [r2, #96]	; 0x60
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <HAL_MspInit+0x44>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_MspInit+0x44>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <HAL_MspInit+0x44>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6593      	str	r3, [r2, #88]	; 0x58
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_MspInit+0x44>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000

08000958 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b0ac      	sub	sp, #176	; 0xb0
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2288      	movs	r2, #136	; 0x88
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f005 faeb 	bl	8005f54 <memset>
  if(hi2c->Instance==I2C1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a29      	ldr	r2, [pc, #164]	; (8000a28 <HAL_I2C_MspInit+0xd0>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d14b      	bne.n	8000a20 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000988:	2340      	movs	r3, #64	; 0x40
 800098a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800098c:	2300      	movs	r3, #0
 800098e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4618      	mov	r0, r3
 8000996:	f002 fe2f 	bl	80035f8 <HAL_RCCEx_PeriphCLKConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009a0:	f7ff ffb0 	bl	8000904 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <HAL_I2C_MspInit+0xd4>)
 80009a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a8:	4a20      	ldr	r2, [pc, #128]	; (8000a2c <HAL_I2C_MspInit+0xd4>)
 80009aa:	f043 0302 	orr.w	r3, r3, #2
 80009ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <HAL_I2C_MspInit+0xd4>)
 80009b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b4:	f003 0302 	and.w	r3, r3, #2
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c4:	2312      	movs	r3, #18
 80009c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d6:	2304      	movs	r3, #4
 80009d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009e0:	4619      	mov	r1, r3
 80009e2:	4813      	ldr	r0, [pc, #76]	; (8000a30 <HAL_I2C_MspInit+0xd8>)
 80009e4:	f000 fbb0 	bl	8001148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_I2C_MspInit+0xd4>)
 80009ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ec:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <HAL_I2C_MspInit+0xd4>)
 80009ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009f2:	6593      	str	r3, [r2, #88]	; 0x58
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_I2C_MspInit+0xd4>)
 80009f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	201f      	movs	r0, #31
 8000a06:	f000 fadc 	bl	8000fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a0a:	201f      	movs	r0, #31
 8000a0c:	f000 faf5 	bl	8000ffa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	2020      	movs	r0, #32
 8000a16:	f000 fad4 	bl	8000fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a1a:	2020      	movs	r0, #32
 8000a1c:	f000 faed 	bl	8000ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	37b0      	adds	r7, #176	; 0xb0
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	48000400 	.word	0x48000400

08000a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b0ac      	sub	sp, #176	; 0xb0
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2288      	movs	r2, #136	; 0x88
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f005 fa7d 	bl	8005f54 <memset>
  if(huart->Instance==USART2)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a25      	ldr	r2, [pc, #148]	; (8000af4 <HAL_UART_MspInit+0xc0>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d143      	bne.n	8000aec <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 fdc1 	bl	80035f8 <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a7c:	f7ff ff42 	bl	8000904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <HAL_UART_MspInit+0xc4>)
 8000a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a84:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <HAL_UART_MspInit+0xc4>)
 8000a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <HAL_UART_MspInit+0xc4>)
 8000a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <HAL_UART_MspInit+0xc4>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9c:	4a16      	ldr	r2, [pc, #88]	; (8000af8 <HAL_UART_MspInit+0xc4>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <HAL_UART_MspInit+0xc4>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac8:	2307      	movs	r3, #7
 8000aca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad8:	f000 fb36 	bl	8001148 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2026      	movs	r0, #38	; 0x26
 8000ae2:	f000 fa6e 	bl	8000fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ae6:	2026      	movs	r0, #38	; 0x26
 8000ae8:	f000 fa87 	bl	8000ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	37b0      	adds	r7, #176	; 0xb0
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40004400 	.word	0x40004400
 8000af8:	40021000 	.word	0x40021000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b48:	f000 f940 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b54:	4802      	ldr	r0, [pc, #8]	; (8000b60 <I2C1_EV_IRQHandler+0x10>)
 8000b56:	f000 fe69 	bl	800182c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000008c 	.word	0x2000008c

08000b64 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <I2C1_ER_IRQHandler+0x10>)
 8000b6a:	f000 fe79 	bl	8001860 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000008c 	.word	0x2000008c

08000b78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <USART2_IRQHandler+0x10>)
 8000b7e:	f003 fb1b 	bl	80041b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000e0 	.word	0x200000e0

08000b8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	e00a      	b.n	8000bb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b9e:	f3af 8000 	nop.w
 8000ba2:	4601      	mov	r1, r0
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	60ba      	str	r2, [r7, #8]
 8000baa:	b2ca      	uxtb	r2, r1
 8000bac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	dbf0      	blt.n	8000b9e <_read+0x12>
  }

  return len;
 8000bbc:	687b      	ldr	r3, [r7, #4]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bee:	605a      	str	r2, [r3, #4]
  return 0;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_isatty>:

int _isatty(int file)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f005 f9c6 	bl	8005ff0 <__errno>
 8000c64:	4603      	mov	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20018000 	.word	0x20018000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	2000018c 	.word	0x2000018c
 8000c98:	200006e8 	.word	0x200006e8

08000c9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cc4:	f7ff ffea 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	; (8000d00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <LoopForever+0xe>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	; (8000d0c <LoopForever+0x16>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cee:	f005 f985 	bl	8005ffc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cf2:	f7ff fc91 	bl	8000618 <main>

08000cf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf6:	e7fe      	b.n	8000cf6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d04:	08008568 	.word	0x08008568
  ldr r2, =_sbss
 8000d08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d0c:	200006e8 	.word	0x200006e8

08000d10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC1_2_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <HAL_Init+0x3c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <HAL_Init+0x3c>)
 8000d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d28:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	f000 f93e 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d30:	2000      	movs	r0, #0
 8000d32:	f000 f80f 	bl	8000d54 <HAL_InitTick>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d002      	beq.n	8000d42 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	71fb      	strb	r3, [r7, #7]
 8000d40:	e001      	b.n	8000d46 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d42:	f7ff fde5 	bl	8000910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40022000 	.word	0x40022000

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <HAL_InitTick+0x6c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d023      	beq.n	8000db0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_InitTick+0x70>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <HAL_InitTick+0x6c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f949 	bl	8001016 <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10f      	bne.n	8000daa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d809      	bhi.n	8000da4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f000 f913 	bl	8000fc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_InitTick+0x74>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e007      	b.n	8000db4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	e004      	b.n	8000db4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	e001      	b.n	8000db4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x20>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_IncTick+0x24>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20000190 	.word	0x20000190

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000190 	.word	0x20000190

08000e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4907      	ldr	r1, [pc, #28]	; (8000ea8 <__NVIC_EnableIRQ+0x38>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	; (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f78:	d301      	bcc.n	8000f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00f      	b.n	8000f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <SysTick_Config+0x40>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f86:	210f      	movs	r1, #15
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f7ff ff8e 	bl	8000eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <SysTick_Config+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f96:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <SysTick_Config+0x40>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff29 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd4:	f7ff ff3e 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000fd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	6978      	ldr	r0, [r7, #20]
 8000fe0:	f7ff ff8e 	bl	8000f00 <NVIC_EncodePriority>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff5d 	bl	8000eac <__NVIC_SetPriority>
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff31 	bl	8000e70 <__NVIC_EnableIRQ>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffa2 	bl	8000f68 <SysTick_Config>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800102e:	b480      	push	{r7}
 8001030:	b085      	sub	sp, #20
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d008      	beq.n	8001058 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2204      	movs	r2, #4
 800104a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e022      	b.n	800109e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 020e 	bic.w	r2, r2, #14
 8001066:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 0201 	bic.w	r2, r2, #1
 8001076:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107c:	f003 021c 	and.w	r2, r3, #28
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	2101      	movs	r1, #1
 8001086:	fa01 f202 	lsl.w	r2, r1, r2
 800108a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b084      	sub	sp, #16
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d005      	beq.n	80010ce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2204      	movs	r2, #4
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	e029      	b.n	8001122 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 020e 	bic.w	r2, r2, #14
 80010dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 0201 	bic.w	r2, r2, #1
 80010ec:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f003 021c 	and.w	r2, r3, #28
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	2101      	movs	r1, #1
 80010fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001100:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	4798      	blx	r3
    }
  }
  return status;
 8001122:	7bfb      	ldrb	r3, [r7, #15]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800113a:	b2db      	uxtb	r3, r3
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b087      	sub	sp, #28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001156:	e17f      	b.n	8001458 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	2101      	movs	r1, #1
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	4013      	ands	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 8171 	beq.w	8001452 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b01      	cmp	r3, #1
 800117a:	d005      	beq.n	8001188 <HAL_GPIO_Init+0x40>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d130      	bne.n	80011ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011be:	2201      	movs	r2, #1
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	f003 0201 	and.w	r2, r3, #1
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d118      	bne.n	8001228 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011fc:	2201      	movs	r2, #1
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	08db      	lsrs	r3, r3, #3
 8001212:	f003 0201 	and.w	r2, r3, #1
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b03      	cmp	r3, #3
 8001232:	d017      	beq.n	8001264 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d123      	bne.n	80012b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	08da      	lsrs	r2, r3, #3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3208      	adds	r2, #8
 8001278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	220f      	movs	r2, #15
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	08da      	lsrs	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3208      	adds	r2, #8
 80012b2:	6939      	ldr	r1, [r7, #16]
 80012b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0203 	and.w	r2, r3, #3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 80ac 	beq.w	8001452 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	4b5f      	ldr	r3, [pc, #380]	; (8001478 <HAL_GPIO_Init+0x330>)
 80012fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fe:	4a5e      	ldr	r2, [pc, #376]	; (8001478 <HAL_GPIO_Init+0x330>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6613      	str	r3, [r2, #96]	; 0x60
 8001306:	4b5c      	ldr	r3, [pc, #368]	; (8001478 <HAL_GPIO_Init+0x330>)
 8001308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001312:	4a5a      	ldr	r2, [pc, #360]	; (800147c <HAL_GPIO_Init+0x334>)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	3302      	adds	r3, #2
 800131a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	220f      	movs	r2, #15
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800133c:	d025      	beq.n	800138a <HAL_GPIO_Init+0x242>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4f      	ldr	r2, [pc, #316]	; (8001480 <HAL_GPIO_Init+0x338>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d01f      	beq.n	8001386 <HAL_GPIO_Init+0x23e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4e      	ldr	r2, [pc, #312]	; (8001484 <HAL_GPIO_Init+0x33c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d019      	beq.n	8001382 <HAL_GPIO_Init+0x23a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4d      	ldr	r2, [pc, #308]	; (8001488 <HAL_GPIO_Init+0x340>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d013      	beq.n	800137e <HAL_GPIO_Init+0x236>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4c      	ldr	r2, [pc, #304]	; (800148c <HAL_GPIO_Init+0x344>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d00d      	beq.n	800137a <HAL_GPIO_Init+0x232>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4b      	ldr	r2, [pc, #300]	; (8001490 <HAL_GPIO_Init+0x348>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d007      	beq.n	8001376 <HAL_GPIO_Init+0x22e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4a      	ldr	r2, [pc, #296]	; (8001494 <HAL_GPIO_Init+0x34c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_GPIO_Init+0x22a>
 800136e:	2306      	movs	r3, #6
 8001370:	e00c      	b.n	800138c <HAL_GPIO_Init+0x244>
 8001372:	2307      	movs	r3, #7
 8001374:	e00a      	b.n	800138c <HAL_GPIO_Init+0x244>
 8001376:	2305      	movs	r3, #5
 8001378:	e008      	b.n	800138c <HAL_GPIO_Init+0x244>
 800137a:	2304      	movs	r3, #4
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x244>
 800137e:	2303      	movs	r3, #3
 8001380:	e004      	b.n	800138c <HAL_GPIO_Init+0x244>
 8001382:	2302      	movs	r3, #2
 8001384:	e002      	b.n	800138c <HAL_GPIO_Init+0x244>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <HAL_GPIO_Init+0x244>
 800138a:	2300      	movs	r3, #0
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	f002 0203 	and.w	r2, r2, #3
 8001392:	0092      	lsls	r2, r2, #2
 8001394:	4093      	lsls	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800139c:	4937      	ldr	r1, [pc, #220]	; (800147c <HAL_GPIO_Init+0x334>)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013aa:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <HAL_GPIO_Init+0x350>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013ce:	4a32      	ldr	r2, [pc, #200]	; (8001498 <HAL_GPIO_Init+0x350>)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013d4:	4b30      	ldr	r3, [pc, #192]	; (8001498 <HAL_GPIO_Init+0x350>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013f8:	4a27      	ldr	r2, [pc, #156]	; (8001498 <HAL_GPIO_Init+0x350>)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <HAL_GPIO_Init+0x350>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001422:	4a1d      	ldr	r2, [pc, #116]	; (8001498 <HAL_GPIO_Init+0x350>)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_GPIO_Init+0x350>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800144c:	4a12      	ldr	r2, [pc, #72]	; (8001498 <HAL_GPIO_Init+0x350>)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	3301      	adds	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa22 f303 	lsr.w	r3, r2, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	f47f ae78 	bne.w	8001158 <HAL_GPIO_Init+0x10>
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	371c      	adds	r7, #28
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000
 800147c:	40010000 	.word	0x40010000
 8001480:	48000400 	.word	0x48000400
 8001484:	48000800 	.word	0x48000800
 8001488:	48000c00 	.word	0x48000c00
 800148c:	48001000 	.word	0x48001000
 8001490:	48001400 	.word	0x48001400
 8001494:	48001800 	.word	0x48001800
 8001498:	40010400 	.word	0x40010400

0800149c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]
 80014a8:	4613      	mov	r3, r2
 80014aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ac:	787b      	ldrb	r3, [r7, #1]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014b2:	887a      	ldrh	r2, [r7, #2]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b8:	e002      	b.n	80014c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e08d      	b.n	80015fa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d106      	bne.n	80014f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fa30 	bl	8000958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2224      	movs	r2, #36	; 0x24
 80014fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0201 	bic.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800151c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800152c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d107      	bne.n	8001546 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	e006      	b.n	8001554 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001552:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d108      	bne.n	800156e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	e007      	b.n	800157e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800157c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800158c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001590:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691a      	ldr	r2, [r3, #16]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69d9      	ldr	r1, [r3, #28]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1a      	ldr	r2, [r3, #32]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2220      	movs	r2, #32
 80015e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	4608      	mov	r0, r1
 800160e:	4611      	mov	r1, r2
 8001610:	461a      	mov	r2, r3
 8001612:	4603      	mov	r3, r0
 8001614:	817b      	strh	r3, [r7, #10]
 8001616:	460b      	mov	r3, r1
 8001618:	813b      	strh	r3, [r7, #8]
 800161a:	4613      	mov	r3, r2
 800161c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b20      	cmp	r3, #32
 8001628:	f040 80f9 	bne.w	800181e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <HAL_I2C_Mem_Write+0x34>
 8001632:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001634:	2b00      	cmp	r3, #0
 8001636:	d105      	bne.n	8001644 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0ed      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_I2C_Mem_Write+0x4e>
 800164e:	2302      	movs	r3, #2
 8001650:	e0e6      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800165a:	f7ff fbcb 	bl	8000df4 <HAL_GetTick>
 800165e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2319      	movs	r3, #25
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 fe7e 	bl	800236e <I2C_WaitOnFlagUntilTimeout>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0d1      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2221      	movs	r2, #33	; 0x21
 8001680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2240      	movs	r2, #64	; 0x40
 8001688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a3a      	ldr	r2, [r7, #32]
 8001696:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800169c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016a4:	88f8      	ldrh	r0, [r7, #6]
 80016a6:	893a      	ldrh	r2, [r7, #8]
 80016a8:	8979      	ldrh	r1, [r7, #10]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	4603      	mov	r3, r0
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 fa67 	bl	8001b88 <I2C_RequestMemoryWrite>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0a9      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	2bff      	cmp	r3, #255	; 0xff
 80016d4:	d90e      	bls.n	80016f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	22ff      	movs	r2, #255	; 0xff
 80016da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	8979      	ldrh	r1, [r7, #10]
 80016e4:	2300      	movs	r3, #0
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 fff7 	bl	80026e0 <I2C_TransferConfig>
 80016f2:	e00f      	b.n	8001714 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001702:	b2da      	uxtb	r2, r3
 8001704:	8979      	ldrh	r1, [r7, #10]
 8001706:	2300      	movs	r3, #0
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 ffe6 	bl	80026e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 fe77 	bl	800240c <I2C_WaitOnTXISFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e07b      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	781a      	ldrb	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	1c5a      	adds	r2, r3, #1
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001742:	b29b      	uxth	r3, r3
 8001744:	3b01      	subs	r3, #1
 8001746:	b29a      	uxth	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001750:	3b01      	subs	r3, #1
 8001752:	b29a      	uxth	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175c:	b29b      	uxth	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d034      	beq.n	80017cc <HAL_I2C_Mem_Write+0x1c8>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001766:	2b00      	cmp	r3, #0
 8001768:	d130      	bne.n	80017cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001770:	2200      	movs	r2, #0
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 fdfa 	bl	800236e <I2C_WaitOnFlagUntilTimeout>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e04d      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001788:	b29b      	uxth	r3, r3
 800178a:	2bff      	cmp	r3, #255	; 0xff
 800178c:	d90e      	bls.n	80017ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	22ff      	movs	r2, #255	; 0xff
 8001792:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001798:	b2da      	uxtb	r2, r3
 800179a:	8979      	ldrh	r1, [r7, #10]
 800179c:	2300      	movs	r3, #0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 ff9b 	bl	80026e0 <I2C_TransferConfig>
 80017aa:	e00f      	b.n	80017cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	8979      	ldrh	r1, [r7, #10]
 80017be:	2300      	movs	r3, #0
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 ff8a 	bl	80026e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d19e      	bne.n	8001714 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 fe5d 	bl	800249a <I2C_WaitOnSTOPFlagUntilTimeout>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e01a      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2220      	movs	r2, #32
 80017f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_I2C_Mem_Write+0x224>)
 80017fe:	400b      	ands	r3, r1
 8001800:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2220      	movs	r2, #32
 8001806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800181e:	2302      	movs	r3, #2
  }
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	fe00e800 	.word	0xfe00e800

0800182c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	68f9      	ldr	r1, [r7, #12]
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4798      	blx	r3
  }
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00f      	beq.n	80018a2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00a      	beq.n	80018a2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001890:	f043 0201 	orr.w	r2, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00f      	beq.n	80018cc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00a      	beq.n	80018cc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f043 0208 	orr.w	r2, r3, #8
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ca:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00f      	beq.n	80018f6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00a      	beq.n	80018f6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e4:	f043 0202 	orr.w	r2, r3, #2
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 030b 	and.w	r3, r3, #11
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001906:	68f9      	ldr	r1, [r7, #12]
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 fbd7 	bl	80020bc <I2C_ITError>
  }
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	460b      	mov	r3, r1
 8001948:	70fb      	strb	r3, [r7, #3]
 800194a:	4613      	mov	r3, r2
 800194c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <I2C_Slave_ISR_IT+0x24>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e0e1      	b.n	8001b7e <I2C_Slave_ISR_IT+0x1e8>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	f003 0320 	and.w	r3, r3, #32
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80019d6:	6939      	ldr	r1, [r7, #16]
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f000 fa09 	bl	8001df0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	f003 0310 	and.w	r3, r3, #16
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d04b      	beq.n	8001a80 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d046      	beq.n	8001a80 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d128      	bne.n	8001a4e <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b28      	cmp	r3, #40	; 0x28
 8001a06:	d108      	bne.n	8001a1a <I2C_Slave_ISR_IT+0x84>
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a0e:	d104      	bne.n	8001a1a <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001a10:	6939      	ldr	r1, [r7, #16]
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 fafe 	bl	8002014 <I2C_ITListenCplt>
 8001a18:	e031      	b.n	8001a7e <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b29      	cmp	r3, #41	; 0x29
 8001a24:	d10e      	bne.n	8001a44 <I2C_Slave_ISR_IT+0xae>
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a2c:	d00a      	beq.n	8001a44 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2210      	movs	r2, #16
 8001a34:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 fc57 	bl	80022ea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 f97b 	bl	8001d38 <I2C_ITSlaveSeqCplt>
 8001a42:	e01c      	b.n	8001a7e <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2210      	movs	r2, #16
 8001a4a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001a4c:	e08f      	b.n	8001b6e <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2210      	movs	r2, #16
 8001a54:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f043 0204 	orr.w	r2, r3, #4
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <I2C_Slave_ISR_IT+0xda>
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6e:	d17e      	bne.n	8001b6e <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a74:	4619      	mov	r1, r3
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 fb20 	bl	80020bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001a7c:	e077      	b.n	8001b6e <I2C_Slave_ISR_IT+0x1d8>
 8001a7e:	e076      	b.n	8001b6e <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d02f      	beq.n	8001aea <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d02a      	beq.n	8001aea <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d018      	beq.n	8001ad0 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aba:	3b01      	subs	r3, #1
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d14b      	bne.n	8001b72 <I2C_Slave_ISR_IT+0x1dc>
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ae0:	d047      	beq.n	8001b72 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f000 f928 	bl	8001d38 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001ae8:	e043      	b.n	8001b72 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d009      	beq.n	8001b08 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d004      	beq.n	8001b08 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001afe:	6939      	ldr	r1, [r7, #16]
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 f895 	bl	8001c30 <I2C_ITAddrCplt>
 8001b06:	e035      	b.n	8001b74 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d030      	beq.n	8001b74 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d02b      	beq.n	8001b74 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d018      	beq.n	8001b58 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	781a      	ldrb	r2, [r3, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	3b01      	subs	r3, #1
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	851a      	strh	r2, [r3, #40]	; 0x28
 8001b56:	e00d      	b.n	8001b74 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b5e:	d002      	beq.n	8001b66 <I2C_Slave_ISR_IT+0x1d0>
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 f8e6 	bl	8001d38 <I2C_ITSlaveSeqCplt>
 8001b6c:	e002      	b.n	8001b74 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8001b6e:	bf00      	nop
 8001b70:	e000      	b.n	8001b74 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8001b72:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	4608      	mov	r0, r1
 8001b92:	4611      	mov	r1, r2
 8001b94:	461a      	mov	r2, r3
 8001b96:	4603      	mov	r3, r0
 8001b98:	817b      	strh	r3, [r7, #10]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	813b      	strh	r3, [r7, #8]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	8979      	ldrh	r1, [r7, #10]
 8001ba8:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <I2C_RequestMemoryWrite+0xa4>)
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 fd95 	bl	80026e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	69b9      	ldr	r1, [r7, #24]
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 fc26 	bl	800240c <I2C_WaitOnTXISFlagUntilTimeout>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e02c      	b.n	8001c24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bd0:	893b      	ldrh	r3, [r7, #8]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	629a      	str	r2, [r3, #40]	; 0x28
 8001bda:	e015      	b.n	8001c08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bdc:	893b      	ldrh	r3, [r7, #8]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	69b9      	ldr	r1, [r7, #24]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 fc0c 	bl	800240c <I2C_WaitOnTXISFlagUntilTimeout>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e012      	b.n	8001c24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bfe:	893b      	ldrh	r3, [r7, #8]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 fbab 	bl	800236e <I2C_WaitOnFlagUntilTimeout>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	80002000 	.word	0x80002000

08001c30 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001c46:	2b28      	cmp	r3, #40	; 0x28
 8001c48:	d16a      	bne.n	8001d20 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	0c1b      	lsrs	r3, r3, #16
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001c68:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c76:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001c84:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d138      	bne.n	8001d00 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001c8e:	897b      	ldrh	r3, [r7, #10]
 8001c90:	09db      	lsrs	r3, r3, #7
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	89bb      	ldrh	r3, [r7, #12]
 8001c96:	4053      	eors	r3, r2
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	f003 0306 	and.w	r3, r3, #6
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d11c      	bne.n	8001cdc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001ca2:	897b      	ldrh	r3, [r7, #10]
 8001ca4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d13b      	bne.n	8001d30 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001cce:	89ba      	ldrh	r2, [r7, #12]
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fe32 	bl	800193e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001cda:	e029      	b.n	8001d30 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001cdc:	893b      	ldrh	r3, [r7, #8]
 8001cde:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001ce0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 fd2d 	bl	8002744 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001cf2:	89ba      	ldrh	r2, [r7, #12]
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff fe20 	bl	800193e <HAL_I2C_AddrCallback>
}
 8001cfe:	e017      	b.n	8001d30 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001d00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 fd1d 	bl	8002744 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d12:	89ba      	ldrh	r2, [r7, #12]
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	4619      	mov	r1, r3
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff fe10 	bl	800193e <HAL_I2C_AddrCallback>
}
 8001d1e:	e007      	b.n	8001d30 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2208      	movs	r2, #8
 8001d26:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d008      	beq.n	8001d6c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e00c      	b.n	8001d86 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d007      	beq.n	8001d86 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d84:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b29      	cmp	r3, #41	; 0x29
 8001d90:	d112      	bne.n	8001db8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2228      	movs	r2, #40	; 0x28
 8001d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2221      	movs	r2, #33	; 0x21
 8001d9e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001da0:	2101      	movs	r1, #1
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 fcce 	bl	8002744 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff fdb0 	bl	8001916 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001db6:	e017      	b.n	8001de8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8001dc2:	d111      	bne.n	8001de8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2228      	movs	r2, #40	; 0x28
 8001dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2222      	movs	r2, #34	; 0x22
 8001dd0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001dd2:	2102      	movs	r1, #2
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 fcb5 	bl	8002744 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff fda1 	bl	800192a <HAL_I2C_SlaveRxCpltCallback>
}
 8001de8:	bf00      	nop
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e0c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2220      	movs	r2, #32
 8001e14:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	2b21      	cmp	r3, #33	; 0x21
 8001e1a:	d002      	beq.n	8001e22 <I2C_ITSlaveCplt+0x32>
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	2b29      	cmp	r3, #41	; 0x29
 8001e20:	d108      	bne.n	8001e34 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001e22:	f248 0101 	movw	r1, #32769	; 0x8001
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fc8c 	bl	8002744 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2221      	movs	r2, #33	; 0x21
 8001e30:	631a      	str	r2, [r3, #48]	; 0x30
 8001e32:	e019      	b.n	8001e68 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	2b22      	cmp	r3, #34	; 0x22
 8001e38:	d002      	beq.n	8001e40 <I2C_ITSlaveCplt+0x50>
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8001e3e:	d108      	bne.n	8001e52 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001e40:	f248 0102 	movw	r1, #32770	; 0x8002
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 fc7d 	bl	8002744 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2222      	movs	r2, #34	; 0x22
 8001e4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001e50:	e00a      	b.n	8001e68 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	2b28      	cmp	r3, #40	; 0x28
 8001e56:	d107      	bne.n	8001e68 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001e58:	f248 0103 	movw	r1, #32771	; 0x8003
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 fc71 	bl	8002744 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e76:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6859      	ldr	r1, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b62      	ldr	r3, [pc, #392]	; (800200c <I2C_ITSlaveCplt+0x21c>)
 8001e84:	400b      	ands	r3, r1
 8001e86:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fa2e 	bl	80022ea <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d013      	beq.n	8001ec0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ea6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01f      	beq.n	8001ef0 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ebe:	e017      	b.n	8001ef0 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d012      	beq.n	8001ef0 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ed8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d006      	beq.n	8001ef0 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d020      	beq.n	8001f3c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f043 0204 	orr.w	r2, r3, #4
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d010      	beq.n	8001f8a <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8a4 	bl	80020bc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b28      	cmp	r3, #40	; 0x28
 8001f7e:	d141      	bne.n	8002004 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001f80:	6979      	ldr	r1, [r7, #20]
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f846 	bl	8002014 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001f88:	e03c      	b.n	8002004 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f92:	d014      	beq.n	8001fbe <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff fecf 	bl	8001d38 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <I2C_ITSlaveCplt+0x220>)
 8001f9e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff fccf 	bl	800195a <HAL_I2C_ListenCpltCallback>
}
 8001fbc:	e022      	b.n	8002004 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b22      	cmp	r3, #34	; 0x22
 8001fc8:	d10e      	bne.n	8001fe8 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff fca2 	bl	800192a <HAL_I2C_SlaveRxCpltCallback>
}
 8001fe6:	e00d      	b.n	8002004 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2220      	movs	r2, #32
 8001fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff fc89 	bl	8001916 <HAL_I2C_SlaveTxCpltCallback>
}
 8002004:	bf00      	nop
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	fe00e800 	.word	0xfe00e800
 8002010:	ffff0000 	.word	0xffff0000

08002014 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a25      	ldr	r2, [pc, #148]	; (80020b8 <I2C_ITListenCplt+0xa4>)
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b00      	cmp	r3, #0
 8002048:	d022      	beq.n	8002090 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002066:	2b00      	cmp	r3, #0
 8002068:	d012      	beq.n	8002090 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206e:	3b01      	subs	r3, #1
 8002070:	b29a      	uxth	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002088:	f043 0204 	orr.w	r2, r3, #4
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002090:	f248 0103 	movw	r1, #32771	; 0x8003
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fb55 	bl	8002744 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2210      	movs	r2, #16
 80020a0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fc55 	bl	800195a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	ffff0000 	.word	0xffff0000

080020bc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020cc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a6d      	ldr	r2, [pc, #436]	; (8002290 <I2C_ITError+0x1d4>)
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	2b28      	cmp	r3, #40	; 0x28
 80020f2:	d005      	beq.n	8002100 <I2C_ITError+0x44>
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	2b29      	cmp	r3, #41	; 0x29
 80020f8:	d002      	beq.n	8002100 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	2b2a      	cmp	r3, #42	; 0x2a
 80020fe:	d10b      	bne.n	8002118 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002100:	2103      	movs	r1, #3
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fb1e 	bl	8002744 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2228      	movs	r2, #40	; 0x28
 800210c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a60      	ldr	r2, [pc, #384]	; (8002294 <I2C_ITError+0x1d8>)
 8002114:	635a      	str	r2, [r3, #52]	; 0x34
 8002116:	e030      	b.n	800217a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002118:	f248 0103 	movw	r1, #32771	; 0x8003
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fb11 	bl	8002744 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f8e1 	bl	80022ea <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b60      	cmp	r3, #96	; 0x60
 8002132:	d01f      	beq.n	8002174 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b20      	cmp	r3, #32
 8002148:	d114      	bne.n	8002174 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b10      	cmp	r3, #16
 8002156:	d109      	bne.n	800216c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2210      	movs	r2, #16
 800215e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002164:	f043 0204 	orr.w	r2, r3, #4
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2220      	movs	r2, #32
 8002172:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	2b00      	cmp	r3, #0
 8002186:	d039      	beq.n	80021fc <I2C_ITError+0x140>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b11      	cmp	r3, #17
 800218c:	d002      	beq.n	8002194 <I2C_ITError+0xd8>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b21      	cmp	r3, #33	; 0x21
 8002192:	d133      	bne.n	80021fc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021a2:	d107      	bne.n	80021b4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe ffb7 	bl	800112c <HAL_DMA_GetState>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d017      	beq.n	80021f4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c8:	4a33      	ldr	r2, [pc, #204]	; (8002298 <I2C_ITError+0x1dc>)
 80021ca:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe ff66 	bl	80010aa <HAL_DMA_Abort_IT>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d04d      	beq.n	8002280 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021ee:	4610      	mov	r0, r2
 80021f0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80021f2:	e045      	b.n	8002280 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f851 	bl	800229c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80021fa:	e041      	b.n	8002280 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d039      	beq.n	8002278 <I2C_ITError+0x1bc>
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b12      	cmp	r3, #18
 8002208:	d002      	beq.n	8002210 <I2C_ITError+0x154>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b22      	cmp	r3, #34	; 0x22
 800220e:	d133      	bne.n	8002278 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800221a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800221e:	d107      	bne.n	8002230 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800222e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe ff79 	bl	800112c <HAL_DMA_GetState>
 800223a:	4603      	mov	r3, r0
 800223c:	2b01      	cmp	r3, #1
 800223e:	d017      	beq.n	8002270 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002244:	4a14      	ldr	r2, [pc, #80]	; (8002298 <I2C_ITError+0x1dc>)
 8002246:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe ff28 	bl	80010aa <HAL_DMA_Abort_IT>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d011      	beq.n	8002284 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800226a:	4610      	mov	r0, r2
 800226c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800226e:	e009      	b.n	8002284 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f813 	bl	800229c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002276:	e005      	b.n	8002284 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f80f 	bl	800229c <I2C_TreatErrorCallback>
  }
}
 800227e:	e002      	b.n	8002286 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002280:	bf00      	nop
 8002282:	e000      	b.n	8002286 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002284:	bf00      	nop
}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	ffff0000 	.word	0xffff0000
 8002294:	08001997 	.word	0x08001997
 8002298:	08002333 	.word	0x08002333

0800229c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b60      	cmp	r3, #96	; 0x60
 80022ae:	d10e      	bne.n	80022ce <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff fb5b 	bl	8001982 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80022cc:	e009      	b.n	80022e2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff fb46 	bl	800196e <HAL_I2C_ErrorCallback>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d103      	bne.n	8002308 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2200      	movs	r2, #0
 8002306:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b01      	cmp	r3, #1
 8002314:	d007      	beq.n	8002326 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699a      	ldr	r2, [r3, #24]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0201 	orr.w	r2, r2, #1
 8002324:	619a      	str	r2, [r3, #24]
  }
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234c:	2200      	movs	r2, #0
 800234e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235c:	2200      	movs	r2, #0
 800235e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f7ff ff9b 	bl	800229c <I2C_TreatErrorCallback>
}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	603b      	str	r3, [r7, #0]
 800237a:	4613      	mov	r3, r2
 800237c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800237e:	e031      	b.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002386:	d02d      	beq.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002388:	f7fe fd34 	bl	8000df4 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d302      	bcc.n	800239e <I2C_WaitOnFlagUntilTimeout+0x30>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d122      	bne.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699a      	ldr	r2, [r3, #24]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4013      	ands	r3, r2
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	bf0c      	ite	eq
 80023ae:	2301      	moveq	r3, #1
 80023b0:	2300      	movne	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d113      	bne.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	f043 0220 	orr.w	r2, r3, #32
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e00f      	b.n	8002404 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	4013      	ands	r3, r2
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d0be      	beq.n	8002380 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002418:	e033      	b.n	8002482 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f87e 	bl	8002520 <I2C_IsErrorOccurred>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e031      	b.n	8002492 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d025      	beq.n	8002482 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002436:	f7fe fcdd 	bl	8000df4 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	429a      	cmp	r2, r3
 8002444:	d302      	bcc.n	800244c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d11a      	bne.n	8002482 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b02      	cmp	r3, #2
 8002458:	d013      	beq.n	8002482 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f043 0220 	orr.w	r2, r3, #32
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e007      	b.n	8002492 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b02      	cmp	r3, #2
 800248e:	d1c4      	bne.n	800241a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024a6:	e02f      	b.n	8002508 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 f837 	bl	8002520 <I2C_IsErrorOccurred>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e02d      	b.n	8002518 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024bc:	f7fe fc9a 	bl	8000df4 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d302      	bcc.n	80024d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d11a      	bne.n	8002508 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	2b20      	cmp	r3, #32
 80024de:	d013      	beq.n	8002508 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	f043 0220 	orr.w	r2, r3, #32
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e007      	b.n	8002518 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	2b20      	cmp	r3, #32
 8002514:	d1c8      	bne.n	80024a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b00      	cmp	r3, #0
 800254a:	d068      	beq.n	800261e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2210      	movs	r2, #16
 8002552:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002554:	e049      	b.n	80025ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d045      	beq.n	80025ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800255e:	f7fe fc49 	bl	8000df4 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	429a      	cmp	r2, r3
 800256c:	d302      	bcc.n	8002574 <I2C_IsErrorOccurred+0x54>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d13a      	bne.n	80025ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002586:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002596:	d121      	bne.n	80025dc <I2C_IsErrorOccurred+0xbc>
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800259e:	d01d      	beq.n	80025dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d01a      	beq.n	80025dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80025b6:	f7fe fc1d 	bl	8000df4 <HAL_GetTick>
 80025ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025bc:	e00e      	b.n	80025dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025be:	f7fe fc19 	bl	8000df4 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b19      	cmp	r3, #25
 80025ca:	d907      	bls.n	80025dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	f043 0320 	orr.w	r3, r3, #32
 80025d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80025da:	e006      	b.n	80025ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	d1e9      	bne.n	80025be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d003      	beq.n	8002600 <I2C_IsErrorOccurred+0xe0>
 80025f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0aa      	beq.n	8002556 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002604:	2b00      	cmp	r3, #0
 8002606:	d103      	bne.n	8002610 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2220      	movs	r2, #32
 800260e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	f043 0304 	orr.w	r3, r3, #4
 8002616:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00b      	beq.n	8002648 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002640:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00b      	beq.n	800266a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	f043 0308 	orr.w	r3, r3, #8
 8002658:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002662:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00b      	beq.n	800268c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	f043 0302 	orr.w	r3, r3, #2
 800267a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002684:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800268c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01c      	beq.n	80026ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f7ff fe28 	bl	80022ea <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6859      	ldr	r1, [r3, #4]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <I2C_IsErrorOccurred+0x1bc>)
 80026a6:	400b      	ands	r3, r1
 80026a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	431a      	orrs	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80026ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3728      	adds	r7, #40	; 0x28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	fe00e800 	.word	0xfe00e800

080026e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	817b      	strh	r3, [r7, #10]
 80026ee:	4613      	mov	r3, r2
 80026f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026f2:	897b      	ldrh	r3, [r7, #10]
 80026f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026f8:	7a7b      	ldrb	r3, [r7, #9]
 80026fa:	041b      	lsls	r3, r3, #16
 80026fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002700:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	4313      	orrs	r3, r2
 800270a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800270e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	0d5b      	lsrs	r3, r3, #21
 800271a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <I2C_TransferConfig+0x60>)
 8002720:	430b      	orrs	r3, r1
 8002722:	43db      	mvns	r3, r3
 8002724:	ea02 0103 	and.w	r1, r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	430a      	orrs	r2, r1
 8002730:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002732:	bf00      	nop
 8002734:	371c      	adds	r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	03ff63ff 	.word	0x03ff63ff

08002744 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002754:	887b      	ldrh	r3, [r7, #2]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00f      	beq.n	800277e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002764:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002772:	2b28      	cmp	r3, #40	; 0x28
 8002774:	d003      	beq.n	800277e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800277c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800277e:	887b      	ldrh	r3, [r7, #2]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00f      	beq.n	80027a8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800278e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800279c:	2b28      	cmp	r3, #40	; 0x28
 800279e:	d003      	beq.n	80027a8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80027a6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80027a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	da03      	bge.n	80027b8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80027b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	2b10      	cmp	r3, #16
 80027bc:	d103      	bne.n	80027c6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80027c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80027c6:	887b      	ldrh	r3, [r7, #2]
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d103      	bne.n	80027d4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f043 0320 	orr.w	r3, r3, #32
 80027d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	2b40      	cmp	r3, #64	; 0x40
 80027d8:	d103      	bne.n	80027e2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027e0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6819      	ldr	r1, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	43da      	mvns	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	400a      	ands	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b20      	cmp	r3, #32
 8002814:	d138      	bne.n	8002888 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002820:	2302      	movs	r3, #2
 8002822:	e032      	b.n	800288a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2224      	movs	r2, #36	; 0x24
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0201 	bic.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002852:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6819      	ldr	r1, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	e000      	b.n	800288a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002888:	2302      	movs	r3, #2
  }
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002896:	b480      	push	{r7}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d139      	bne.n	8002920 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e033      	b.n	8002922 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2224      	movs	r2, #36	; 0x24
 80028c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	e000      	b.n	8002922 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002920:	2302      	movs	r3, #2
  }
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <HAL_PWREx_GetVoltageRange+0x18>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40007000 	.word	0x40007000

0800294c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800295a:	d130      	bne.n	80029be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800295c:	4b23      	ldr	r3, [pc, #140]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002968:	d038      	beq.n	80029dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800296a:	4b20      	ldr	r3, [pc, #128]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002972:	4a1e      	ldr	r2, [pc, #120]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002974:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002978:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2232      	movs	r2, #50	; 0x32
 8002980:	fb02 f303 	mul.w	r3, r2, r3
 8002984:	4a1b      	ldr	r2, [pc, #108]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	0c9b      	lsrs	r3, r3, #18
 800298c:	3301      	adds	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002990:	e002      	b.n	8002998 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3b01      	subs	r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002998:	4b14      	ldr	r3, [pc, #80]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a4:	d102      	bne.n	80029ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f2      	bne.n	8002992 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029ac:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b8:	d110      	bne.n	80029dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e00f      	b.n	80029de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029be:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ca:	d007      	beq.n	80029dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029cc:	4b07      	ldr	r3, [pc, #28]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029d4:	4a05      	ldr	r2, [pc, #20]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40007000 	.word	0x40007000
 80029f0:	20000000 	.word	0x20000000
 80029f4:	431bde83 	.word	0x431bde83

080029f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e3ca      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a0a:	4b97      	ldr	r3, [pc, #604]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a14:	4b94      	ldr	r3, [pc, #592]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80e4 	beq.w	8002bf4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d007      	beq.n	8002a42 <HAL_RCC_OscConfig+0x4a>
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	2b0c      	cmp	r3, #12
 8002a36:	f040 808b 	bne.w	8002b50 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	f040 8087 	bne.w	8002b50 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a42:	4b89      	ldr	r3, [pc, #548]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_RCC_OscConfig+0x62>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e3a2      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1a      	ldr	r2, [r3, #32]
 8002a5e:	4b82      	ldr	r3, [pc, #520]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <HAL_RCC_OscConfig+0x7c>
 8002a6a:	4b7f      	ldr	r3, [pc, #508]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a72:	e005      	b.n	8002a80 <HAL_RCC_OscConfig+0x88>
 8002a74:	4b7c      	ldr	r3, [pc, #496]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d223      	bcs.n	8002acc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 fd55 	bl	8003538 <RCC_SetFlashLatencyFromMSIRange>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e383      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a98:	4b73      	ldr	r3, [pc, #460]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a72      	ldr	r2, [pc, #456]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a9e:	f043 0308 	orr.w	r3, r3, #8
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	4b70      	ldr	r3, [pc, #448]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	496d      	ldr	r1, [pc, #436]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab6:	4b6c      	ldr	r3, [pc, #432]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	4968      	ldr	r1, [pc, #416]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	604b      	str	r3, [r1, #4]
 8002aca:	e025      	b.n	8002b18 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002acc:	4b66      	ldr	r3, [pc, #408]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a65      	ldr	r2, [pc, #404]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ad2:	f043 0308 	orr.w	r3, r3, #8
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	4b63      	ldr	r3, [pc, #396]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4960      	ldr	r1, [pc, #384]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aea:	4b5f      	ldr	r3, [pc, #380]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	495b      	ldr	r1, [pc, #364]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d109      	bne.n	8002b18 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 fd15 	bl	8003538 <RCC_SetFlashLatencyFromMSIRange>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e343      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b18:	f000 fc4a 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	4b52      	ldr	r3, [pc, #328]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	091b      	lsrs	r3, r3, #4
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	4950      	ldr	r1, [pc, #320]	; (8002c6c <HAL_RCC_OscConfig+0x274>)
 8002b2a:	5ccb      	ldrb	r3, [r1, r3]
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
 8002b34:	4a4e      	ldr	r2, [pc, #312]	; (8002c70 <HAL_RCC_OscConfig+0x278>)
 8002b36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b38:	4b4e      	ldr	r3, [pc, #312]	; (8002c74 <HAL_RCC_OscConfig+0x27c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe f909 	bl	8000d54 <HAL_InitTick>
 8002b42:	4603      	mov	r3, r0
 8002b44:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d052      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	e327      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d032      	beq.n	8002bbe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b58:	4b43      	ldr	r3, [pc, #268]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a42      	ldr	r2, [pc, #264]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b64:	f7fe f946 	bl	8000df4 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b6c:	f7fe f942 	bl	8000df4 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e310      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b7e:	4b3a      	ldr	r3, [pc, #232]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b8a:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a36      	ldr	r2, [pc, #216]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b90:	f043 0308 	orr.w	r3, r3, #8
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	4b34      	ldr	r3, [pc, #208]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4931      	ldr	r1, [pc, #196]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ba8:	4b2f      	ldr	r3, [pc, #188]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	021b      	lsls	r3, r3, #8
 8002bb6:	492c      	ldr	r1, [pc, #176]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
 8002bbc:	e01a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bbe:	4b2a      	ldr	r3, [pc, #168]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a29      	ldr	r2, [pc, #164]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bca:	f7fe f913 	bl	8000df4 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bd2:	f7fe f90f 	bl	8000df4 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e2dd      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002be4:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f0      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x1da>
 8002bf0:	e000      	b.n	8002bf4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bf2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d074      	beq.n	8002cea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d005      	beq.n	8002c12 <HAL_RCC_OscConfig+0x21a>
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	2b0c      	cmp	r3, #12
 8002c0a:	d10e      	bne.n	8002c2a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d10b      	bne.n	8002c2a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d064      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x2f0>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d160      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e2ba      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c32:	d106      	bne.n	8002c42 <HAL_RCC_OscConfig+0x24a>
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0b      	ldr	r2, [pc, #44]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	e026      	b.n	8002c90 <HAL_RCC_OscConfig+0x298>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c4a:	d115      	bne.n	8002c78 <HAL_RCC_OscConfig+0x280>
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a05      	ldr	r2, [pc, #20]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a02      	ldr	r2, [pc, #8]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	e014      	b.n	8002c90 <HAL_RCC_OscConfig+0x298>
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	080070a4 	.word	0x080070a4
 8002c70:	20000000 	.word	0x20000000
 8002c74:	20000004 	.word	0x20000004
 8002c78:	4ba0      	ldr	r3, [pc, #640]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a9f      	ldr	r2, [pc, #636]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b9d      	ldr	r3, [pc, #628]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a9c      	ldr	r2, [pc, #624]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe f8ac 	bl	8000df4 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7fe f8a8 	bl	8000df4 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e276      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb2:	4b92      	ldr	r3, [pc, #584]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x2a8>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fe f898 	bl	8000df4 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe f894 	bl	8000df4 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e262      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cda:	4b88      	ldr	r3, [pc, #544]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x2d0>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d060      	beq.n	8002db8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_OscConfig+0x310>
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2b0c      	cmp	r3, #12
 8002d00:	d119      	bne.n	8002d36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d116      	bne.n	8002d36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d08:	4b7c      	ldr	r3, [pc, #496]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_OscConfig+0x328>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e23f      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d20:	4b76      	ldr	r3, [pc, #472]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	4973      	ldr	r1, [pc, #460]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d34:	e040      	b.n	8002db8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d023      	beq.n	8002d86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d3e:	4b6f      	ldr	r3, [pc, #444]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a6e      	ldr	r2, [pc, #440]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7fe f853 	bl	8000df4 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d52:	f7fe f84f 	bl	8000df4 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e21d      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d64:	4b65      	ldr	r3, [pc, #404]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d70:	4b62      	ldr	r3, [pc, #392]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	061b      	lsls	r3, r3, #24
 8002d7e:	495f      	ldr	r1, [pc, #380]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]
 8002d84:	e018      	b.n	8002db8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d86:	4b5d      	ldr	r3, [pc, #372]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a5c      	ldr	r2, [pc, #368]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d92:	f7fe f82f 	bl	8000df4 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9a:	f7fe f82b 	bl	8000df4 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e1f9      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dac:	4b53      	ldr	r3, [pc, #332]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d03c      	beq.n	8002e3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01c      	beq.n	8002e06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dcc:	4b4b      	ldr	r3, [pc, #300]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd2:	4a4a      	ldr	r2, [pc, #296]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7fe f80a 	bl	8000df4 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de4:	f7fe f806 	bl	8000df4 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e1d4      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002df6:	4b41      	ldr	r3, [pc, #260]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0ef      	beq.n	8002de4 <HAL_RCC_OscConfig+0x3ec>
 8002e04:	e01b      	b.n	8002e3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0c:	4a3b      	ldr	r2, [pc, #236]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e16:	f7fd ffed 	bl	8000df4 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e1e:	f7fd ffe9 	bl	8000df4 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e1b7      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e30:	4b32      	ldr	r3, [pc, #200]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1ef      	bne.n	8002e1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 80a6 	beq.w	8002f98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e50:	4b2a      	ldr	r3, [pc, #168]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10d      	bne.n	8002e78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5c:	4b27      	ldr	r3, [pc, #156]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e60:	4a26      	ldr	r2, [pc, #152]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e66:	6593      	str	r3, [r2, #88]	; 0x58
 8002e68:	4b24      	ldr	r3, [pc, #144]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e74:	2301      	movs	r3, #1
 8002e76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e78:	4b21      	ldr	r3, [pc, #132]	; (8002f00 <HAL_RCC_OscConfig+0x508>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d118      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e84:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <HAL_RCC_OscConfig+0x508>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a1d      	ldr	r2, [pc, #116]	; (8002f00 <HAL_RCC_OscConfig+0x508>)
 8002e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e90:	f7fd ffb0 	bl	8000df4 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e98:	f7fd ffac 	bl	8000df4 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e17a      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eaa:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <HAL_RCC_OscConfig+0x508>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d108      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4d8>
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec4:	4a0d      	ldr	r2, [pc, #52]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ece:	e029      	b.n	8002f24 <HAL_RCC_OscConfig+0x52c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d115      	bne.n	8002f04 <HAL_RCC_OscConfig+0x50c>
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ede:	4a07      	ldr	r2, [pc, #28]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eee:	4a03      	ldr	r2, [pc, #12]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef8:	e014      	b.n	8002f24 <HAL_RCC_OscConfig+0x52c>
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40007000 	.word	0x40007000
 8002f04:	4b9c      	ldr	r3, [pc, #624]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	4a9b      	ldr	r2, [pc, #620]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f14:	4b98      	ldr	r3, [pc, #608]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1a:	4a97      	ldr	r2, [pc, #604]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 8002f1c:	f023 0304 	bic.w	r3, r3, #4
 8002f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d016      	beq.n	8002f5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2c:	f7fd ff62 	bl	8000df4 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f7fd ff5e 	bl	8000df4 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e12a      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f4a:	4b8b      	ldr	r3, [pc, #556]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0ed      	beq.n	8002f34 <HAL_RCC_OscConfig+0x53c>
 8002f58:	e015      	b.n	8002f86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5a:	f7fd ff4b 	bl	8000df4 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7fd ff47 	bl	8000df4 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e113      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f78:	4b7f      	ldr	r3, [pc, #508]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1ed      	bne.n	8002f62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f86:	7ffb      	ldrb	r3, [r7, #31]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d105      	bne.n	8002f98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8c:	4b7a      	ldr	r3, [pc, #488]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f90:	4a79      	ldr	r2, [pc, #484]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 8002f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f96:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 80fe 	beq.w	800319e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	f040 80d0 	bne.w	800314c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fac:	4b72      	ldr	r3, [pc, #456]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f003 0203 	and.w	r2, r3, #3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d130      	bne.n	8003022 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d127      	bne.n	8003022 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fdc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d11f      	bne.n	8003022 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fec:	2a07      	cmp	r2, #7
 8002fee:	bf14      	ite	ne
 8002ff0:	2201      	movne	r2, #1
 8002ff2:	2200      	moveq	r2, #0
 8002ff4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d113      	bne.n	8003022 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	3b01      	subs	r3, #1
 8003008:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d109      	bne.n	8003022 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	3b01      	subs	r3, #1
 800301c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800301e:	429a      	cmp	r2, r3
 8003020:	d06e      	beq.n	8003100 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	2b0c      	cmp	r3, #12
 8003026:	d069      	beq.n	80030fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003028:	4b53      	ldr	r3, [pc, #332]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d105      	bne.n	8003040 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003034:	4b50      	ldr	r3, [pc, #320]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0ad      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003044:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a4b      	ldr	r2, [pc, #300]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 800304a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800304e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003050:	f7fd fed0 	bl	8000df4 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003058:	f7fd fecc 	bl	8000df4 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e09a      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800306a:	4b43      	ldr	r3, [pc, #268]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003076:	4b40      	ldr	r3, [pc, #256]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	4b40      	ldr	r3, [pc, #256]	; (800317c <HAL_RCC_OscConfig+0x784>)
 800307c:	4013      	ands	r3, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003086:	3a01      	subs	r2, #1
 8003088:	0112      	lsls	r2, r2, #4
 800308a:	4311      	orrs	r1, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003090:	0212      	lsls	r2, r2, #8
 8003092:	4311      	orrs	r1, r2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003098:	0852      	lsrs	r2, r2, #1
 800309a:	3a01      	subs	r2, #1
 800309c:	0552      	lsls	r2, r2, #21
 800309e:	4311      	orrs	r1, r2
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030a4:	0852      	lsrs	r2, r2, #1
 80030a6:	3a01      	subs	r2, #1
 80030a8:	0652      	lsls	r2, r2, #25
 80030aa:	4311      	orrs	r1, r2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030b0:	0912      	lsrs	r2, r2, #4
 80030b2:	0452      	lsls	r2, r2, #17
 80030b4:	430a      	orrs	r2, r1
 80030b6:	4930      	ldr	r1, [pc, #192]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030bc:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a2d      	ldr	r2, [pc, #180]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 80030c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4a2a      	ldr	r2, [pc, #168]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 80030ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030d4:	f7fd fe8e 	bl	8000df4 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030dc:	f7fd fe8a 	bl	8000df4 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e058      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ee:	4b22      	ldr	r3, [pc, #136]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030fa:	e050      	b.n	800319e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e04f      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003100:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d148      	bne.n	800319e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800310c:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a19      	ldr	r2, [pc, #100]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 8003112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003116:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003118:	4b17      	ldr	r3, [pc, #92]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4a16      	ldr	r2, [pc, #88]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 800311e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003122:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003124:	f7fd fe66 	bl	8000df4 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312c:	f7fd fe62 	bl	8000df4 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e030      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800313e:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x734>
 800314a:	e028      	b.n	800319e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	2b0c      	cmp	r3, #12
 8003150:	d023      	beq.n	800319a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a08      	ldr	r2, [pc, #32]	; (8003178 <HAL_RCC_OscConfig+0x780>)
 8003158:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800315c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7fd fe49 	bl	8000df4 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003164:	e00c      	b.n	8003180 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003166:	f7fd fe45 	bl	8000df4 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d905      	bls.n	8003180 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e013      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
 8003178:	40021000 	.word	0x40021000
 800317c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003180:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_RCC_OscConfig+0x7b0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1ec      	bne.n	8003166 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_RCC_OscConfig+0x7b0>)
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	4905      	ldr	r1, [pc, #20]	; (80031a8 <HAL_RCC_OscConfig+0x7b0>)
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_RCC_OscConfig+0x7b4>)
 8003194:	4013      	ands	r3, r2
 8003196:	60cb      	str	r3, [r1, #12]
 8003198:	e001      	b.n	800319e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3720      	adds	r7, #32
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40021000 	.word	0x40021000
 80031ac:	feeefffc 	.word	0xfeeefffc

080031b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0e7      	b.n	8003394 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c4:	4b75      	ldr	r3, [pc, #468]	; (800339c <HAL_RCC_ClockConfig+0x1ec>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d910      	bls.n	80031f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b72      	ldr	r3, [pc, #456]	; (800339c <HAL_RCC_ClockConfig+0x1ec>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 0207 	bic.w	r2, r3, #7
 80031da:	4970      	ldr	r1, [pc, #448]	; (800339c <HAL_RCC_ClockConfig+0x1ec>)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e2:	4b6e      	ldr	r3, [pc, #440]	; (800339c <HAL_RCC_ClockConfig+0x1ec>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0cf      	b.n	8003394 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d010      	beq.n	8003222 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	4b66      	ldr	r3, [pc, #408]	; (80033a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800320c:	429a      	cmp	r2, r3
 800320e:	d908      	bls.n	8003222 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003210:	4b63      	ldr	r3, [pc, #396]	; (80033a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4960      	ldr	r1, [pc, #384]	; (80033a0 <HAL_RCC_ClockConfig+0x1f0>)
 800321e:	4313      	orrs	r3, r2
 8003220:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d04c      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003236:	4b5a      	ldr	r3, [pc, #360]	; (80033a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d121      	bne.n	8003286 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e0a6      	b.n	8003394 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800324e:	4b54      	ldr	r3, [pc, #336]	; (80033a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d115      	bne.n	8003286 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e09a      	b.n	8003394 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d107      	bne.n	8003276 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003266:	4b4e      	ldr	r3, [pc, #312]	; (80033a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e08e      	b.n	8003394 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003276:	4b4a      	ldr	r3, [pc, #296]	; (80033a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e086      	b.n	8003394 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003286:	4b46      	ldr	r3, [pc, #280]	; (80033a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f023 0203 	bic.w	r2, r3, #3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	4943      	ldr	r1, [pc, #268]	; (80033a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003294:	4313      	orrs	r3, r2
 8003296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003298:	f7fd fdac 	bl	8000df4 <HAL_GetTick>
 800329c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	e00a      	b.n	80032b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a0:	f7fd fda8 	bl	8000df4 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e06e      	b.n	8003394 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b6:	4b3a      	ldr	r3, [pc, #232]	; (80033a0 <HAL_RCC_ClockConfig+0x1f0>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 020c 	and.w	r2, r3, #12
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d1eb      	bne.n	80032a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d010      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <HAL_RCC_ClockConfig+0x1f0>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d208      	bcs.n	80032f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e4:	4b2e      	ldr	r3, [pc, #184]	; (80033a0 <HAL_RCC_ClockConfig+0x1f0>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	492b      	ldr	r1, [pc, #172]	; (80033a0 <HAL_RCC_ClockConfig+0x1f0>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032f6:	4b29      	ldr	r3, [pc, #164]	; (800339c <HAL_RCC_ClockConfig+0x1ec>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d210      	bcs.n	8003326 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003304:	4b25      	ldr	r3, [pc, #148]	; (800339c <HAL_RCC_ClockConfig+0x1ec>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f023 0207 	bic.w	r2, r3, #7
 800330c:	4923      	ldr	r1, [pc, #140]	; (800339c <HAL_RCC_ClockConfig+0x1ec>)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	4313      	orrs	r3, r2
 8003312:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003314:	4b21      	ldr	r3, [pc, #132]	; (800339c <HAL_RCC_ClockConfig+0x1ec>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d001      	beq.n	8003326 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e036      	b.n	8003394 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003332:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	4918      	ldr	r1, [pc, #96]	; (80033a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003340:	4313      	orrs	r3, r2
 8003342:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d009      	beq.n	8003364 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003350:	4b13      	ldr	r3, [pc, #76]	; (80033a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4910      	ldr	r1, [pc, #64]	; (80033a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003360:	4313      	orrs	r3, r2
 8003362:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003364:	f000 f824 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8003368:	4602      	mov	r2, r0
 800336a:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <HAL_RCC_ClockConfig+0x1f0>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	490b      	ldr	r1, [pc, #44]	; (80033a4 <HAL_RCC_ClockConfig+0x1f4>)
 8003376:	5ccb      	ldrb	r3, [r1, r3]
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	fa22 f303 	lsr.w	r3, r2, r3
 8003380:	4a09      	ldr	r2, [pc, #36]	; (80033a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003382:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003384:	4b09      	ldr	r3, [pc, #36]	; (80033ac <HAL_RCC_ClockConfig+0x1fc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd fce3 	bl	8000d54 <HAL_InitTick>
 800338e:	4603      	mov	r3, r0
 8003390:	72fb      	strb	r3, [r7, #11]

  return status;
 8003392:	7afb      	ldrb	r3, [r7, #11]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40022000 	.word	0x40022000
 80033a0:	40021000 	.word	0x40021000
 80033a4:	080070a4 	.word	0x080070a4
 80033a8:	20000000 	.word	0x20000000
 80033ac:	20000004 	.word	0x20000004

080033b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b089      	sub	sp, #36	; 0x24
 80033b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033be:	4b3e      	ldr	r3, [pc, #248]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033c8:	4b3b      	ldr	r3, [pc, #236]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x34>
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	2b0c      	cmp	r3, #12
 80033dc:	d121      	bne.n	8003422 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d11e      	bne.n	8003422 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033e4:	4b34      	ldr	r3, [pc, #208]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d107      	bne.n	8003400 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033f0:	4b31      	ldr	r3, [pc, #196]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80033f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f6:	0a1b      	lsrs	r3, r3, #8
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	e005      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003400:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800340c:	4a2b      	ldr	r2, [pc, #172]	; (80034bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003414:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10d      	bne.n	8003438 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003420:	e00a      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b04      	cmp	r3, #4
 8003426:	d102      	bne.n	800342e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003428:	4b25      	ldr	r3, [pc, #148]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	e004      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b08      	cmp	r3, #8
 8003432:	d101      	bne.n	8003438 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003434:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003436:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b0c      	cmp	r3, #12
 800343c:	d134      	bne.n	80034a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800343e:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d003      	beq.n	8003456 <HAL_RCC_GetSysClockFreq+0xa6>
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d003      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0xac>
 8003454:	e005      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003456:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003458:	617b      	str	r3, [r7, #20]
      break;
 800345a:	e005      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800345c:	4b19      	ldr	r3, [pc, #100]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800345e:	617b      	str	r3, [r7, #20]
      break;
 8003460:	e002      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	617b      	str	r3, [r7, #20]
      break;
 8003466:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003468:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	3301      	adds	r3, #1
 8003474:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	0a1b      	lsrs	r3, r3, #8
 800347c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	fb03 f202 	mul.w	r2, r3, r2
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	0e5b      	lsrs	r3, r3, #25
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	3301      	adds	r3, #1
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034a8:	69bb      	ldr	r3, [r7, #24]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3724      	adds	r7, #36	; 0x24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40021000 	.word	0x40021000
 80034bc:	080070bc 	.word	0x080070bc
 80034c0:	00f42400 	.word	0x00f42400
 80034c4:	007a1200 	.word	0x007a1200

080034c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034cc:	4b03      	ldr	r3, [pc, #12]	; (80034dc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ce:	681b      	ldr	r3, [r3, #0]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000000 	.word	0x20000000

080034e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034e4:	f7ff fff0 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	0a1b      	lsrs	r3, r3, #8
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	4904      	ldr	r1, [pc, #16]	; (8003508 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034f6:	5ccb      	ldrb	r3, [r1, r3]
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40021000 	.word	0x40021000
 8003508:	080070b4 	.word	0x080070b4

0800350c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003510:	f7ff ffda 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8003514:	4602      	mov	r2, r0
 8003516:	4b06      	ldr	r3, [pc, #24]	; (8003530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	0adb      	lsrs	r3, r3, #11
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	4904      	ldr	r1, [pc, #16]	; (8003534 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003522:	5ccb      	ldrb	r3, [r1, r3]
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800352c:	4618      	mov	r0, r3
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40021000 	.word	0x40021000
 8003534:	080070b4 	.word	0x080070b4

08003538 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003540:	2300      	movs	r3, #0
 8003542:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003544:	4b2a      	ldr	r3, [pc, #168]	; (80035f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003550:	f7ff f9ee 	bl	8002930 <HAL_PWREx_GetVoltageRange>
 8003554:	6178      	str	r0, [r7, #20]
 8003556:	e014      	b.n	8003582 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003558:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	4a24      	ldr	r2, [pc, #144]	; (80035f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800355e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003562:	6593      	str	r3, [r2, #88]	; 0x58
 8003564:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003570:	f7ff f9de 	bl	8002930 <HAL_PWREx_GetVoltageRange>
 8003574:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003576:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357a:	4a1d      	ldr	r2, [pc, #116]	; (80035f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003580:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003588:	d10b      	bne.n	80035a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b80      	cmp	r3, #128	; 0x80
 800358e:	d919      	bls.n	80035c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2ba0      	cmp	r3, #160	; 0xa0
 8003594:	d902      	bls.n	800359c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003596:	2302      	movs	r3, #2
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	e013      	b.n	80035c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800359c:	2301      	movs	r3, #1
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	e010      	b.n	80035c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b80      	cmp	r3, #128	; 0x80
 80035a6:	d902      	bls.n	80035ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035a8:	2303      	movs	r3, #3
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	e00a      	b.n	80035c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b80      	cmp	r3, #128	; 0x80
 80035b2:	d102      	bne.n	80035ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035b4:	2302      	movs	r3, #2
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	e004      	b.n	80035c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b70      	cmp	r3, #112	; 0x70
 80035be:	d101      	bne.n	80035c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035c0:	2301      	movs	r3, #1
 80035c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f023 0207 	bic.w	r2, r3, #7
 80035cc:	4909      	ldr	r1, [pc, #36]	; (80035f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035d4:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d001      	beq.n	80035e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40022000 	.word	0x40022000

080035f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003600:	2300      	movs	r3, #0
 8003602:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003604:	2300      	movs	r3, #0
 8003606:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003610:	2b00      	cmp	r3, #0
 8003612:	d041      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003618:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800361c:	d02a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800361e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003622:	d824      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003624:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003628:	d008      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800362a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800362e:	d81e      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003634:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003638:	d010      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800363a:	e018      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800363c:	4b86      	ldr	r3, [pc, #536]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4a85      	ldr	r2, [pc, #532]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003646:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003648:	e015      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3304      	adds	r3, #4
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fabb 	bl	8003bcc <RCCEx_PLLSAI1_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800365a:	e00c      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3320      	adds	r3, #32
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fba6 	bl	8003db4 <RCCEx_PLLSAI2_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800366c:	e003      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	74fb      	strb	r3, [r7, #19]
      break;
 8003672:	e000      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003676:	7cfb      	ldrb	r3, [r7, #19]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10b      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800367c:	4b76      	ldr	r3, [pc, #472]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003682:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800368a:	4973      	ldr	r1, [pc, #460]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003692:	e001      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003694:	7cfb      	ldrb	r3, [r7, #19]
 8003696:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d041      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036ac:	d02a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036b2:	d824      	bhi.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036b8:	d008      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036be:	d81e      	bhi.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c8:	d010      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036ca:	e018      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036cc:	4b62      	ldr	r3, [pc, #392]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4a61      	ldr	r2, [pc, #388]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036d8:	e015      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3304      	adds	r3, #4
 80036de:	2100      	movs	r1, #0
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fa73 	bl	8003bcc <RCCEx_PLLSAI1_Config>
 80036e6:	4603      	mov	r3, r0
 80036e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036ea:	e00c      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3320      	adds	r3, #32
 80036f0:	2100      	movs	r1, #0
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fb5e 	bl	8003db4 <RCCEx_PLLSAI2_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036fc:	e003      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	74fb      	strb	r3, [r7, #19]
      break;
 8003702:	e000      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003706:	7cfb      	ldrb	r3, [r7, #19]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10b      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800370c:	4b52      	ldr	r3, [pc, #328]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800371a:	494f      	ldr	r1, [pc, #316]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003722:	e001      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80a0 	beq.w	8003876 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003736:	2300      	movs	r3, #0
 8003738:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800373a:	4b47      	ldr	r3, [pc, #284]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00d      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003750:	4b41      	ldr	r3, [pc, #260]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003754:	4a40      	ldr	r2, [pc, #256]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375a:	6593      	str	r3, [r2, #88]	; 0x58
 800375c:	4b3e      	ldr	r3, [pc, #248]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003768:	2301      	movs	r3, #1
 800376a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800376c:	4b3b      	ldr	r3, [pc, #236]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a3a      	ldr	r2, [pc, #232]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003776:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003778:	f7fd fb3c 	bl	8000df4 <HAL_GetTick>
 800377c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800377e:	e009      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003780:	f7fd fb38 	bl	8000df4 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d902      	bls.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	74fb      	strb	r3, [r7, #19]
        break;
 8003792:	e005      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003794:	4b31      	ldr	r3, [pc, #196]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0ef      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d15c      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037a6:	4b2c      	ldr	r3, [pc, #176]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01f      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d019      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037c4:	4b24      	ldr	r3, [pc, #144]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037d0:	4b21      	ldr	r3, [pc, #132]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d6:	4a20      	ldr	r2, [pc, #128]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037e0:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037f0:	4a19      	ldr	r2, [pc, #100]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d016      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003802:	f7fd faf7 	bl	8000df4 <HAL_GetTick>
 8003806:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003808:	e00b      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380a:	f7fd faf3 	bl	8000df4 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	f241 3288 	movw	r2, #5000	; 0x1388
 8003818:	4293      	cmp	r3, r2
 800381a:	d902      	bls.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	74fb      	strb	r3, [r7, #19]
            break;
 8003820:	e006      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003822:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0ec      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003830:	7cfb      	ldrb	r3, [r7, #19]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10c      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003836:	4b08      	ldr	r3, [pc, #32]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003846:	4904      	ldr	r1, [pc, #16]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800384e:	e009      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	74bb      	strb	r3, [r7, #18]
 8003854:	e006      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000
 800385c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003864:	7c7b      	ldrb	r3, [r7, #17]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d105      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800386a:	4b9e      	ldr	r3, [pc, #632]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386e:	4a9d      	ldr	r2, [pc, #628]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003874:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003882:	4b98      	ldr	r3, [pc, #608]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003888:	f023 0203 	bic.w	r2, r3, #3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003890:	4994      	ldr	r1, [pc, #592]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038a4:	4b8f      	ldr	r3, [pc, #572]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038aa:	f023 020c 	bic.w	r2, r3, #12
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b2:	498c      	ldr	r1, [pc, #560]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038c6:	4b87      	ldr	r3, [pc, #540]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	4983      	ldr	r1, [pc, #524]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038e8:	4b7e      	ldr	r3, [pc, #504]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	497b      	ldr	r1, [pc, #492]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800390a:	4b76      	ldr	r3, [pc, #472]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003918:	4972      	ldr	r1, [pc, #456]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800392c:	4b6d      	ldr	r3, [pc, #436]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393a:	496a      	ldr	r1, [pc, #424]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800394e:	4b65      	ldr	r3, [pc, #404]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003954:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395c:	4961      	ldr	r1, [pc, #388]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003970:	4b5c      	ldr	r3, [pc, #368]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003976:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397e:	4959      	ldr	r1, [pc, #356]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003992:	4b54      	ldr	r3, [pc, #336]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003998:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a0:	4950      	ldr	r1, [pc, #320]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039b4:	4b4b      	ldr	r3, [pc, #300]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c2:	4948      	ldr	r1, [pc, #288]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039d6:	4b43      	ldr	r3, [pc, #268]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	493f      	ldr	r1, [pc, #252]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d028      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039f8:	4b3a      	ldr	r3, [pc, #232]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a06:	4937      	ldr	r1, [pc, #220]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a16:	d106      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a18:	4b32      	ldr	r3, [pc, #200]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4a31      	ldr	r2, [pc, #196]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a22:	60d3      	str	r3, [r2, #12]
 8003a24:	e011      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a2e:	d10c      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3304      	adds	r3, #4
 8003a34:	2101      	movs	r1, #1
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f8c8 	bl	8003bcc <RCCEx_PLLSAI1_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a40:	7cfb      	ldrb	r3, [r7, #19]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a46:	7cfb      	ldrb	r3, [r7, #19]
 8003a48:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d028      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a56:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	491f      	ldr	r1, [pc, #124]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a74:	d106      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a76:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a80:	60d3      	str	r3, [r2, #12]
 8003a82:	e011      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3304      	adds	r3, #4
 8003a92:	2101      	movs	r1, #1
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 f899 	bl	8003bcc <RCCEx_PLLSAI1_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a9e:	7cfb      	ldrb	r3, [r7, #19]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d02b      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac2:	4908      	ldr	r1, [pc, #32]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ad2:	d109      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad4:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4a02      	ldr	r2, [pc, #8]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ade:	60d3      	str	r3, [r2, #12]
 8003ae0:	e014      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ae2:	bf00      	nop
 8003ae4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3304      	adds	r3, #4
 8003af6:	2101      	movs	r1, #1
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 f867 	bl	8003bcc <RCCEx_PLLSAI1_Config>
 8003afe:	4603      	mov	r3, r0
 8003b00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b02:	7cfb      	ldrb	r3, [r7, #19]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d02f      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b18:	4b2b      	ldr	r3, [pc, #172]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b26:	4928      	ldr	r1, [pc, #160]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b36:	d10d      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	2102      	movs	r1, #2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 f844 	bl	8003bcc <RCCEx_PLLSAI1_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b48:	7cfb      	ldrb	r3, [r7, #19]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d014      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b4e:	7cfb      	ldrb	r3, [r7, #19]
 8003b50:	74bb      	strb	r3, [r7, #18]
 8003b52:	e011      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b5c:	d10c      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3320      	adds	r3, #32
 8003b62:	2102      	movs	r1, #2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 f925 	bl	8003db4 <RCCEx_PLLSAI2_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b6e:	7cfb      	ldrb	r3, [r7, #19]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b74:	7cfb      	ldrb	r3, [r7, #19]
 8003b76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b84:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b92:	490d      	ldr	r1, [pc, #52]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00b      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ba6:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bb6:	4904      	ldr	r1, [pc, #16]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bbe:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40021000 	.word	0x40021000

08003bcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bda:	4b75      	ldr	r3, [pc, #468]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d018      	beq.n	8003c18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003be6:	4b72      	ldr	r3, [pc, #456]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f003 0203 	and.w	r2, r3, #3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d10d      	bne.n	8003c12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
       ||
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003bfe:	4b6c      	ldr	r3, [pc, #432]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
       ||
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d047      	beq.n	8003ca2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	73fb      	strb	r3, [r7, #15]
 8003c16:	e044      	b.n	8003ca2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d018      	beq.n	8003c52 <RCCEx_PLLSAI1_Config+0x86>
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d825      	bhi.n	8003c70 <RCCEx_PLLSAI1_Config+0xa4>
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d002      	beq.n	8003c2e <RCCEx_PLLSAI1_Config+0x62>
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d009      	beq.n	8003c40 <RCCEx_PLLSAI1_Config+0x74>
 8003c2c:	e020      	b.n	8003c70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c2e:	4b60      	ldr	r3, [pc, #384]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d11d      	bne.n	8003c76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c3e:	e01a      	b.n	8003c76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c40:	4b5b      	ldr	r3, [pc, #364]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d116      	bne.n	8003c7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c50:	e013      	b.n	8003c7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c52:	4b57      	ldr	r3, [pc, #348]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10f      	bne.n	8003c7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c5e:	4b54      	ldr	r3, [pc, #336]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c6e:	e006      	b.n	8003c7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
      break;
 8003c74:	e004      	b.n	8003c80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c76:	bf00      	nop
 8003c78:	e002      	b.n	8003c80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c7a:	bf00      	nop
 8003c7c:	e000      	b.n	8003c80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10d      	bne.n	8003ca2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c86:	4b4a      	ldr	r3, [pc, #296]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6819      	ldr	r1, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	430b      	orrs	r3, r1
 8003c9c:	4944      	ldr	r1, [pc, #272]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d17d      	bne.n	8003da4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ca8:	4b41      	ldr	r3, [pc, #260]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a40      	ldr	r2, [pc, #256]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb4:	f7fd f89e 	bl	8000df4 <HAL_GetTick>
 8003cb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cba:	e009      	b.n	8003cd0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cbc:	f7fd f89a 	bl	8000df4 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d902      	bls.n	8003cd0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	73fb      	strb	r3, [r7, #15]
        break;
 8003cce:	e005      	b.n	8003cdc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cd0:	4b37      	ldr	r3, [pc, #220]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1ef      	bne.n	8003cbc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d160      	bne.n	8003da4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d111      	bne.n	8003d0c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ce8:	4b31      	ldr	r3, [pc, #196]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6892      	ldr	r2, [r2, #8]
 8003cf8:	0211      	lsls	r1, r2, #8
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	68d2      	ldr	r2, [r2, #12]
 8003cfe:	0912      	lsrs	r2, r2, #4
 8003d00:	0452      	lsls	r2, r2, #17
 8003d02:	430a      	orrs	r2, r1
 8003d04:	492a      	ldr	r1, [pc, #168]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	610b      	str	r3, [r1, #16]
 8003d0a:	e027      	b.n	8003d5c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d112      	bne.n	8003d38 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d12:	4b27      	ldr	r3, [pc, #156]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6892      	ldr	r2, [r2, #8]
 8003d22:	0211      	lsls	r1, r2, #8
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6912      	ldr	r2, [r2, #16]
 8003d28:	0852      	lsrs	r2, r2, #1
 8003d2a:	3a01      	subs	r2, #1
 8003d2c:	0552      	lsls	r2, r2, #21
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	491f      	ldr	r1, [pc, #124]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	610b      	str	r3, [r1, #16]
 8003d36:	e011      	b.n	8003d5c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d38:	4b1d      	ldr	r3, [pc, #116]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6892      	ldr	r2, [r2, #8]
 8003d48:	0211      	lsls	r1, r2, #8
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6952      	ldr	r2, [r2, #20]
 8003d4e:	0852      	lsrs	r2, r2, #1
 8003d50:	3a01      	subs	r2, #1
 8003d52:	0652      	lsls	r2, r2, #25
 8003d54:	430a      	orrs	r2, r1
 8003d56:	4916      	ldr	r1, [pc, #88]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d5c:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a13      	ldr	r2, [pc, #76]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d68:	f7fd f844 	bl	8000df4 <HAL_GetTick>
 8003d6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d6e:	e009      	b.n	8003d84 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d70:	f7fd f840 	bl	8000df4 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d902      	bls.n	8003d84 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	73fb      	strb	r3, [r7, #15]
          break;
 8003d82:	e005      	b.n	8003d90 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d84:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0ef      	beq.n	8003d70 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d98:	691a      	ldr	r2, [r3, #16]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	4904      	ldr	r1, [pc, #16]	; (8003db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000

08003db4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dc2:	4b6a      	ldr	r3, [pc, #424]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d018      	beq.n	8003e00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003dce:	4b67      	ldr	r3, [pc, #412]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 0203 	and.w	r2, r3, #3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d10d      	bne.n	8003dfa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
       ||
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003de6:	4b61      	ldr	r3, [pc, #388]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	091b      	lsrs	r3, r3, #4
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
       ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d047      	beq.n	8003e8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
 8003dfe:	e044      	b.n	8003e8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d018      	beq.n	8003e3a <RCCEx_PLLSAI2_Config+0x86>
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d825      	bhi.n	8003e58 <RCCEx_PLLSAI2_Config+0xa4>
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d002      	beq.n	8003e16 <RCCEx_PLLSAI2_Config+0x62>
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d009      	beq.n	8003e28 <RCCEx_PLLSAI2_Config+0x74>
 8003e14:	e020      	b.n	8003e58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e16:	4b55      	ldr	r3, [pc, #340]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d11d      	bne.n	8003e5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e26:	e01a      	b.n	8003e5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e28:	4b50      	ldr	r3, [pc, #320]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d116      	bne.n	8003e62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e38:	e013      	b.n	8003e62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e3a:	4b4c      	ldr	r3, [pc, #304]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10f      	bne.n	8003e66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e46:	4b49      	ldr	r3, [pc, #292]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e56:	e006      	b.n	8003e66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e5c:	e004      	b.n	8003e68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e5e:	bf00      	nop
 8003e60:	e002      	b.n	8003e68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e62:	bf00      	nop
 8003e64:	e000      	b.n	8003e68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e66:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10d      	bne.n	8003e8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e6e:	4b3f      	ldr	r3, [pc, #252]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6819      	ldr	r1, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	430b      	orrs	r3, r1
 8003e84:	4939      	ldr	r1, [pc, #228]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d167      	bne.n	8003f60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e90:	4b36      	ldr	r3, [pc, #216]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a35      	ldr	r2, [pc, #212]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9c:	f7fc ffaa 	bl	8000df4 <HAL_GetTick>
 8003ea0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ea2:	e009      	b.n	8003eb8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ea4:	f7fc ffa6 	bl	8000df4 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d902      	bls.n	8003eb8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	73fb      	strb	r3, [r7, #15]
        break;
 8003eb6:	e005      	b.n	8003ec4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003eb8:	4b2c      	ldr	r3, [pc, #176]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1ef      	bne.n	8003ea4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d14a      	bne.n	8003f60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d111      	bne.n	8003ef4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ed0:	4b26      	ldr	r3, [pc, #152]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6892      	ldr	r2, [r2, #8]
 8003ee0:	0211      	lsls	r1, r2, #8
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	68d2      	ldr	r2, [r2, #12]
 8003ee6:	0912      	lsrs	r2, r2, #4
 8003ee8:	0452      	lsls	r2, r2, #17
 8003eea:	430a      	orrs	r2, r1
 8003eec:	491f      	ldr	r1, [pc, #124]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	614b      	str	r3, [r1, #20]
 8003ef2:	e011      	b.n	8003f18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ef4:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003efc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6892      	ldr	r2, [r2, #8]
 8003f04:	0211      	lsls	r1, r2, #8
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6912      	ldr	r2, [r2, #16]
 8003f0a:	0852      	lsrs	r2, r2, #1
 8003f0c:	3a01      	subs	r2, #1
 8003f0e:	0652      	lsls	r2, r2, #25
 8003f10:	430a      	orrs	r2, r1
 8003f12:	4916      	ldr	r1, [pc, #88]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f18:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a13      	ldr	r2, [pc, #76]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f24:	f7fc ff66 	bl	8000df4 <HAL_GetTick>
 8003f28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f2a:	e009      	b.n	8003f40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f2c:	f7fc ff62 	bl	8000df4 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d902      	bls.n	8003f40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	73fb      	strb	r3, [r7, #15]
          break;
 8003f3e:	e005      	b.n	8003f4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f40:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0ef      	beq.n	8003f2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f52:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	4904      	ldr	r1, [pc, #16]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000

08003f70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e040      	b.n	8004004 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7fc fd4e 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2224      	movs	r2, #36	; 0x24
 8003f9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0201 	bic.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fec0 	bl	8004d3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fc05 	bl	80047cc <UART_SetConfig>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e01b      	b.n	8004004 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 ff3f 	bl	8004e80 <UART_CheckIdleState>
 8004002:	4603      	mov	r3, r0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08a      	sub	sp, #40	; 0x28
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	4613      	mov	r3, r2
 800401a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004020:	2b20      	cmp	r3, #32
 8004022:	d178      	bne.n	8004116 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <HAL_UART_Transmit+0x24>
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e071      	b.n	8004118 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2221      	movs	r2, #33	; 0x21
 8004040:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004042:	f7fc fed7 	bl	8000df4 <HAL_GetTick>
 8004046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	88fa      	ldrh	r2, [r7, #6]
 8004054:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004060:	d108      	bne.n	8004074 <HAL_UART_Transmit+0x68>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d104      	bne.n	8004074 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	e003      	b.n	800407c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004078:	2300      	movs	r3, #0
 800407a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800407c:	e030      	b.n	80040e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2200      	movs	r2, #0
 8004086:	2180      	movs	r1, #128	; 0x80
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 ffa1 	bl	8004fd0 <UART_WaitOnFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d004      	beq.n	800409e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e03c      	b.n	8004118 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10b      	bne.n	80040bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	881a      	ldrh	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040b0:	b292      	uxth	r2, r2
 80040b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	3302      	adds	r3, #2
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	e008      	b.n	80040ce <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	781a      	ldrb	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	b292      	uxth	r2, r2
 80040c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	3301      	adds	r3, #1
 80040cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1c8      	bne.n	800407e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2200      	movs	r2, #0
 80040f4:	2140      	movs	r1, #64	; 0x40
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 ff6a 	bl	8004fd0 <UART_WaitOnFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d004      	beq.n	800410c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e005      	b.n	8004118 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	e000      	b.n	8004118 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004116:	2302      	movs	r3, #2
  }
}
 8004118:	4618      	mov	r0, r3
 800411a:	3720      	adds	r7, #32
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	; 0x28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	4613      	mov	r3, r2
 800412c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004134:	2b20      	cmp	r3, #32
 8004136:	d137      	bne.n	80041a8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_UART_Receive_IT+0x24>
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e030      	b.n	80041aa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a18      	ldr	r2, [pc, #96]	; (80041b4 <HAL_UART_Receive_IT+0x94>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d01f      	beq.n	8004198 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d018      	beq.n	8004198 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	613b      	str	r3, [r7, #16]
   return(result);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	623b      	str	r3, [r7, #32]
 8004186:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	69f9      	ldr	r1, [r7, #28]
 800418a:	6a3a      	ldr	r2, [r7, #32]
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	61bb      	str	r3, [r7, #24]
   return(result);
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e6      	bne.n	8004166 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	461a      	mov	r2, r3
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 ff7e 	bl	80050a0 <UART_Start_Receive_IT>
 80041a4:	4603      	mov	r3, r0
 80041a6:	e000      	b.n	80041aa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041a8:	2302      	movs	r3, #2
  }
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3728      	adds	r7, #40	; 0x28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40008000 	.word	0x40008000

080041b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b0ba      	sub	sp, #232	; 0xe8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80041e6:	4013      	ands	r3, r2
 80041e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80041ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d115      	bne.n	8004220 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00f      	beq.n	8004220 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d009      	beq.n	8004220 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 82ae 	beq.w	8004772 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	4798      	blx	r3
      }
      return;
 800421e:	e2a8      	b.n	8004772 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004220:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 8117 	beq.w	8004458 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800422a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004236:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800423a:	4b85      	ldr	r3, [pc, #532]	; (8004450 <HAL_UART_IRQHandler+0x298>)
 800423c:	4013      	ands	r3, r2
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 810a 	beq.w	8004458 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d011      	beq.n	8004274 <HAL_UART_IRQHandler+0xbc>
 8004250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00b      	beq.n	8004274 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2201      	movs	r2, #1
 8004262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800426a:	f043 0201 	orr.w	r2, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d011      	beq.n	80042a4 <HAL_UART_IRQHandler+0xec>
 8004280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00b      	beq.n	80042a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2202      	movs	r2, #2
 8004292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800429a:	f043 0204 	orr.w	r2, r3, #4
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d011      	beq.n	80042d4 <HAL_UART_IRQHandler+0x11c>
 80042b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00b      	beq.n	80042d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2204      	movs	r2, #4
 80042c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ca:	f043 0202 	orr.w	r2, r3, #2
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d017      	beq.n	8004310 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d105      	bne.n	80042f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00b      	beq.n	8004310 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2208      	movs	r2, #8
 80042fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004306:	f043 0208 	orr.w	r2, r3, #8
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004318:	2b00      	cmp	r3, #0
 800431a:	d012      	beq.n	8004342 <HAL_UART_IRQHandler+0x18a>
 800431c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004320:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00c      	beq.n	8004342 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004330:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8214 	beq.w	8004776 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800434e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00d      	beq.n	8004376 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800435a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800435e:	f003 0320 	and.w	r3, r3, #32
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800437c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b40      	cmp	r3, #64	; 0x40
 800438c:	d005      	beq.n	800439a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800438e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004392:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004396:	2b00      	cmp	r3, #0
 8004398:	d04f      	beq.n	800443a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 ff46 	bl	800522c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	d141      	bne.n	8004432 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3308      	adds	r3, #8
 80043b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3308      	adds	r3, #8
 80043d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1d9      	bne.n	80043ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d013      	beq.n	800442a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004406:	4a13      	ldr	r2, [pc, #76]	; (8004454 <HAL_UART_IRQHandler+0x29c>)
 8004408:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440e:	4618      	mov	r0, r3
 8004410:	f7fc fe4b 	bl	80010aa <HAL_DMA_Abort_IT>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d017      	beq.n	800444a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004424:	4610      	mov	r0, r2
 8004426:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	e00f      	b.n	800444a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f9b8 	bl	80047a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004430:	e00b      	b.n	800444a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f9b4 	bl	80047a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004438:	e007      	b.n	800444a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f9b0 	bl	80047a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004448:	e195      	b.n	8004776 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800444a:	bf00      	nop
    return;
 800444c:	e193      	b.n	8004776 <HAL_UART_IRQHandler+0x5be>
 800444e:	bf00      	nop
 8004450:	04000120 	.word	0x04000120
 8004454:	080052f5 	.word	0x080052f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445c:	2b01      	cmp	r3, #1
 800445e:	f040 814e 	bne.w	80046fe <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004466:	f003 0310 	and.w	r3, r3, #16
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 8147 	beq.w	80046fe <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8140 	beq.w	80046fe <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2210      	movs	r2, #16
 8004484:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004490:	2b40      	cmp	r3, #64	; 0x40
 8004492:	f040 80b8 	bne.w	8004606 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 8167 	beq.w	800477a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044b6:	429a      	cmp	r2, r3
 80044b8:	f080 815f 	bcs.w	800477a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f040 8086 	bne.w	80045e4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004502:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004506:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800450e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800451a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1da      	bne.n	80044d8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3308      	adds	r3, #8
 8004528:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3308      	adds	r3, #8
 8004542:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004546:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800454a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800454e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e1      	bne.n	8004522 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3308      	adds	r3, #8
 8004564:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800456e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004574:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3308      	adds	r3, #8
 800457e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004582:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004584:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004588:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e3      	bne.n	800455e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b4:	f023 0310 	bic.w	r3, r3, #16
 80045b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80045c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045ce:	e841 2300 	strex	r3, r2, [r1]
 80045d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e4      	bne.n	80045a4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fc fd25 	bl	800102e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	4619      	mov	r1, r3
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f8d8 	bl	80047b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004604:	e0b9      	b.n	800477a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004612:	b29b      	uxth	r3, r3
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80ab 	beq.w	800477e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004628:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80a6 	beq.w	800477e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463a:	e853 3f00 	ldrex	r3, [r3]
 800463e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004642:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004646:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004654:	647b      	str	r3, [r7, #68]	; 0x44
 8004656:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800465a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800465c:	e841 2300 	strex	r3, r2, [r1]
 8004660:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e4      	bne.n	8004632 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3308      	adds	r3, #8
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	623b      	str	r3, [r7, #32]
   return(result);
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3308      	adds	r3, #8
 8004688:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800468c:	633a      	str	r2, [r7, #48]	; 0x30
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004694:	e841 2300 	strex	r3, r2, [r1]
 8004698:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e3      	bne.n	8004668 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f023 0310 	bic.w	r3, r3, #16
 80046c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	461a      	mov	r2, r3
 80046d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	69b9      	ldr	r1, [r7, #24]
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	617b      	str	r3, [r7, #20]
   return(result);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e4      	bne.n	80046b4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2202      	movs	r2, #2
 80046ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046f4:	4619      	mov	r1, r3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f85c 	bl	80047b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046fc:	e03f      	b.n	800477e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00e      	beq.n	8004728 <HAL_UART_IRQHandler+0x570>
 800470a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800470e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d008      	beq.n	8004728 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800471e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 ffe3 	bl	80056ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004726:	e02d      	b.n	8004784 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00e      	beq.n	8004752 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01c      	beq.n	8004782 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	4798      	blx	r3
    }
    return;
 8004750:	e017      	b.n	8004782 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d012      	beq.n	8004784 <HAL_UART_IRQHandler+0x5cc>
 800475e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00c      	beq.n	8004784 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fdd8 	bl	8005320 <UART_EndTransmit_IT>
    return;
 8004770:	e008      	b.n	8004784 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004772:	bf00      	nop
 8004774:	e006      	b.n	8004784 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004776:	bf00      	nop
 8004778:	e004      	b.n	8004784 <HAL_UART_IRQHandler+0x5cc>
      return;
 800477a:	bf00      	nop
 800477c:	e002      	b.n	8004784 <HAL_UART_IRQHandler+0x5cc>
      return;
 800477e:	bf00      	nop
 8004780:	e000      	b.n	8004784 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004782:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004784:	37e8      	adds	r7, #232	; 0xe8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop

0800478c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d0:	b08a      	sub	sp, #40	; 0x28
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	431a      	orrs	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4ba4      	ldr	r3, [pc, #656]	; (8004a8c <UART_SetConfig+0x2c0>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	6812      	ldr	r2, [r2, #0]
 8004802:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004804:	430b      	orrs	r3, r1
 8004806:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a99      	ldr	r2, [pc, #612]	; (8004a90 <UART_SetConfig+0x2c4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004834:	4313      	orrs	r3, r2
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004848:	430a      	orrs	r2, r1
 800484a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a90      	ldr	r2, [pc, #576]	; (8004a94 <UART_SetConfig+0x2c8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d126      	bne.n	80048a4 <UART_SetConfig+0xd8>
 8004856:	4b90      	ldr	r3, [pc, #576]	; (8004a98 <UART_SetConfig+0x2cc>)
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	2b03      	cmp	r3, #3
 8004862:	d81b      	bhi.n	800489c <UART_SetConfig+0xd0>
 8004864:	a201      	add	r2, pc, #4	; (adr r2, 800486c <UART_SetConfig+0xa0>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	0800487d 	.word	0x0800487d
 8004870:	0800488d 	.word	0x0800488d
 8004874:	08004885 	.word	0x08004885
 8004878:	08004895 	.word	0x08004895
 800487c:	2301      	movs	r3, #1
 800487e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004882:	e116      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004884:	2302      	movs	r3, #2
 8004886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488a:	e112      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 800488c:	2304      	movs	r3, #4
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004892:	e10e      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004894:	2308      	movs	r3, #8
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489a:	e10a      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 800489c:	2310      	movs	r3, #16
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a2:	e106      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a7c      	ldr	r2, [pc, #496]	; (8004a9c <UART_SetConfig+0x2d0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d138      	bne.n	8004920 <UART_SetConfig+0x154>
 80048ae:	4b7a      	ldr	r3, [pc, #488]	; (8004a98 <UART_SetConfig+0x2cc>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b4:	f003 030c 	and.w	r3, r3, #12
 80048b8:	2b0c      	cmp	r3, #12
 80048ba:	d82d      	bhi.n	8004918 <UART_SetConfig+0x14c>
 80048bc:	a201      	add	r2, pc, #4	; (adr r2, 80048c4 <UART_SetConfig+0xf8>)
 80048be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c2:	bf00      	nop
 80048c4:	080048f9 	.word	0x080048f9
 80048c8:	08004919 	.word	0x08004919
 80048cc:	08004919 	.word	0x08004919
 80048d0:	08004919 	.word	0x08004919
 80048d4:	08004909 	.word	0x08004909
 80048d8:	08004919 	.word	0x08004919
 80048dc:	08004919 	.word	0x08004919
 80048e0:	08004919 	.word	0x08004919
 80048e4:	08004901 	.word	0x08004901
 80048e8:	08004919 	.word	0x08004919
 80048ec:	08004919 	.word	0x08004919
 80048f0:	08004919 	.word	0x08004919
 80048f4:	08004911 	.word	0x08004911
 80048f8:	2300      	movs	r3, #0
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fe:	e0d8      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004900:	2302      	movs	r3, #2
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004906:	e0d4      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004908:	2304      	movs	r3, #4
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490e:	e0d0      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004910:	2308      	movs	r3, #8
 8004912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004916:	e0cc      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004918:	2310      	movs	r3, #16
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491e:	e0c8      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a5e      	ldr	r2, [pc, #376]	; (8004aa0 <UART_SetConfig+0x2d4>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d125      	bne.n	8004976 <UART_SetConfig+0x1aa>
 800492a:	4b5b      	ldr	r3, [pc, #364]	; (8004a98 <UART_SetConfig+0x2cc>)
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004930:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004934:	2b30      	cmp	r3, #48	; 0x30
 8004936:	d016      	beq.n	8004966 <UART_SetConfig+0x19a>
 8004938:	2b30      	cmp	r3, #48	; 0x30
 800493a:	d818      	bhi.n	800496e <UART_SetConfig+0x1a2>
 800493c:	2b20      	cmp	r3, #32
 800493e:	d00a      	beq.n	8004956 <UART_SetConfig+0x18a>
 8004940:	2b20      	cmp	r3, #32
 8004942:	d814      	bhi.n	800496e <UART_SetConfig+0x1a2>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <UART_SetConfig+0x182>
 8004948:	2b10      	cmp	r3, #16
 800494a:	d008      	beq.n	800495e <UART_SetConfig+0x192>
 800494c:	e00f      	b.n	800496e <UART_SetConfig+0x1a2>
 800494e:	2300      	movs	r3, #0
 8004950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004954:	e0ad      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004956:	2302      	movs	r3, #2
 8004958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800495c:	e0a9      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 800495e:	2304      	movs	r3, #4
 8004960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004964:	e0a5      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004966:	2308      	movs	r3, #8
 8004968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496c:	e0a1      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 800496e:	2310      	movs	r3, #16
 8004970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004974:	e09d      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a4a      	ldr	r2, [pc, #296]	; (8004aa4 <UART_SetConfig+0x2d8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d125      	bne.n	80049cc <UART_SetConfig+0x200>
 8004980:	4b45      	ldr	r3, [pc, #276]	; (8004a98 <UART_SetConfig+0x2cc>)
 8004982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004986:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800498a:	2bc0      	cmp	r3, #192	; 0xc0
 800498c:	d016      	beq.n	80049bc <UART_SetConfig+0x1f0>
 800498e:	2bc0      	cmp	r3, #192	; 0xc0
 8004990:	d818      	bhi.n	80049c4 <UART_SetConfig+0x1f8>
 8004992:	2b80      	cmp	r3, #128	; 0x80
 8004994:	d00a      	beq.n	80049ac <UART_SetConfig+0x1e0>
 8004996:	2b80      	cmp	r3, #128	; 0x80
 8004998:	d814      	bhi.n	80049c4 <UART_SetConfig+0x1f8>
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <UART_SetConfig+0x1d8>
 800499e:	2b40      	cmp	r3, #64	; 0x40
 80049a0:	d008      	beq.n	80049b4 <UART_SetConfig+0x1e8>
 80049a2:	e00f      	b.n	80049c4 <UART_SetConfig+0x1f8>
 80049a4:	2300      	movs	r3, #0
 80049a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049aa:	e082      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 80049ac:	2302      	movs	r3, #2
 80049ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049b2:	e07e      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 80049b4:	2304      	movs	r3, #4
 80049b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ba:	e07a      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 80049bc:	2308      	movs	r3, #8
 80049be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c2:	e076      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 80049c4:	2310      	movs	r3, #16
 80049c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ca:	e072      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a35      	ldr	r2, [pc, #212]	; (8004aa8 <UART_SetConfig+0x2dc>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d12a      	bne.n	8004a2c <UART_SetConfig+0x260>
 80049d6:	4b30      	ldr	r3, [pc, #192]	; (8004a98 <UART_SetConfig+0x2cc>)
 80049d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049e4:	d01a      	beq.n	8004a1c <UART_SetConfig+0x250>
 80049e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ea:	d81b      	bhi.n	8004a24 <UART_SetConfig+0x258>
 80049ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f0:	d00c      	beq.n	8004a0c <UART_SetConfig+0x240>
 80049f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f6:	d815      	bhi.n	8004a24 <UART_SetConfig+0x258>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <UART_SetConfig+0x238>
 80049fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a00:	d008      	beq.n	8004a14 <UART_SetConfig+0x248>
 8004a02:	e00f      	b.n	8004a24 <UART_SetConfig+0x258>
 8004a04:	2300      	movs	r3, #0
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0a:	e052      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a12:	e04e      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004a14:	2304      	movs	r3, #4
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1a:	e04a      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004a1c:	2308      	movs	r3, #8
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a22:	e046      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004a24:	2310      	movs	r3, #16
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2a:	e042      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a17      	ldr	r2, [pc, #92]	; (8004a90 <UART_SetConfig+0x2c4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d13a      	bne.n	8004aac <UART_SetConfig+0x2e0>
 8004a36:	4b18      	ldr	r3, [pc, #96]	; (8004a98 <UART_SetConfig+0x2cc>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a44:	d01a      	beq.n	8004a7c <UART_SetConfig+0x2b0>
 8004a46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a4a:	d81b      	bhi.n	8004a84 <UART_SetConfig+0x2b8>
 8004a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a50:	d00c      	beq.n	8004a6c <UART_SetConfig+0x2a0>
 8004a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a56:	d815      	bhi.n	8004a84 <UART_SetConfig+0x2b8>
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <UART_SetConfig+0x298>
 8004a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a60:	d008      	beq.n	8004a74 <UART_SetConfig+0x2a8>
 8004a62:	e00f      	b.n	8004a84 <UART_SetConfig+0x2b8>
 8004a64:	2300      	movs	r3, #0
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a6a:	e022      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a72:	e01e      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004a74:	2304      	movs	r3, #4
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a7a:	e01a      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004a7c:	2308      	movs	r3, #8
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a82:	e016      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004a84:	2310      	movs	r3, #16
 8004a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a8a:	e012      	b.n	8004ab2 <UART_SetConfig+0x2e6>
 8004a8c:	efff69f3 	.word	0xefff69f3
 8004a90:	40008000 	.word	0x40008000
 8004a94:	40013800 	.word	0x40013800
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	40004400 	.word	0x40004400
 8004aa0:	40004800 	.word	0x40004800
 8004aa4:	40004c00 	.word	0x40004c00
 8004aa8:	40005000 	.word	0x40005000
 8004aac:	2310      	movs	r3, #16
 8004aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a9f      	ldr	r2, [pc, #636]	; (8004d34 <UART_SetConfig+0x568>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d17a      	bne.n	8004bb2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004abc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d824      	bhi.n	8004b0e <UART_SetConfig+0x342>
 8004ac4:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <UART_SetConfig+0x300>)
 8004ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aca:	bf00      	nop
 8004acc:	08004af1 	.word	0x08004af1
 8004ad0:	08004b0f 	.word	0x08004b0f
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004b0f 	.word	0x08004b0f
 8004adc:	08004aff 	.word	0x08004aff
 8004ae0:	08004b0f 	.word	0x08004b0f
 8004ae4:	08004b0f 	.word	0x08004b0f
 8004ae8:	08004b0f 	.word	0x08004b0f
 8004aec:	08004b07 	.word	0x08004b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004af0:	f7fe fcf6 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 8004af4:	61f8      	str	r0, [r7, #28]
        break;
 8004af6:	e010      	b.n	8004b1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af8:	4b8f      	ldr	r3, [pc, #572]	; (8004d38 <UART_SetConfig+0x56c>)
 8004afa:	61fb      	str	r3, [r7, #28]
        break;
 8004afc:	e00d      	b.n	8004b1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004afe:	f7fe fc57 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8004b02:	61f8      	str	r0, [r7, #28]
        break;
 8004b04:	e009      	b.n	8004b1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b0a:	61fb      	str	r3, [r7, #28]
        break;
 8004b0c:	e005      	b.n	8004b1a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 80fb 	beq.w	8004d18 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	4613      	mov	r3, r2
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	4413      	add	r3, r2
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d305      	bcc.n	8004b3e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b38:	69fa      	ldr	r2, [r7, #28]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d903      	bls.n	8004b46 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b44:	e0e8      	b.n	8004d18 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	461c      	mov	r4, r3
 8004b4c:	4615      	mov	r5, r2
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	f04f 0300 	mov.w	r3, #0
 8004b56:	022b      	lsls	r3, r5, #8
 8004b58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b5c:	0222      	lsls	r2, r4, #8
 8004b5e:	68f9      	ldr	r1, [r7, #12]
 8004b60:	6849      	ldr	r1, [r1, #4]
 8004b62:	0849      	lsrs	r1, r1, #1
 8004b64:	2000      	movs	r0, #0
 8004b66:	4688      	mov	r8, r1
 8004b68:	4681      	mov	r9, r0
 8004b6a:	eb12 0a08 	adds.w	sl, r2, r8
 8004b6e:	eb43 0b09 	adc.w	fp, r3, r9
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b80:	4650      	mov	r0, sl
 8004b82:	4659      	mov	r1, fp
 8004b84:	f7fb fb74 	bl	8000270 <__aeabi_uldivmod>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b96:	d308      	bcc.n	8004baa <UART_SetConfig+0x3de>
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b9e:	d204      	bcs.n	8004baa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	60da      	str	r2, [r3, #12]
 8004ba8:	e0b6      	b.n	8004d18 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bb0:	e0b2      	b.n	8004d18 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bba:	d15e      	bne.n	8004c7a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d828      	bhi.n	8004c16 <UART_SetConfig+0x44a>
 8004bc4:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <UART_SetConfig+0x400>)
 8004bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bca:	bf00      	nop
 8004bcc:	08004bf1 	.word	0x08004bf1
 8004bd0:	08004bf9 	.word	0x08004bf9
 8004bd4:	08004c01 	.word	0x08004c01
 8004bd8:	08004c17 	.word	0x08004c17
 8004bdc:	08004c07 	.word	0x08004c07
 8004be0:	08004c17 	.word	0x08004c17
 8004be4:	08004c17 	.word	0x08004c17
 8004be8:	08004c17 	.word	0x08004c17
 8004bec:	08004c0f 	.word	0x08004c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf0:	f7fe fc76 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 8004bf4:	61f8      	str	r0, [r7, #28]
        break;
 8004bf6:	e014      	b.n	8004c22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf8:	f7fe fc88 	bl	800350c <HAL_RCC_GetPCLK2Freq>
 8004bfc:	61f8      	str	r0, [r7, #28]
        break;
 8004bfe:	e010      	b.n	8004c22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c00:	4b4d      	ldr	r3, [pc, #308]	; (8004d38 <UART_SetConfig+0x56c>)
 8004c02:	61fb      	str	r3, [r7, #28]
        break;
 8004c04:	e00d      	b.n	8004c22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c06:	f7fe fbd3 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8004c0a:	61f8      	str	r0, [r7, #28]
        break;
 8004c0c:	e009      	b.n	8004c22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c12:	61fb      	str	r3, [r7, #28]
        break;
 8004c14:	e005      	b.n	8004c22 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d077      	beq.n	8004d18 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	005a      	lsls	r2, r3, #1
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	085b      	lsrs	r3, r3, #1
 8004c32:	441a      	add	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	2b0f      	cmp	r3, #15
 8004c42:	d916      	bls.n	8004c72 <UART_SetConfig+0x4a6>
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c4a:	d212      	bcs.n	8004c72 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f023 030f 	bic.w	r3, r3, #15
 8004c54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	085b      	lsrs	r3, r3, #1
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	8afb      	ldrh	r3, [r7, #22]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	8afa      	ldrh	r2, [r7, #22]
 8004c6e:	60da      	str	r2, [r3, #12]
 8004c70:	e052      	b.n	8004d18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c78:	e04e      	b.n	8004d18 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d827      	bhi.n	8004cd2 <UART_SetConfig+0x506>
 8004c82:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <UART_SetConfig+0x4bc>)
 8004c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c88:	08004cad 	.word	0x08004cad
 8004c8c:	08004cb5 	.word	0x08004cb5
 8004c90:	08004cbd 	.word	0x08004cbd
 8004c94:	08004cd3 	.word	0x08004cd3
 8004c98:	08004cc3 	.word	0x08004cc3
 8004c9c:	08004cd3 	.word	0x08004cd3
 8004ca0:	08004cd3 	.word	0x08004cd3
 8004ca4:	08004cd3 	.word	0x08004cd3
 8004ca8:	08004ccb 	.word	0x08004ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cac:	f7fe fc18 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 8004cb0:	61f8      	str	r0, [r7, #28]
        break;
 8004cb2:	e014      	b.n	8004cde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cb4:	f7fe fc2a 	bl	800350c <HAL_RCC_GetPCLK2Freq>
 8004cb8:	61f8      	str	r0, [r7, #28]
        break;
 8004cba:	e010      	b.n	8004cde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cbc:	4b1e      	ldr	r3, [pc, #120]	; (8004d38 <UART_SetConfig+0x56c>)
 8004cbe:	61fb      	str	r3, [r7, #28]
        break;
 8004cc0:	e00d      	b.n	8004cde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cc2:	f7fe fb75 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8004cc6:	61f8      	str	r0, [r7, #28]
        break;
 8004cc8:	e009      	b.n	8004cde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cce:	61fb      	str	r3, [r7, #28]
        break;
 8004cd0:	e005      	b.n	8004cde <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004cdc:	bf00      	nop
    }

    if (pclk != 0U)
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d019      	beq.n	8004d18 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	085a      	lsrs	r2, r3, #1
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	441a      	add	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2b0f      	cmp	r3, #15
 8004cfc:	d909      	bls.n	8004d12 <UART_SetConfig+0x546>
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d04:	d205      	bcs.n	8004d12 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	60da      	str	r2, [r3, #12]
 8004d10:	e002      	b.n	8004d18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3728      	adds	r7, #40	; 0x28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d32:	bf00      	nop
 8004d34:	40008000 	.word	0x40008000
 8004d38:	00f42400 	.word	0x00f42400

08004d3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	f003 0304 	and.w	r3, r3, #4
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01a      	beq.n	8004e52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e3a:	d10a      	bne.n	8004e52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	605a      	str	r2, [r3, #4]
  }
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b098      	sub	sp, #96	; 0x60
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e90:	f7fb ffb0 	bl	8000df4 <HAL_GetTick>
 8004e94:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d12e      	bne.n	8004f02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ea4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eac:	2200      	movs	r2, #0
 8004eae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f88c 	bl	8004fd0 <UART_WaitOnFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d021      	beq.n	8004f02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ed2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004edc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ede:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e6      	bne.n	8004ebe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e062      	b.n	8004fc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d149      	bne.n	8004fa4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f856 	bl	8004fd0 <UART_WaitOnFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d03c      	beq.n	8004fa4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	623b      	str	r3, [r7, #32]
   return(result);
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	461a      	mov	r2, r3
 8004f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f48:	633b      	str	r3, [r7, #48]	; 0x30
 8004f4a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e6      	bne.n	8004f2a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3308      	adds	r3, #8
 8004f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3308      	adds	r3, #8
 8004f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f7c:	61fa      	str	r2, [r7, #28]
 8004f7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	69b9      	ldr	r1, [r7, #24]
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	617b      	str	r3, [r7, #20]
   return(result);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e5      	bne.n	8004f5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e011      	b.n	8004fc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3758      	adds	r7, #88	; 0x58
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe0:	e049      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d045      	beq.n	8005076 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fea:	f7fb ff03 	bl	8000df4 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d302      	bcc.n	8005000 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e048      	b.n	8005096 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	d031      	beq.n	8005076 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b08      	cmp	r3, #8
 800501e:	d110      	bne.n	8005042 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2208      	movs	r2, #8
 8005026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f8ff 	bl	800522c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2208      	movs	r2, #8
 8005032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e029      	b.n	8005096 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800504c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005050:	d111      	bne.n	8005076 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800505a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f8e5 	bl	800522c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2220      	movs	r2, #32
 8005066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e00f      	b.n	8005096 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69da      	ldr	r2, [r3, #28]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4013      	ands	r3, r2
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	429a      	cmp	r2, r3
 8005084:	bf0c      	ite	eq
 8005086:	2301      	moveq	r3, #1
 8005088:	2300      	movne	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	429a      	cmp	r2, r3
 8005092:	d0a6      	beq.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b097      	sub	sp, #92	; 0x5c
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	4613      	mov	r3, r2
 80050ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	88fa      	ldrh	r2, [r7, #6]
 80050b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	88fa      	ldrh	r2, [r7, #6]
 80050c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d2:	d10e      	bne.n	80050f2 <UART_Start_Receive_IT+0x52>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d105      	bne.n	80050e8 <UART_Start_Receive_IT+0x48>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80050e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050e6:	e02d      	b.n	8005144 <UART_Start_Receive_IT+0xa4>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	22ff      	movs	r2, #255	; 0xff
 80050ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050f0:	e028      	b.n	8005144 <UART_Start_Receive_IT+0xa4>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10d      	bne.n	8005116 <UART_Start_Receive_IT+0x76>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <UART_Start_Receive_IT+0x6c>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	22ff      	movs	r2, #255	; 0xff
 8005106:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800510a:	e01b      	b.n	8005144 <UART_Start_Receive_IT+0xa4>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	227f      	movs	r2, #127	; 0x7f
 8005110:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005114:	e016      	b.n	8005144 <UART_Start_Receive_IT+0xa4>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800511e:	d10d      	bne.n	800513c <UART_Start_Receive_IT+0x9c>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d104      	bne.n	8005132 <UART_Start_Receive_IT+0x92>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	227f      	movs	r2, #127	; 0x7f
 800512c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005130:	e008      	b.n	8005144 <UART_Start_Receive_IT+0xa4>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	223f      	movs	r2, #63	; 0x3f
 8005136:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800513a:	e003      	b.n	8005144 <UART_Start_Receive_IT+0xa4>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2222      	movs	r2, #34	; 0x22
 8005150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3308      	adds	r3, #8
 800515a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	657b      	str	r3, [r7, #84]	; 0x54
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3308      	adds	r3, #8
 8005172:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005174:	64ba      	str	r2, [r7, #72]	; 0x48
 8005176:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800517a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e5      	bne.n	8005154 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005190:	d107      	bne.n	80051a2 <UART_Start_Receive_IT+0x102>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d103      	bne.n	80051a2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4a21      	ldr	r2, [pc, #132]	; (8005224 <UART_Start_Receive_IT+0x184>)
 800519e:	669a      	str	r2, [r3, #104]	; 0x68
 80051a0:	e002      	b.n	80051a8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4a20      	ldr	r2, [pc, #128]	; (8005228 <UART_Start_Receive_IT+0x188>)
 80051a6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d019      	beq.n	80051e4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80051c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ce:	637b      	str	r3, [r7, #52]	; 0x34
 80051d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e6      	bne.n	80051b0 <UART_Start_Receive_IT+0x110>
 80051e2:	e018      	b.n	8005216 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	e853 3f00 	ldrex	r3, [r3]
 80051f0:	613b      	str	r3, [r7, #16]
   return(result);
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f043 0320 	orr.w	r3, r3, #32
 80051f8:	653b      	str	r3, [r7, #80]	; 0x50
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005202:	623b      	str	r3, [r7, #32]
 8005204:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005206:	69f9      	ldr	r1, [r7, #28]
 8005208:	6a3a      	ldr	r2, [r7, #32]
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e6      	bne.n	80051e4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	375c      	adds	r7, #92	; 0x5c
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	08005531 	.word	0x08005531
 8005228:	08005375 	.word	0x08005375

0800522c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800522c:	b480      	push	{r7}
 800522e:	b095      	sub	sp, #84	; 0x54
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005248:	64fb      	str	r3, [r7, #76]	; 0x4c
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005252:	643b      	str	r3, [r7, #64]	; 0x40
 8005254:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e6      	bne.n	8005234 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3308      	adds	r3, #8
 800526c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	61fb      	str	r3, [r7, #28]
   return(result);
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	f023 0301 	bic.w	r3, r3, #1
 800527c:	64bb      	str	r3, [r7, #72]	; 0x48
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3308      	adds	r3, #8
 8005284:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005288:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800528c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e5      	bne.n	8005266 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d118      	bne.n	80052d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f023 0310 	bic.w	r3, r3, #16
 80052b6:	647b      	str	r3, [r7, #68]	; 0x44
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	461a      	mov	r2, r3
 80052be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	6979      	ldr	r1, [r7, #20]
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	613b      	str	r3, [r7, #16]
   return(result);
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e6      	bne.n	80052a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052e8:	bf00      	nop
 80052ea:	3754      	adds	r7, #84	; 0x54
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005300:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f7ff fa44 	bl	80047a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005318:	bf00      	nop
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	60bb      	str	r3, [r7, #8]
   return(result);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800533c:	61fb      	str	r3, [r7, #28]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	61bb      	str	r3, [r7, #24]
 8005348:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534a:	6979      	ldr	r1, [r7, #20]
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	613b      	str	r3, [r7, #16]
   return(result);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e6      	bne.n	8005328 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff fa10 	bl	800478c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800536c:	bf00      	nop
 800536e:	3720      	adds	r7, #32
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b09c      	sub	sp, #112	; 0x70
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005382:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800538c:	2b22      	cmp	r3, #34	; 0x22
 800538e:	f040 80be 	bne.w	800550e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005398:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800539c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80053a0:	b2d9      	uxtb	r1, r3
 80053a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ac:	400a      	ands	r2, r1
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f040 80a3 	bne.w	8005522 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e4:	e853 3f00 	ldrex	r3, [r3]
 80053e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80053fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005400:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e6      	bne.n	80053dc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3308      	adds	r3, #8
 8005414:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800541e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005420:	f023 0301 	bic.w	r3, r3, #1
 8005424:	667b      	str	r3, [r7, #100]	; 0x64
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3308      	adds	r3, #8
 800542c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800542e:	647a      	str	r2, [r7, #68]	; 0x44
 8005430:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005434:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800543c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e5      	bne.n	800540e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a34      	ldr	r2, [pc, #208]	; (800552c <UART_RxISR_8BIT+0x1b8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d01f      	beq.n	80054a0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d018      	beq.n	80054a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	623b      	str	r3, [r7, #32]
   return(result);
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005482:	663b      	str	r3, [r7, #96]	; 0x60
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800548c:	633b      	str	r3, [r7, #48]	; 0x30
 800548e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e6      	bne.n	800546e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d12e      	bne.n	8005506 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	e853 3f00 	ldrex	r3, [r3]
 80054ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0310 	bic.w	r3, r3, #16
 80054c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	69b9      	ldr	r1, [r7, #24]
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	e841 2300 	strex	r3, r2, [r1]
 80054d8:	617b      	str	r3, [r7, #20]
   return(result);
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e6      	bne.n	80054ae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f003 0310 	and.w	r3, r3, #16
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d103      	bne.n	80054f6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2210      	movs	r2, #16
 80054f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff f958 	bl	80047b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005504:	e00d      	b.n	8005522 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7fb f846 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 800550c:	e009      	b.n	8005522 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	8b1b      	ldrh	r3, [r3, #24]
 8005514:	b29a      	uxth	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0208 	orr.w	r2, r2, #8
 800551e:	b292      	uxth	r2, r2
 8005520:	831a      	strh	r2, [r3, #24]
}
 8005522:	bf00      	nop
 8005524:	3770      	adds	r7, #112	; 0x70
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40008000 	.word	0x40008000

08005530 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b09c      	sub	sp, #112	; 0x70
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800553e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005548:	2b22      	cmp	r3, #34	; 0x22
 800554a:	f040 80be 	bne.w	80056ca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005554:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800555e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005562:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005566:	4013      	ands	r3, r2
 8005568:	b29a      	uxth	r2, r3
 800556a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800556c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005572:	1c9a      	adds	r2, r3, #2
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	f040 80a3 	bne.w	80056de <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80055a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055ac:	667b      	str	r3, [r7, #100]	; 0x64
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055b6:	657b      	str	r3, [r7, #84]	; 0x54
 80055b8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80055bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e6      	bne.n	8005598 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3308      	adds	r3, #8
 80055d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	f023 0301 	bic.w	r3, r3, #1
 80055e0:	663b      	str	r3, [r7, #96]	; 0x60
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055ea:	643a      	str	r2, [r7, #64]	; 0x40
 80055ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e5      	bne.n	80055ca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a34      	ldr	r2, [pc, #208]	; (80056e8 <UART_RxISR_16BIT+0x1b8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d01f      	beq.n	800565c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d018      	beq.n	800565c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	61fb      	str	r3, [r7, #28]
   return(result);
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800563e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800564a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800564e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e6      	bne.n	800562a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005660:	2b01      	cmp	r3, #1
 8005662:	d12e      	bne.n	80056c2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	e853 3f00 	ldrex	r3, [r3]
 8005676:	60bb      	str	r3, [r7, #8]
   return(result);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f023 0310 	bic.w	r3, r3, #16
 800567e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	461a      	mov	r2, r3
 8005686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	6979      	ldr	r1, [r7, #20]
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	e841 2300 	strex	r3, r2, [r1]
 8005694:	613b      	str	r3, [r7, #16]
   return(result);
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1e6      	bne.n	800566a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	f003 0310 	and.w	r3, r3, #16
 80056a6:	2b10      	cmp	r3, #16
 80056a8:	d103      	bne.n	80056b2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2210      	movs	r2, #16
 80056b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056b8:	4619      	mov	r1, r3
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff f87a 	bl	80047b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056c0:	e00d      	b.n	80056de <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fa ff68 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 80056c8:	e009      	b.n	80056de <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	8b1b      	ldrh	r3, [r3, #24]
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0208 	orr.w	r2, r2, #8
 80056da:	b292      	uxth	r2, r2
 80056dc:	831a      	strh	r2, [r3, #24]
}
 80056de:	bf00      	nop
 80056e0:	3770      	adds	r7, #112	; 0x70
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	40008000 	.word	0x40008000

080056ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <ring_buffer_init>:

/**
 * @brief This function initializes the control struct of the ring buffer
*/
void ring_buffer_init(ring_buffer_t *ring_buffer, uint8_t *buffer, uint16_t capacity)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	4613      	mov	r3, r2
 800570c:	80fb      	strh	r3, [r7, #6]
	ring_buffer->buffer = buffer;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	601a      	str	r2, [r3, #0]
	ring_buffer->capacity = capacity;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	88fa      	ldrh	r2, [r7, #6]
 8005718:	811a      	strh	r2, [r3, #8]

	ring_buffer->head = 0;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	809a      	strh	r2, [r3, #4]
	ring_buffer->tail = 0;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	80da      	strh	r2, [r3, #6]
	ring_buffer->is_full = 0;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	729a      	strb	r2, [r3, #10]
}
 800572c:	bf00      	nop
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <ring_buffer_put>:
/**
 * @brief This function adds a data in the ring buffer
 * @param data: the value to be added
*/
uint8_t ring_buffer_put(ring_buffer_t *ring_buffer, uint8_t data)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	70fb      	strb	r3, [r7, #3]
	ring_buffer->buffer[ring_buffer->head] = data;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	8892      	ldrh	r2, [r2, #4]
 800574c:	4413      	add	r3, r2
 800574e:	78fa      	ldrb	r2, [r7, #3]
 8005750:	701a      	strb	r2, [r3, #0]
	ring_buffer->head = (ring_buffer->head + 1) % ring_buffer->capacity;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	889b      	ldrh	r3, [r3, #4]
 8005756:	3301      	adds	r3, #1
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	8912      	ldrh	r2, [r2, #8]
 800575c:	fb93 f1f2 	sdiv	r1, r3, r2
 8005760:	fb01 f202 	mul.w	r2, r1, r2
 8005764:	1a9b      	subs	r3, r3, r2
 8005766:	b29a      	uxth	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	809a      	strh	r2, [r3, #4]

	if (ring_buffer->is_full != 0) {
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	7a9b      	ldrb	r3, [r3, #10]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00c      	beq.n	800578e <ring_buffer_put+0x56>
		ring_buffer->tail = (ring_buffer->tail + 1) % ring_buffer->capacity;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	88db      	ldrh	r3, [r3, #6]
 8005778:	3301      	adds	r3, #1
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	8912      	ldrh	r2, [r2, #8]
 800577e:	fb93 f1f2 	sdiv	r1, r3, r2
 8005782:	fb01 f202 	mul.w	r2, r1, r2
 8005786:	1a9b      	subs	r3, r3, r2
 8005788:	b29a      	uxth	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	80da      	strh	r2, [r3, #6]
	}

	if (ring_buffer->head == ring_buffer->tail) {
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	889a      	ldrh	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	88db      	ldrh	r3, [r3, #6]
 8005796:	429a      	cmp	r2, r3
 8005798:	d104      	bne.n	80057a4 <ring_buffer_put+0x6c>
		ring_buffer->is_full = 1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	729a      	strb	r2, [r3, #10]
		return 0;
 80057a0:	2300      	movs	r3, #0
 80057a2:	e000      	b.n	80057a6 <ring_buffer_put+0x6e>
	}
	return 1;
 80057a4:	2301      	movs	r3, #1
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <ring_buffer_get>:
/**
 * @brief This function reads a data from the ring buffer
 * @param data: the pointer to the address to write the data
*/
uint8_t ring_buffer_get(ring_buffer_t *ring_buffer, uint8_t *data)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	6039      	str	r1, [r7, #0]
	if (ring_buffer_is_empty(ring_buffer) == 0) {
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f822 	bl	8005806 <ring_buffer_is_empty>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d119      	bne.n	80057fc <ring_buffer_get+0x4a>
		*data = ring_buffer->buffer[ring_buffer->tail];
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	88d2      	ldrh	r2, [r2, #6]
 80057d0:	4413      	add	r3, r2
 80057d2:	781a      	ldrb	r2, [r3, #0]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	701a      	strb	r2, [r3, #0]
		ring_buffer->tail = (ring_buffer->tail + 1) % ring_buffer->capacity;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	88db      	ldrh	r3, [r3, #6]
 80057dc:	3301      	adds	r3, #1
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	8912      	ldrh	r2, [r2, #8]
 80057e2:	fb93 f1f2 	sdiv	r1, r3, r2
 80057e6:	fb01 f202 	mul.w	r2, r1, r2
 80057ea:	1a9b      	subs	r3, r3, r2
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	80da      	strh	r2, [r3, #6]
		ring_buffer->is_full = 0;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	729a      	strb	r2, [r3, #10]
		return 1;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e000      	b.n	80057fe <ring_buffer_get+0x4c>
	}
	return 0;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <ring_buffer_is_empty>:

/**
 * @brief this function checks if the buffer is empty
 */
uint8_t ring_buffer_is_empty(ring_buffer_t *ring_buffer)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
	return ((ring_buffer->is_full == 0) && (ring_buffer->tail == ring_buffer->head));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	7a9b      	ldrb	r3, [r3, #10]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d107      	bne.n	8005826 <ring_buffer_is_empty+0x20>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	88da      	ldrh	r2, [r3, #6]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	889b      	ldrh	r3, [r3, #4]
 800581e:	429a      	cmp	r2, r3
 8005820:	d101      	bne.n	8005826 <ring_buffer_is_empty+0x20>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <ring_buffer_is_empty+0x22>
 8005826:	2300      	movs	r3, #0
 8005828:	b2db      	uxtb	r3, r3
}
 800582a:	4618      	mov	r0, r3
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
	...

08005838 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af04      	add	r7, sp, #16
 800583e:	4603      	mov	r3, r0
 8005840:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005842:	f04f 33ff 	mov.w	r3, #4294967295
 8005846:	9302      	str	r3, [sp, #8]
 8005848:	2301      	movs	r3, #1
 800584a:	9301      	str	r3, [sp, #4]
 800584c:	1dfb      	adds	r3, r7, #7
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	2301      	movs	r3, #1
 8005852:	2200      	movs	r2, #0
 8005854:	2178      	movs	r1, #120	; 0x78
 8005856:	4803      	ldr	r0, [pc, #12]	; (8005864 <ssd1306_WriteCommand+0x2c>)
 8005858:	f7fb fed4 	bl	8001604 <HAL_I2C_Mem_Write>
}
 800585c:	bf00      	nop
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	2000008c 	.word	0x2000008c

08005868 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af04      	add	r7, sp, #16
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	b29b      	uxth	r3, r3
 8005876:	f04f 32ff 	mov.w	r2, #4294967295
 800587a:	9202      	str	r2, [sp, #8]
 800587c:	9301      	str	r3, [sp, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	2301      	movs	r3, #1
 8005884:	2240      	movs	r2, #64	; 0x40
 8005886:	2178      	movs	r1, #120	; 0x78
 8005888:	4803      	ldr	r0, [pc, #12]	; (8005898 <ssd1306_WriteData+0x30>)
 800588a:	f7fb febb 	bl	8001604 <HAL_I2C_Mem_Write>
}
 800588e:	bf00      	nop
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	2000008c 	.word	0x2000008c

0800589c <ssd1306_Fill>:
    
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	4603      	mov	r3, r0
 80058a4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e00d      	b.n	80058c8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80058ac:	79fb      	ldrb	r3, [r7, #7]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <ssd1306_Fill+0x1a>
 80058b2:	2100      	movs	r1, #0
 80058b4:	e000      	b.n	80058b8 <ssd1306_Fill+0x1c>
 80058b6:	21ff      	movs	r1, #255	; 0xff
 80058b8:	4a09      	ldr	r2, [pc, #36]	; (80058e0 <ssd1306_Fill+0x44>)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4413      	add	r3, r2
 80058be:	460a      	mov	r2, r1
 80058c0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3301      	adds	r3, #1
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ce:	d3ed      	bcc.n	80058ac <ssd1306_Fill+0x10>
    }
}
 80058d0:	bf00      	nop
 80058d2:	bf00      	nop
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	20000194 	.word	0x20000194

080058e4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80058ea:	2300      	movs	r3, #0
 80058ec:	71fb      	strb	r3, [r7, #7]
 80058ee:	e016      	b.n	800591e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	3b50      	subs	r3, #80	; 0x50
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff ff9e 	bl	8005838 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80058fc:	2000      	movs	r0, #0
 80058fe:	f7ff ff9b 	bl	8005838 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8005902:	2010      	movs	r0, #16
 8005904:	f7ff ff98 	bl	8005838 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005908:	79fb      	ldrb	r3, [r7, #7]
 800590a:	01db      	lsls	r3, r3, #7
 800590c:	4a08      	ldr	r2, [pc, #32]	; (8005930 <ssd1306_UpdateScreen+0x4c>)
 800590e:	4413      	add	r3, r2
 8005910:	2180      	movs	r1, #128	; 0x80
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff ffa8 	bl	8005868 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	3301      	adds	r3, #1
 800591c:	71fb      	strb	r3, [r7, #7]
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	2b07      	cmp	r3, #7
 8005922:	d9e5      	bls.n	80058f0 <ssd1306_UpdateScreen+0xc>
    }
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000194 	.word	0x20000194

08005934 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	4603      	mov	r3, r0
 800593c:	71fb      	strb	r3, [r7, #7]
 800593e:	460b      	mov	r3, r1
 8005940:	71bb      	strb	r3, [r7, #6]
 8005942:	4613      	mov	r3, r2
 8005944:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800594a:	2b00      	cmp	r3, #0
 800594c:	db3d      	blt.n	80059ca <ssd1306_DrawPixel+0x96>
 800594e:	79bb      	ldrb	r3, [r7, #6]
 8005950:	2b3f      	cmp	r3, #63	; 0x3f
 8005952:	d83a      	bhi.n	80059ca <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8005954:	797b      	ldrb	r3, [r7, #5]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d11a      	bne.n	8005990 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800595a:	79fa      	ldrb	r2, [r7, #7]
 800595c:	79bb      	ldrb	r3, [r7, #6]
 800595e:	08db      	lsrs	r3, r3, #3
 8005960:	b2d8      	uxtb	r0, r3
 8005962:	4603      	mov	r3, r0
 8005964:	01db      	lsls	r3, r3, #7
 8005966:	4413      	add	r3, r2
 8005968:	4a1b      	ldr	r2, [pc, #108]	; (80059d8 <ssd1306_DrawPixel+0xa4>)
 800596a:	5cd3      	ldrb	r3, [r2, r3]
 800596c:	b25a      	sxtb	r2, r3
 800596e:	79bb      	ldrb	r3, [r7, #6]
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	2101      	movs	r1, #1
 8005976:	fa01 f303 	lsl.w	r3, r1, r3
 800597a:	b25b      	sxtb	r3, r3
 800597c:	4313      	orrs	r3, r2
 800597e:	b259      	sxtb	r1, r3
 8005980:	79fa      	ldrb	r2, [r7, #7]
 8005982:	4603      	mov	r3, r0
 8005984:	01db      	lsls	r3, r3, #7
 8005986:	4413      	add	r3, r2
 8005988:	b2c9      	uxtb	r1, r1
 800598a:	4a13      	ldr	r2, [pc, #76]	; (80059d8 <ssd1306_DrawPixel+0xa4>)
 800598c:	54d1      	strb	r1, [r2, r3]
 800598e:	e01d      	b.n	80059cc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005990:	79fa      	ldrb	r2, [r7, #7]
 8005992:	79bb      	ldrb	r3, [r7, #6]
 8005994:	08db      	lsrs	r3, r3, #3
 8005996:	b2d8      	uxtb	r0, r3
 8005998:	4603      	mov	r3, r0
 800599a:	01db      	lsls	r3, r3, #7
 800599c:	4413      	add	r3, r2
 800599e:	4a0e      	ldr	r2, [pc, #56]	; (80059d8 <ssd1306_DrawPixel+0xa4>)
 80059a0:	5cd3      	ldrb	r3, [r2, r3]
 80059a2:	b25a      	sxtb	r2, r3
 80059a4:	79bb      	ldrb	r3, [r7, #6]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	2101      	movs	r1, #1
 80059ac:	fa01 f303 	lsl.w	r3, r1, r3
 80059b0:	b25b      	sxtb	r3, r3
 80059b2:	43db      	mvns	r3, r3
 80059b4:	b25b      	sxtb	r3, r3
 80059b6:	4013      	ands	r3, r2
 80059b8:	b259      	sxtb	r1, r3
 80059ba:	79fa      	ldrb	r2, [r7, #7]
 80059bc:	4603      	mov	r3, r0
 80059be:	01db      	lsls	r3, r3, #7
 80059c0:	4413      	add	r3, r2
 80059c2:	b2c9      	uxtb	r1, r1
 80059c4:	4a04      	ldr	r2, [pc, #16]	; (80059d8 <ssd1306_DrawPixel+0xa4>)
 80059c6:	54d1      	strb	r1, [r2, r3]
 80059c8:	e000      	b.n	80059cc <ssd1306_DrawPixel+0x98>
        return;
 80059ca:	bf00      	nop
    }
}
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	20000194 	.word	0x20000194

080059dc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80059dc:	b590      	push	{r4, r7, lr}
 80059de:	b089      	sub	sp, #36	; 0x24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	4604      	mov	r4, r0
 80059e4:	1d38      	adds	r0, r7, #4
 80059e6:	e880 0006 	stmia.w	r0, {r1, r2}
 80059ea:	461a      	mov	r2, r3
 80059ec:	4623      	mov	r3, r4
 80059ee:	73fb      	strb	r3, [r7, #15]
 80059f0:	4613      	mov	r3, r2
 80059f2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	2b1f      	cmp	r3, #31
 80059f8:	d902      	bls.n	8005a00 <ssd1306_WriteChar+0x24>
 80059fa:	7bfb      	ldrb	r3, [r7, #15]
 80059fc:	2b7e      	cmp	r3, #126	; 0x7e
 80059fe:	d901      	bls.n	8005a04 <ssd1306_WriteChar+0x28>
        return 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	e06d      	b.n	8005ae0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005a04:	4b38      	ldr	r3, [pc, #224]	; (8005ae8 <ssd1306_WriteChar+0x10c>)
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	793b      	ldrb	r3, [r7, #4]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	2b80      	cmp	r3, #128	; 0x80
 8005a10:	dc06      	bgt.n	8005a20 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8005a12:	4b35      	ldr	r3, [pc, #212]	; (8005ae8 <ssd1306_WriteChar+0x10c>)
 8005a14:	885b      	ldrh	r3, [r3, #2]
 8005a16:	461a      	mov	r2, r3
 8005a18:	797b      	ldrb	r3, [r7, #5]
 8005a1a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005a1c:	2b40      	cmp	r3, #64	; 0x40
 8005a1e:	dd01      	ble.n	8005a24 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8005a20:	2300      	movs	r3, #0
 8005a22:	e05d      	b.n	8005ae0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8005a24:	2300      	movs	r3, #0
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	e04c      	b.n	8005ac4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	3b20      	subs	r3, #32
 8005a30:	7979      	ldrb	r1, [r7, #5]
 8005a32:	fb01 f303 	mul.w	r3, r1, r3
 8005a36:	4619      	mov	r1, r3
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	440b      	add	r3, r1
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	4413      	add	r3, r2
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8005a44:	2300      	movs	r3, #0
 8005a46:	61bb      	str	r3, [r7, #24]
 8005a48:	e034      	b.n	8005ab4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d012      	beq.n	8005a80 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005a5a:	4b23      	ldr	r3, [pc, #140]	; (8005ae8 <ssd1306_WriteChar+0x10c>)
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	4413      	add	r3, r2
 8005a66:	b2d8      	uxtb	r0, r3
 8005a68:	4b1f      	ldr	r3, [pc, #124]	; (8005ae8 <ssd1306_WriteChar+0x10c>)
 8005a6a:	885b      	ldrh	r3, [r3, #2]
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	4413      	add	r3, r2
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	7bba      	ldrb	r2, [r7, #14]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	f7ff ff5b 	bl	8005934 <ssd1306_DrawPixel>
 8005a7e:	e016      	b.n	8005aae <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005a80:	4b19      	ldr	r3, [pc, #100]	; (8005ae8 <ssd1306_WriteChar+0x10c>)
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	4413      	add	r3, r2
 8005a8c:	b2d8      	uxtb	r0, r3
 8005a8e:	4b16      	ldr	r3, [pc, #88]	; (8005ae8 <ssd1306_WriteChar+0x10c>)
 8005a90:	885b      	ldrh	r3, [r3, #2]
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	4413      	add	r3, r2
 8005a9a:	b2d9      	uxtb	r1, r3
 8005a9c:	7bbb      	ldrb	r3, [r7, #14]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	bf0c      	ite	eq
 8005aa2:	2301      	moveq	r3, #1
 8005aa4:	2300      	movne	r3, #0
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	f7ff ff43 	bl	8005934 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	61bb      	str	r3, [r7, #24]
 8005ab4:	793b      	ldrb	r3, [r7, #4]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d3c5      	bcc.n	8005a4a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	61fb      	str	r3, [r7, #28]
 8005ac4:	797b      	ldrb	r3, [r7, #5]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d3ad      	bcc.n	8005a2a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005ace:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <ssd1306_WriteChar+0x10c>)
 8005ad0:	881a      	ldrh	r2, [r3, #0]
 8005ad2:	793b      	ldrb	r3, [r7, #4]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	4b03      	ldr	r3, [pc, #12]	; (8005ae8 <ssd1306_WriteChar+0x10c>)
 8005adc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3724      	adds	r7, #36	; 0x24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd90      	pop	{r4, r7, pc}
 8005ae8:	20000594 	.word	0x20000594

08005aec <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	1d38      	adds	r0, r7, #4
 8005af6:	e880 0006 	stmia.w	r0, {r1, r2}
 8005afa:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8005afc:	e012      	b.n	8005b24 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	7818      	ldrb	r0, [r3, #0]
 8005b02:	78fb      	ldrb	r3, [r7, #3]
 8005b04:	1d3a      	adds	r2, r7, #4
 8005b06:	ca06      	ldmia	r2, {r1, r2}
 8005b08:	f7ff ff68 	bl	80059dc <ssd1306_WriteChar>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	461a      	mov	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d002      	beq.n	8005b1e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	e008      	b.n	8005b30 <ssd1306_WriteString+0x44>
        }
        str++;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3301      	adds	r3, #1
 8005b22:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e8      	bne.n	8005afe <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	460a      	mov	r2, r1
 8005b42:	71fb      	strb	r3, [r7, #7]
 8005b44:	4613      	mov	r3, r2
 8005b46:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005b48:	79fb      	ldrb	r3, [r7, #7]
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <ssd1306_SetCursor+0x2c>)
 8005b4e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005b50:	79bb      	ldrb	r3, [r7, #6]
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	4b03      	ldr	r3, [pc, #12]	; (8005b64 <ssd1306_SetCursor+0x2c>)
 8005b56:	805a      	strh	r2, [r3, #2]
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	20000594 	.word	0x20000594

08005b68 <std>:
 8005b68:	2300      	movs	r3, #0
 8005b6a:	b510      	push	{r4, lr}
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b76:	6083      	str	r3, [r0, #8]
 8005b78:	8181      	strh	r1, [r0, #12]
 8005b7a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b7c:	81c2      	strh	r2, [r0, #14]
 8005b7e:	6183      	str	r3, [r0, #24]
 8005b80:	4619      	mov	r1, r3
 8005b82:	2208      	movs	r2, #8
 8005b84:	305c      	adds	r0, #92	; 0x5c
 8005b86:	f000 f9e5 	bl	8005f54 <memset>
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <std+0x38>)
 8005b8c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b8e:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <std+0x3c>)
 8005b90:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b92:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <std+0x40>)
 8005b94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b96:	4b05      	ldr	r3, [pc, #20]	; (8005bac <std+0x44>)
 8005b98:	6224      	str	r4, [r4, #32]
 8005b9a:	6323      	str	r3, [r4, #48]	; 0x30
 8005b9c:	bd10      	pop	{r4, pc}
 8005b9e:	bf00      	nop
 8005ba0:	08005da5 	.word	0x08005da5
 8005ba4:	08005dc7 	.word	0x08005dc7
 8005ba8:	08005dff 	.word	0x08005dff
 8005bac:	08005e23 	.word	0x08005e23

08005bb0 <stdio_exit_handler>:
 8005bb0:	4a02      	ldr	r2, [pc, #8]	; (8005bbc <stdio_exit_handler+0xc>)
 8005bb2:	4903      	ldr	r1, [pc, #12]	; (8005bc0 <stdio_exit_handler+0x10>)
 8005bb4:	4803      	ldr	r0, [pc, #12]	; (8005bc4 <stdio_exit_handler+0x14>)
 8005bb6:	f000 b869 	b.w	8005c8c <_fwalk_sglue>
 8005bba:	bf00      	nop
 8005bbc:	20000014 	.word	0x20000014
 8005bc0:	08006969 	.word	0x08006969
 8005bc4:	20000020 	.word	0x20000020

08005bc8 <cleanup_stdio>:
 8005bc8:	6841      	ldr	r1, [r0, #4]
 8005bca:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <cleanup_stdio+0x34>)
 8005bcc:	4299      	cmp	r1, r3
 8005bce:	b510      	push	{r4, lr}
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	d001      	beq.n	8005bd8 <cleanup_stdio+0x10>
 8005bd4:	f000 fec8 	bl	8006968 <_fflush_r>
 8005bd8:	68a1      	ldr	r1, [r4, #8]
 8005bda:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <cleanup_stdio+0x38>)
 8005bdc:	4299      	cmp	r1, r3
 8005bde:	d002      	beq.n	8005be6 <cleanup_stdio+0x1e>
 8005be0:	4620      	mov	r0, r4
 8005be2:	f000 fec1 	bl	8006968 <_fflush_r>
 8005be6:	68e1      	ldr	r1, [r4, #12]
 8005be8:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <cleanup_stdio+0x3c>)
 8005bea:	4299      	cmp	r1, r3
 8005bec:	d004      	beq.n	8005bf8 <cleanup_stdio+0x30>
 8005bee:	4620      	mov	r0, r4
 8005bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf4:	f000 beb8 	b.w	8006968 <_fflush_r>
 8005bf8:	bd10      	pop	{r4, pc}
 8005bfa:	bf00      	nop
 8005bfc:	2000059c 	.word	0x2000059c
 8005c00:	20000604 	.word	0x20000604
 8005c04:	2000066c 	.word	0x2000066c

08005c08 <global_stdio_init.part.0>:
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <global_stdio_init.part.0+0x30>)
 8005c0c:	4c0b      	ldr	r4, [pc, #44]	; (8005c3c <global_stdio_init.part.0+0x34>)
 8005c0e:	4a0c      	ldr	r2, [pc, #48]	; (8005c40 <global_stdio_init.part.0+0x38>)
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	4620      	mov	r0, r4
 8005c14:	2200      	movs	r2, #0
 8005c16:	2104      	movs	r1, #4
 8005c18:	f7ff ffa6 	bl	8005b68 <std>
 8005c1c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c20:	2201      	movs	r2, #1
 8005c22:	2109      	movs	r1, #9
 8005c24:	f7ff ffa0 	bl	8005b68 <std>
 8005c28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c32:	2112      	movs	r1, #18
 8005c34:	f7ff bf98 	b.w	8005b68 <std>
 8005c38:	200006d4 	.word	0x200006d4
 8005c3c:	2000059c 	.word	0x2000059c
 8005c40:	08005bb1 	.word	0x08005bb1

08005c44 <__sfp_lock_acquire>:
 8005c44:	4801      	ldr	r0, [pc, #4]	; (8005c4c <__sfp_lock_acquire+0x8>)
 8005c46:	f000 b9fd 	b.w	8006044 <__retarget_lock_acquire_recursive>
 8005c4a:	bf00      	nop
 8005c4c:	200006dd 	.word	0x200006dd

08005c50 <__sfp_lock_release>:
 8005c50:	4801      	ldr	r0, [pc, #4]	; (8005c58 <__sfp_lock_release+0x8>)
 8005c52:	f000 b9f8 	b.w	8006046 <__retarget_lock_release_recursive>
 8005c56:	bf00      	nop
 8005c58:	200006dd 	.word	0x200006dd

08005c5c <__sinit>:
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	4604      	mov	r4, r0
 8005c60:	f7ff fff0 	bl	8005c44 <__sfp_lock_acquire>
 8005c64:	6a23      	ldr	r3, [r4, #32]
 8005c66:	b11b      	cbz	r3, 8005c70 <__sinit+0x14>
 8005c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c6c:	f7ff bff0 	b.w	8005c50 <__sfp_lock_release>
 8005c70:	4b04      	ldr	r3, [pc, #16]	; (8005c84 <__sinit+0x28>)
 8005c72:	6223      	str	r3, [r4, #32]
 8005c74:	4b04      	ldr	r3, [pc, #16]	; (8005c88 <__sinit+0x2c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1f5      	bne.n	8005c68 <__sinit+0xc>
 8005c7c:	f7ff ffc4 	bl	8005c08 <global_stdio_init.part.0>
 8005c80:	e7f2      	b.n	8005c68 <__sinit+0xc>
 8005c82:	bf00      	nop
 8005c84:	08005bc9 	.word	0x08005bc9
 8005c88:	200006d4 	.word	0x200006d4

08005c8c <_fwalk_sglue>:
 8005c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c90:	4607      	mov	r7, r0
 8005c92:	4688      	mov	r8, r1
 8005c94:	4614      	mov	r4, r2
 8005c96:	2600      	movs	r6, #0
 8005c98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c9c:	f1b9 0901 	subs.w	r9, r9, #1
 8005ca0:	d505      	bpl.n	8005cae <_fwalk_sglue+0x22>
 8005ca2:	6824      	ldr	r4, [r4, #0]
 8005ca4:	2c00      	cmp	r4, #0
 8005ca6:	d1f7      	bne.n	8005c98 <_fwalk_sglue+0xc>
 8005ca8:	4630      	mov	r0, r6
 8005caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cae:	89ab      	ldrh	r3, [r5, #12]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d907      	bls.n	8005cc4 <_fwalk_sglue+0x38>
 8005cb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	d003      	beq.n	8005cc4 <_fwalk_sglue+0x38>
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	47c0      	blx	r8
 8005cc2:	4306      	orrs	r6, r0
 8005cc4:	3568      	adds	r5, #104	; 0x68
 8005cc6:	e7e9      	b.n	8005c9c <_fwalk_sglue+0x10>

08005cc8 <_puts_r>:
 8005cc8:	6a03      	ldr	r3, [r0, #32]
 8005cca:	b570      	push	{r4, r5, r6, lr}
 8005ccc:	6884      	ldr	r4, [r0, #8]
 8005cce:	4605      	mov	r5, r0
 8005cd0:	460e      	mov	r6, r1
 8005cd2:	b90b      	cbnz	r3, 8005cd8 <_puts_r+0x10>
 8005cd4:	f7ff ffc2 	bl	8005c5c <__sinit>
 8005cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cda:	07db      	lsls	r3, r3, #31
 8005cdc:	d405      	bmi.n	8005cea <_puts_r+0x22>
 8005cde:	89a3      	ldrh	r3, [r4, #12]
 8005ce0:	0598      	lsls	r0, r3, #22
 8005ce2:	d402      	bmi.n	8005cea <_puts_r+0x22>
 8005ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ce6:	f000 f9ad 	bl	8006044 <__retarget_lock_acquire_recursive>
 8005cea:	89a3      	ldrh	r3, [r4, #12]
 8005cec:	0719      	lsls	r1, r3, #28
 8005cee:	d513      	bpl.n	8005d18 <_puts_r+0x50>
 8005cf0:	6923      	ldr	r3, [r4, #16]
 8005cf2:	b18b      	cbz	r3, 8005d18 <_puts_r+0x50>
 8005cf4:	3e01      	subs	r6, #1
 8005cf6:	68a3      	ldr	r3, [r4, #8]
 8005cf8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	60a3      	str	r3, [r4, #8]
 8005d00:	b9e9      	cbnz	r1, 8005d3e <_puts_r+0x76>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	da2e      	bge.n	8005d64 <_puts_r+0x9c>
 8005d06:	4622      	mov	r2, r4
 8005d08:	210a      	movs	r1, #10
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	f000 f88d 	bl	8005e2a <__swbuf_r>
 8005d10:	3001      	adds	r0, #1
 8005d12:	d007      	beq.n	8005d24 <_puts_r+0x5c>
 8005d14:	250a      	movs	r5, #10
 8005d16:	e007      	b.n	8005d28 <_puts_r+0x60>
 8005d18:	4621      	mov	r1, r4
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f000 f8c2 	bl	8005ea4 <__swsetup_r>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d0e7      	beq.n	8005cf4 <_puts_r+0x2c>
 8005d24:	f04f 35ff 	mov.w	r5, #4294967295
 8005d28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d2a:	07da      	lsls	r2, r3, #31
 8005d2c:	d405      	bmi.n	8005d3a <_puts_r+0x72>
 8005d2e:	89a3      	ldrh	r3, [r4, #12]
 8005d30:	059b      	lsls	r3, r3, #22
 8005d32:	d402      	bmi.n	8005d3a <_puts_r+0x72>
 8005d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d36:	f000 f986 	bl	8006046 <__retarget_lock_release_recursive>
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	bd70      	pop	{r4, r5, r6, pc}
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	da04      	bge.n	8005d4c <_puts_r+0x84>
 8005d42:	69a2      	ldr	r2, [r4, #24]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	dc06      	bgt.n	8005d56 <_puts_r+0x8e>
 8005d48:	290a      	cmp	r1, #10
 8005d4a:	d004      	beq.n	8005d56 <_puts_r+0x8e>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	6022      	str	r2, [r4, #0]
 8005d52:	7019      	strb	r1, [r3, #0]
 8005d54:	e7cf      	b.n	8005cf6 <_puts_r+0x2e>
 8005d56:	4622      	mov	r2, r4
 8005d58:	4628      	mov	r0, r5
 8005d5a:	f000 f866 	bl	8005e2a <__swbuf_r>
 8005d5e:	3001      	adds	r0, #1
 8005d60:	d1c9      	bne.n	8005cf6 <_puts_r+0x2e>
 8005d62:	e7df      	b.n	8005d24 <_puts_r+0x5c>
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	250a      	movs	r5, #10
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	6022      	str	r2, [r4, #0]
 8005d6c:	701d      	strb	r5, [r3, #0]
 8005d6e:	e7db      	b.n	8005d28 <_puts_r+0x60>

08005d70 <puts>:
 8005d70:	4b02      	ldr	r3, [pc, #8]	; (8005d7c <puts+0xc>)
 8005d72:	4601      	mov	r1, r0
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	f7ff bfa7 	b.w	8005cc8 <_puts_r>
 8005d7a:	bf00      	nop
 8005d7c:	2000006c 	.word	0x2000006c

08005d80 <iscanf>:
 8005d80:	b40f      	push	{r0, r1, r2, r3}
 8005d82:	b507      	push	{r0, r1, r2, lr}
 8005d84:	4906      	ldr	r1, [pc, #24]	; (8005da0 <iscanf+0x20>)
 8005d86:	ab04      	add	r3, sp, #16
 8005d88:	6808      	ldr	r0, [r1, #0]
 8005d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d8e:	6841      	ldr	r1, [r0, #4]
 8005d90:	9301      	str	r3, [sp, #4]
 8005d92:	f000 fc01 	bl	8006598 <_vfiscanf_r>
 8005d96:	b003      	add	sp, #12
 8005d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d9c:	b004      	add	sp, #16
 8005d9e:	4770      	bx	lr
 8005da0:	2000006c 	.word	0x2000006c

08005da4 <__sread>:
 8005da4:	b510      	push	{r4, lr}
 8005da6:	460c      	mov	r4, r1
 8005da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dac:	f000 f8fc 	bl	8005fa8 <_read_r>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	bfab      	itete	ge
 8005db4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005db6:	89a3      	ldrhlt	r3, [r4, #12]
 8005db8:	181b      	addge	r3, r3, r0
 8005dba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dbe:	bfac      	ite	ge
 8005dc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005dc2:	81a3      	strhlt	r3, [r4, #12]
 8005dc4:	bd10      	pop	{r4, pc}

08005dc6 <__swrite>:
 8005dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dca:	461f      	mov	r7, r3
 8005dcc:	898b      	ldrh	r3, [r1, #12]
 8005dce:	05db      	lsls	r3, r3, #23
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	4616      	mov	r6, r2
 8005dd6:	d505      	bpl.n	8005de4 <__swrite+0x1e>
 8005dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ddc:	2302      	movs	r3, #2
 8005dde:	2200      	movs	r2, #0
 8005de0:	f000 f8d0 	bl	8005f84 <_lseek_r>
 8005de4:	89a3      	ldrh	r3, [r4, #12]
 8005de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dee:	81a3      	strh	r3, [r4, #12]
 8005df0:	4632      	mov	r2, r6
 8005df2:	463b      	mov	r3, r7
 8005df4:	4628      	mov	r0, r5
 8005df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfa:	f000 b8e7 	b.w	8005fcc <_write_r>

08005dfe <__sseek>:
 8005dfe:	b510      	push	{r4, lr}
 8005e00:	460c      	mov	r4, r1
 8005e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e06:	f000 f8bd 	bl	8005f84 <_lseek_r>
 8005e0a:	1c43      	adds	r3, r0, #1
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	bf15      	itete	ne
 8005e10:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e1a:	81a3      	strheq	r3, [r4, #12]
 8005e1c:	bf18      	it	ne
 8005e1e:	81a3      	strhne	r3, [r4, #12]
 8005e20:	bd10      	pop	{r4, pc}

08005e22 <__sclose>:
 8005e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e26:	f000 b89d 	b.w	8005f64 <_close_r>

08005e2a <__swbuf_r>:
 8005e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2c:	460e      	mov	r6, r1
 8005e2e:	4614      	mov	r4, r2
 8005e30:	4605      	mov	r5, r0
 8005e32:	b118      	cbz	r0, 8005e3c <__swbuf_r+0x12>
 8005e34:	6a03      	ldr	r3, [r0, #32]
 8005e36:	b90b      	cbnz	r3, 8005e3c <__swbuf_r+0x12>
 8005e38:	f7ff ff10 	bl	8005c5c <__sinit>
 8005e3c:	69a3      	ldr	r3, [r4, #24]
 8005e3e:	60a3      	str	r3, [r4, #8]
 8005e40:	89a3      	ldrh	r3, [r4, #12]
 8005e42:	071a      	lsls	r2, r3, #28
 8005e44:	d525      	bpl.n	8005e92 <__swbuf_r+0x68>
 8005e46:	6923      	ldr	r3, [r4, #16]
 8005e48:	b31b      	cbz	r3, 8005e92 <__swbuf_r+0x68>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	6922      	ldr	r2, [r4, #16]
 8005e4e:	1a98      	subs	r0, r3, r2
 8005e50:	6963      	ldr	r3, [r4, #20]
 8005e52:	b2f6      	uxtb	r6, r6
 8005e54:	4283      	cmp	r3, r0
 8005e56:	4637      	mov	r7, r6
 8005e58:	dc04      	bgt.n	8005e64 <__swbuf_r+0x3a>
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f000 fd83 	bl	8006968 <_fflush_r>
 8005e62:	b9e0      	cbnz	r0, 8005e9e <__swbuf_r+0x74>
 8005e64:	68a3      	ldr	r3, [r4, #8]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	60a3      	str	r3, [r4, #8]
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	6022      	str	r2, [r4, #0]
 8005e70:	701e      	strb	r6, [r3, #0]
 8005e72:	6962      	ldr	r2, [r4, #20]
 8005e74:	1c43      	adds	r3, r0, #1
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d004      	beq.n	8005e84 <__swbuf_r+0x5a>
 8005e7a:	89a3      	ldrh	r3, [r4, #12]
 8005e7c:	07db      	lsls	r3, r3, #31
 8005e7e:	d506      	bpl.n	8005e8e <__swbuf_r+0x64>
 8005e80:	2e0a      	cmp	r6, #10
 8005e82:	d104      	bne.n	8005e8e <__swbuf_r+0x64>
 8005e84:	4621      	mov	r1, r4
 8005e86:	4628      	mov	r0, r5
 8005e88:	f000 fd6e 	bl	8006968 <_fflush_r>
 8005e8c:	b938      	cbnz	r0, 8005e9e <__swbuf_r+0x74>
 8005e8e:	4638      	mov	r0, r7
 8005e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e92:	4621      	mov	r1, r4
 8005e94:	4628      	mov	r0, r5
 8005e96:	f000 f805 	bl	8005ea4 <__swsetup_r>
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	d0d5      	beq.n	8005e4a <__swbuf_r+0x20>
 8005e9e:	f04f 37ff 	mov.w	r7, #4294967295
 8005ea2:	e7f4      	b.n	8005e8e <__swbuf_r+0x64>

08005ea4 <__swsetup_r>:
 8005ea4:	b538      	push	{r3, r4, r5, lr}
 8005ea6:	4b2a      	ldr	r3, [pc, #168]	; (8005f50 <__swsetup_r+0xac>)
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	460c      	mov	r4, r1
 8005eae:	b118      	cbz	r0, 8005eb8 <__swsetup_r+0x14>
 8005eb0:	6a03      	ldr	r3, [r0, #32]
 8005eb2:	b90b      	cbnz	r3, 8005eb8 <__swsetup_r+0x14>
 8005eb4:	f7ff fed2 	bl	8005c5c <__sinit>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ebe:	0718      	lsls	r0, r3, #28
 8005ec0:	d422      	bmi.n	8005f08 <__swsetup_r+0x64>
 8005ec2:	06d9      	lsls	r1, r3, #27
 8005ec4:	d407      	bmi.n	8005ed6 <__swsetup_r+0x32>
 8005ec6:	2309      	movs	r3, #9
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ece:	81a3      	strh	r3, [r4, #12]
 8005ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed4:	e034      	b.n	8005f40 <__swsetup_r+0x9c>
 8005ed6:	0758      	lsls	r0, r3, #29
 8005ed8:	d512      	bpl.n	8005f00 <__swsetup_r+0x5c>
 8005eda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005edc:	b141      	cbz	r1, 8005ef0 <__swsetup_r+0x4c>
 8005ede:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ee2:	4299      	cmp	r1, r3
 8005ee4:	d002      	beq.n	8005eec <__swsetup_r+0x48>
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f000 f8bc 	bl	8006064 <_free_r>
 8005eec:	2300      	movs	r3, #0
 8005eee:	6363      	str	r3, [r4, #52]	; 0x34
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ef6:	81a3      	strh	r3, [r4, #12]
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6063      	str	r3, [r4, #4]
 8005efc:	6923      	ldr	r3, [r4, #16]
 8005efe:	6023      	str	r3, [r4, #0]
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	f043 0308 	orr.w	r3, r3, #8
 8005f06:	81a3      	strh	r3, [r4, #12]
 8005f08:	6923      	ldr	r3, [r4, #16]
 8005f0a:	b94b      	cbnz	r3, 8005f20 <__swsetup_r+0x7c>
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f16:	d003      	beq.n	8005f20 <__swsetup_r+0x7c>
 8005f18:	4621      	mov	r1, r4
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	f000 fd72 	bl	8006a04 <__smakebuf_r>
 8005f20:	89a0      	ldrh	r0, [r4, #12]
 8005f22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f26:	f010 0301 	ands.w	r3, r0, #1
 8005f2a:	d00a      	beq.n	8005f42 <__swsetup_r+0x9e>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60a3      	str	r3, [r4, #8]
 8005f30:	6963      	ldr	r3, [r4, #20]
 8005f32:	425b      	negs	r3, r3
 8005f34:	61a3      	str	r3, [r4, #24]
 8005f36:	6923      	ldr	r3, [r4, #16]
 8005f38:	b943      	cbnz	r3, 8005f4c <__swsetup_r+0xa8>
 8005f3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f3e:	d1c4      	bne.n	8005eca <__swsetup_r+0x26>
 8005f40:	bd38      	pop	{r3, r4, r5, pc}
 8005f42:	0781      	lsls	r1, r0, #30
 8005f44:	bf58      	it	pl
 8005f46:	6963      	ldrpl	r3, [r4, #20]
 8005f48:	60a3      	str	r3, [r4, #8]
 8005f4a:	e7f4      	b.n	8005f36 <__swsetup_r+0x92>
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	e7f7      	b.n	8005f40 <__swsetup_r+0x9c>
 8005f50:	2000006c 	.word	0x2000006c

08005f54 <memset>:
 8005f54:	4402      	add	r2, r0
 8005f56:	4603      	mov	r3, r0
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d100      	bne.n	8005f5e <memset+0xa>
 8005f5c:	4770      	bx	lr
 8005f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f62:	e7f9      	b.n	8005f58 <memset+0x4>

08005f64 <_close_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	4d06      	ldr	r5, [pc, #24]	; (8005f80 <_close_r+0x1c>)
 8005f68:	2300      	movs	r3, #0
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	4608      	mov	r0, r1
 8005f6e:	602b      	str	r3, [r5, #0]
 8005f70:	f7fa fe29 	bl	8000bc6 <_close>
 8005f74:	1c43      	adds	r3, r0, #1
 8005f76:	d102      	bne.n	8005f7e <_close_r+0x1a>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	b103      	cbz	r3, 8005f7e <_close_r+0x1a>
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	bd38      	pop	{r3, r4, r5, pc}
 8005f80:	200006d8 	.word	0x200006d8

08005f84 <_lseek_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	4d07      	ldr	r5, [pc, #28]	; (8005fa4 <_lseek_r+0x20>)
 8005f88:	4604      	mov	r4, r0
 8005f8a:	4608      	mov	r0, r1
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	2200      	movs	r2, #0
 8005f90:	602a      	str	r2, [r5, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	f7fa fe3e 	bl	8000c14 <_lseek>
 8005f98:	1c43      	adds	r3, r0, #1
 8005f9a:	d102      	bne.n	8005fa2 <_lseek_r+0x1e>
 8005f9c:	682b      	ldr	r3, [r5, #0]
 8005f9e:	b103      	cbz	r3, 8005fa2 <_lseek_r+0x1e>
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	bd38      	pop	{r3, r4, r5, pc}
 8005fa4:	200006d8 	.word	0x200006d8

08005fa8 <_read_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4d07      	ldr	r5, [pc, #28]	; (8005fc8 <_read_r+0x20>)
 8005fac:	4604      	mov	r4, r0
 8005fae:	4608      	mov	r0, r1
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	602a      	str	r2, [r5, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f7fa fde8 	bl	8000b8c <_read>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_read_r+0x1e>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_read_r+0x1e>
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	200006d8 	.word	0x200006d8

08005fcc <_write_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d07      	ldr	r5, [pc, #28]	; (8005fec <_write_r+0x20>)
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	4608      	mov	r0, r1
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	602a      	str	r2, [r5, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f7fa fac6 	bl	800056c <_write>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d102      	bne.n	8005fea <_write_r+0x1e>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	b103      	cbz	r3, 8005fea <_write_r+0x1e>
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	200006d8 	.word	0x200006d8

08005ff0 <__errno>:
 8005ff0:	4b01      	ldr	r3, [pc, #4]	; (8005ff8 <__errno+0x8>)
 8005ff2:	6818      	ldr	r0, [r3, #0]
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	2000006c 	.word	0x2000006c

08005ffc <__libc_init_array>:
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	4d0d      	ldr	r5, [pc, #52]	; (8006034 <__libc_init_array+0x38>)
 8006000:	4c0d      	ldr	r4, [pc, #52]	; (8006038 <__libc_init_array+0x3c>)
 8006002:	1b64      	subs	r4, r4, r5
 8006004:	10a4      	asrs	r4, r4, #2
 8006006:	2600      	movs	r6, #0
 8006008:	42a6      	cmp	r6, r4
 800600a:	d109      	bne.n	8006020 <__libc_init_array+0x24>
 800600c:	4d0b      	ldr	r5, [pc, #44]	; (800603c <__libc_init_array+0x40>)
 800600e:	4c0c      	ldr	r4, [pc, #48]	; (8006040 <__libc_init_array+0x44>)
 8006010:	f001 f814 	bl	800703c <_init>
 8006014:	1b64      	subs	r4, r4, r5
 8006016:	10a4      	asrs	r4, r4, #2
 8006018:	2600      	movs	r6, #0
 800601a:	42a6      	cmp	r6, r4
 800601c:	d105      	bne.n	800602a <__libc_init_array+0x2e>
 800601e:	bd70      	pop	{r4, r5, r6, pc}
 8006020:	f855 3b04 	ldr.w	r3, [r5], #4
 8006024:	4798      	blx	r3
 8006026:	3601      	adds	r6, #1
 8006028:	e7ee      	b.n	8006008 <__libc_init_array+0xc>
 800602a:	f855 3b04 	ldr.w	r3, [r5], #4
 800602e:	4798      	blx	r3
 8006030:	3601      	adds	r6, #1
 8006032:	e7f2      	b.n	800601a <__libc_init_array+0x1e>
 8006034:	08008560 	.word	0x08008560
 8006038:	08008560 	.word	0x08008560
 800603c:	08008560 	.word	0x08008560
 8006040:	08008564 	.word	0x08008564

08006044 <__retarget_lock_acquire_recursive>:
 8006044:	4770      	bx	lr

08006046 <__retarget_lock_release_recursive>:
 8006046:	4770      	bx	lr

08006048 <memcpy>:
 8006048:	440a      	add	r2, r1
 800604a:	4291      	cmp	r1, r2
 800604c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006050:	d100      	bne.n	8006054 <memcpy+0xc>
 8006052:	4770      	bx	lr
 8006054:	b510      	push	{r4, lr}
 8006056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800605a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800605e:	4291      	cmp	r1, r2
 8006060:	d1f9      	bne.n	8006056 <memcpy+0xe>
 8006062:	bd10      	pop	{r4, pc}

08006064 <_free_r>:
 8006064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006066:	2900      	cmp	r1, #0
 8006068:	d044      	beq.n	80060f4 <_free_r+0x90>
 800606a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800606e:	9001      	str	r0, [sp, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	f1a1 0404 	sub.w	r4, r1, #4
 8006076:	bfb8      	it	lt
 8006078:	18e4      	addlt	r4, r4, r3
 800607a:	f000 f8df 	bl	800623c <__malloc_lock>
 800607e:	4a1e      	ldr	r2, [pc, #120]	; (80060f8 <_free_r+0x94>)
 8006080:	9801      	ldr	r0, [sp, #4]
 8006082:	6813      	ldr	r3, [r2, #0]
 8006084:	b933      	cbnz	r3, 8006094 <_free_r+0x30>
 8006086:	6063      	str	r3, [r4, #4]
 8006088:	6014      	str	r4, [r2, #0]
 800608a:	b003      	add	sp, #12
 800608c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006090:	f000 b8da 	b.w	8006248 <__malloc_unlock>
 8006094:	42a3      	cmp	r3, r4
 8006096:	d908      	bls.n	80060aa <_free_r+0x46>
 8006098:	6825      	ldr	r5, [r4, #0]
 800609a:	1961      	adds	r1, r4, r5
 800609c:	428b      	cmp	r3, r1
 800609e:	bf01      	itttt	eq
 80060a0:	6819      	ldreq	r1, [r3, #0]
 80060a2:	685b      	ldreq	r3, [r3, #4]
 80060a4:	1949      	addeq	r1, r1, r5
 80060a6:	6021      	streq	r1, [r4, #0]
 80060a8:	e7ed      	b.n	8006086 <_free_r+0x22>
 80060aa:	461a      	mov	r2, r3
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	b10b      	cbz	r3, 80060b4 <_free_r+0x50>
 80060b0:	42a3      	cmp	r3, r4
 80060b2:	d9fa      	bls.n	80060aa <_free_r+0x46>
 80060b4:	6811      	ldr	r1, [r2, #0]
 80060b6:	1855      	adds	r5, r2, r1
 80060b8:	42a5      	cmp	r5, r4
 80060ba:	d10b      	bne.n	80060d4 <_free_r+0x70>
 80060bc:	6824      	ldr	r4, [r4, #0]
 80060be:	4421      	add	r1, r4
 80060c0:	1854      	adds	r4, r2, r1
 80060c2:	42a3      	cmp	r3, r4
 80060c4:	6011      	str	r1, [r2, #0]
 80060c6:	d1e0      	bne.n	800608a <_free_r+0x26>
 80060c8:	681c      	ldr	r4, [r3, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	6053      	str	r3, [r2, #4]
 80060ce:	440c      	add	r4, r1
 80060d0:	6014      	str	r4, [r2, #0]
 80060d2:	e7da      	b.n	800608a <_free_r+0x26>
 80060d4:	d902      	bls.n	80060dc <_free_r+0x78>
 80060d6:	230c      	movs	r3, #12
 80060d8:	6003      	str	r3, [r0, #0]
 80060da:	e7d6      	b.n	800608a <_free_r+0x26>
 80060dc:	6825      	ldr	r5, [r4, #0]
 80060de:	1961      	adds	r1, r4, r5
 80060e0:	428b      	cmp	r3, r1
 80060e2:	bf04      	itt	eq
 80060e4:	6819      	ldreq	r1, [r3, #0]
 80060e6:	685b      	ldreq	r3, [r3, #4]
 80060e8:	6063      	str	r3, [r4, #4]
 80060ea:	bf04      	itt	eq
 80060ec:	1949      	addeq	r1, r1, r5
 80060ee:	6021      	streq	r1, [r4, #0]
 80060f0:	6054      	str	r4, [r2, #4]
 80060f2:	e7ca      	b.n	800608a <_free_r+0x26>
 80060f4:	b003      	add	sp, #12
 80060f6:	bd30      	pop	{r4, r5, pc}
 80060f8:	200006e0 	.word	0x200006e0

080060fc <sbrk_aligned>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	4e0e      	ldr	r6, [pc, #56]	; (8006138 <sbrk_aligned+0x3c>)
 8006100:	460c      	mov	r4, r1
 8006102:	6831      	ldr	r1, [r6, #0]
 8006104:	4605      	mov	r5, r0
 8006106:	b911      	cbnz	r1, 800610e <sbrk_aligned+0x12>
 8006108:	f000 fe58 	bl	8006dbc <_sbrk_r>
 800610c:	6030      	str	r0, [r6, #0]
 800610e:	4621      	mov	r1, r4
 8006110:	4628      	mov	r0, r5
 8006112:	f000 fe53 	bl	8006dbc <_sbrk_r>
 8006116:	1c43      	adds	r3, r0, #1
 8006118:	d00a      	beq.n	8006130 <sbrk_aligned+0x34>
 800611a:	1cc4      	adds	r4, r0, #3
 800611c:	f024 0403 	bic.w	r4, r4, #3
 8006120:	42a0      	cmp	r0, r4
 8006122:	d007      	beq.n	8006134 <sbrk_aligned+0x38>
 8006124:	1a21      	subs	r1, r4, r0
 8006126:	4628      	mov	r0, r5
 8006128:	f000 fe48 	bl	8006dbc <_sbrk_r>
 800612c:	3001      	adds	r0, #1
 800612e:	d101      	bne.n	8006134 <sbrk_aligned+0x38>
 8006130:	f04f 34ff 	mov.w	r4, #4294967295
 8006134:	4620      	mov	r0, r4
 8006136:	bd70      	pop	{r4, r5, r6, pc}
 8006138:	200006e4 	.word	0x200006e4

0800613c <_malloc_r>:
 800613c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006140:	1ccd      	adds	r5, r1, #3
 8006142:	f025 0503 	bic.w	r5, r5, #3
 8006146:	3508      	adds	r5, #8
 8006148:	2d0c      	cmp	r5, #12
 800614a:	bf38      	it	cc
 800614c:	250c      	movcc	r5, #12
 800614e:	2d00      	cmp	r5, #0
 8006150:	4607      	mov	r7, r0
 8006152:	db01      	blt.n	8006158 <_malloc_r+0x1c>
 8006154:	42a9      	cmp	r1, r5
 8006156:	d905      	bls.n	8006164 <_malloc_r+0x28>
 8006158:	230c      	movs	r3, #12
 800615a:	603b      	str	r3, [r7, #0]
 800615c:	2600      	movs	r6, #0
 800615e:	4630      	mov	r0, r6
 8006160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006164:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006238 <_malloc_r+0xfc>
 8006168:	f000 f868 	bl	800623c <__malloc_lock>
 800616c:	f8d8 3000 	ldr.w	r3, [r8]
 8006170:	461c      	mov	r4, r3
 8006172:	bb5c      	cbnz	r4, 80061cc <_malloc_r+0x90>
 8006174:	4629      	mov	r1, r5
 8006176:	4638      	mov	r0, r7
 8006178:	f7ff ffc0 	bl	80060fc <sbrk_aligned>
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	4604      	mov	r4, r0
 8006180:	d155      	bne.n	800622e <_malloc_r+0xf2>
 8006182:	f8d8 4000 	ldr.w	r4, [r8]
 8006186:	4626      	mov	r6, r4
 8006188:	2e00      	cmp	r6, #0
 800618a:	d145      	bne.n	8006218 <_malloc_r+0xdc>
 800618c:	2c00      	cmp	r4, #0
 800618e:	d048      	beq.n	8006222 <_malloc_r+0xe6>
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	4631      	mov	r1, r6
 8006194:	4638      	mov	r0, r7
 8006196:	eb04 0903 	add.w	r9, r4, r3
 800619a:	f000 fe0f 	bl	8006dbc <_sbrk_r>
 800619e:	4581      	cmp	r9, r0
 80061a0:	d13f      	bne.n	8006222 <_malloc_r+0xe6>
 80061a2:	6821      	ldr	r1, [r4, #0]
 80061a4:	1a6d      	subs	r5, r5, r1
 80061a6:	4629      	mov	r1, r5
 80061a8:	4638      	mov	r0, r7
 80061aa:	f7ff ffa7 	bl	80060fc <sbrk_aligned>
 80061ae:	3001      	adds	r0, #1
 80061b0:	d037      	beq.n	8006222 <_malloc_r+0xe6>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	442b      	add	r3, r5
 80061b6:	6023      	str	r3, [r4, #0]
 80061b8:	f8d8 3000 	ldr.w	r3, [r8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d038      	beq.n	8006232 <_malloc_r+0xf6>
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	42a2      	cmp	r2, r4
 80061c4:	d12b      	bne.n	800621e <_malloc_r+0xe2>
 80061c6:	2200      	movs	r2, #0
 80061c8:	605a      	str	r2, [r3, #4]
 80061ca:	e00f      	b.n	80061ec <_malloc_r+0xb0>
 80061cc:	6822      	ldr	r2, [r4, #0]
 80061ce:	1b52      	subs	r2, r2, r5
 80061d0:	d41f      	bmi.n	8006212 <_malloc_r+0xd6>
 80061d2:	2a0b      	cmp	r2, #11
 80061d4:	d917      	bls.n	8006206 <_malloc_r+0xca>
 80061d6:	1961      	adds	r1, r4, r5
 80061d8:	42a3      	cmp	r3, r4
 80061da:	6025      	str	r5, [r4, #0]
 80061dc:	bf18      	it	ne
 80061de:	6059      	strne	r1, [r3, #4]
 80061e0:	6863      	ldr	r3, [r4, #4]
 80061e2:	bf08      	it	eq
 80061e4:	f8c8 1000 	streq.w	r1, [r8]
 80061e8:	5162      	str	r2, [r4, r5]
 80061ea:	604b      	str	r3, [r1, #4]
 80061ec:	4638      	mov	r0, r7
 80061ee:	f104 060b 	add.w	r6, r4, #11
 80061f2:	f000 f829 	bl	8006248 <__malloc_unlock>
 80061f6:	f026 0607 	bic.w	r6, r6, #7
 80061fa:	1d23      	adds	r3, r4, #4
 80061fc:	1af2      	subs	r2, r6, r3
 80061fe:	d0ae      	beq.n	800615e <_malloc_r+0x22>
 8006200:	1b9b      	subs	r3, r3, r6
 8006202:	50a3      	str	r3, [r4, r2]
 8006204:	e7ab      	b.n	800615e <_malloc_r+0x22>
 8006206:	42a3      	cmp	r3, r4
 8006208:	6862      	ldr	r2, [r4, #4]
 800620a:	d1dd      	bne.n	80061c8 <_malloc_r+0x8c>
 800620c:	f8c8 2000 	str.w	r2, [r8]
 8006210:	e7ec      	b.n	80061ec <_malloc_r+0xb0>
 8006212:	4623      	mov	r3, r4
 8006214:	6864      	ldr	r4, [r4, #4]
 8006216:	e7ac      	b.n	8006172 <_malloc_r+0x36>
 8006218:	4634      	mov	r4, r6
 800621a:	6876      	ldr	r6, [r6, #4]
 800621c:	e7b4      	b.n	8006188 <_malloc_r+0x4c>
 800621e:	4613      	mov	r3, r2
 8006220:	e7cc      	b.n	80061bc <_malloc_r+0x80>
 8006222:	230c      	movs	r3, #12
 8006224:	603b      	str	r3, [r7, #0]
 8006226:	4638      	mov	r0, r7
 8006228:	f000 f80e 	bl	8006248 <__malloc_unlock>
 800622c:	e797      	b.n	800615e <_malloc_r+0x22>
 800622e:	6025      	str	r5, [r4, #0]
 8006230:	e7dc      	b.n	80061ec <_malloc_r+0xb0>
 8006232:	605b      	str	r3, [r3, #4]
 8006234:	deff      	udf	#255	; 0xff
 8006236:	bf00      	nop
 8006238:	200006e0 	.word	0x200006e0

0800623c <__malloc_lock>:
 800623c:	4801      	ldr	r0, [pc, #4]	; (8006244 <__malloc_lock+0x8>)
 800623e:	f7ff bf01 	b.w	8006044 <__retarget_lock_acquire_recursive>
 8006242:	bf00      	nop
 8006244:	200006dc 	.word	0x200006dc

08006248 <__malloc_unlock>:
 8006248:	4801      	ldr	r0, [pc, #4]	; (8006250 <__malloc_unlock+0x8>)
 800624a:	f7ff befc 	b.w	8006046 <__retarget_lock_release_recursive>
 800624e:	bf00      	nop
 8006250:	200006dc 	.word	0x200006dc

08006254 <__svfiscanf_r>:
 8006254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006258:	461d      	mov	r5, r3
 800625a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800625c:	07df      	lsls	r7, r3, #31
 800625e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006262:	4606      	mov	r6, r0
 8006264:	460c      	mov	r4, r1
 8006266:	4692      	mov	sl, r2
 8006268:	d405      	bmi.n	8006276 <__svfiscanf_r+0x22>
 800626a:	898b      	ldrh	r3, [r1, #12]
 800626c:	0598      	lsls	r0, r3, #22
 800626e:	d402      	bmi.n	8006276 <__svfiscanf_r+0x22>
 8006270:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8006272:	f7ff fee7 	bl	8006044 <__retarget_lock_acquire_recursive>
 8006276:	2300      	movs	r3, #0
 8006278:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800627c:	4baa      	ldr	r3, [pc, #680]	; (8006528 <__svfiscanf_r+0x2d4>)
 800627e:	93a0      	str	r3, [sp, #640]	; 0x280
 8006280:	f10d 0804 	add.w	r8, sp, #4
 8006284:	4ba9      	ldr	r3, [pc, #676]	; (800652c <__svfiscanf_r+0x2d8>)
 8006286:	4faa      	ldr	r7, [pc, #680]	; (8006530 <__svfiscanf_r+0x2dc>)
 8006288:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8006534 <__svfiscanf_r+0x2e0>
 800628c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006290:	93a1      	str	r3, [sp, #644]	; 0x284
 8006292:	9500      	str	r5, [sp, #0]
 8006294:	f89a 3000 	ldrb.w	r3, [sl]
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8170 	beq.w	800657e <__svfiscanf_r+0x32a>
 800629e:	5cf9      	ldrb	r1, [r7, r3]
 80062a0:	f011 0108 	ands.w	r1, r1, #8
 80062a4:	f10a 0501 	add.w	r5, sl, #1
 80062a8:	d019      	beq.n	80062de <__svfiscanf_r+0x8a>
 80062aa:	6863      	ldr	r3, [r4, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	dd0f      	ble.n	80062d0 <__svfiscanf_r+0x7c>
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	781a      	ldrb	r2, [r3, #0]
 80062b4:	5cba      	ldrb	r2, [r7, r2]
 80062b6:	0711      	lsls	r1, r2, #28
 80062b8:	d401      	bmi.n	80062be <__svfiscanf_r+0x6a>
 80062ba:	46aa      	mov	sl, r5
 80062bc:	e7ea      	b.n	8006294 <__svfiscanf_r+0x40>
 80062be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80062c0:	3201      	adds	r2, #1
 80062c2:	9245      	str	r2, [sp, #276]	; 0x114
 80062c4:	6862      	ldr	r2, [r4, #4]
 80062c6:	3301      	adds	r3, #1
 80062c8:	3a01      	subs	r2, #1
 80062ca:	6062      	str	r2, [r4, #4]
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	e7ec      	b.n	80062aa <__svfiscanf_r+0x56>
 80062d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80062d2:	4621      	mov	r1, r4
 80062d4:	4630      	mov	r0, r6
 80062d6:	4798      	blx	r3
 80062d8:	2800      	cmp	r0, #0
 80062da:	d0e9      	beq.n	80062b0 <__svfiscanf_r+0x5c>
 80062dc:	e7ed      	b.n	80062ba <__svfiscanf_r+0x66>
 80062de:	2b25      	cmp	r3, #37	; 0x25
 80062e0:	d012      	beq.n	8006308 <__svfiscanf_r+0xb4>
 80062e2:	469a      	mov	sl, r3
 80062e4:	6863      	ldr	r3, [r4, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f340 8093 	ble.w	8006412 <__svfiscanf_r+0x1be>
 80062ec:	6822      	ldr	r2, [r4, #0]
 80062ee:	7813      	ldrb	r3, [r2, #0]
 80062f0:	4553      	cmp	r3, sl
 80062f2:	f040 8144 	bne.w	800657e <__svfiscanf_r+0x32a>
 80062f6:	6863      	ldr	r3, [r4, #4]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	6063      	str	r3, [r4, #4]
 80062fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80062fe:	3201      	adds	r2, #1
 8006300:	3301      	adds	r3, #1
 8006302:	6022      	str	r2, [r4, #0]
 8006304:	9345      	str	r3, [sp, #276]	; 0x114
 8006306:	e7d8      	b.n	80062ba <__svfiscanf_r+0x66>
 8006308:	9141      	str	r1, [sp, #260]	; 0x104
 800630a:	9143      	str	r1, [sp, #268]	; 0x10c
 800630c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8006310:	2b2a      	cmp	r3, #42	; 0x2a
 8006312:	bf02      	ittt	eq
 8006314:	2310      	moveq	r3, #16
 8006316:	9341      	streq	r3, [sp, #260]	; 0x104
 8006318:	f10a 0502 	addeq.w	r5, sl, #2
 800631c:	220a      	movs	r2, #10
 800631e:	46aa      	mov	sl, r5
 8006320:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006324:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006328:	2b09      	cmp	r3, #9
 800632a:	d91d      	bls.n	8006368 <__svfiscanf_r+0x114>
 800632c:	4881      	ldr	r0, [pc, #516]	; (8006534 <__svfiscanf_r+0x2e0>)
 800632e:	2203      	movs	r2, #3
 8006330:	f7f9 ff4e 	bl	80001d0 <memchr>
 8006334:	b138      	cbz	r0, 8006346 <__svfiscanf_r+0xf2>
 8006336:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006338:	eba0 0009 	sub.w	r0, r0, r9
 800633c:	2301      	movs	r3, #1
 800633e:	4083      	lsls	r3, r0
 8006340:	4313      	orrs	r3, r2
 8006342:	9341      	str	r3, [sp, #260]	; 0x104
 8006344:	4655      	mov	r5, sl
 8006346:	f815 3b01 	ldrb.w	r3, [r5], #1
 800634a:	2b78      	cmp	r3, #120	; 0x78
 800634c:	d807      	bhi.n	800635e <__svfiscanf_r+0x10a>
 800634e:	2b57      	cmp	r3, #87	; 0x57
 8006350:	d811      	bhi.n	8006376 <__svfiscanf_r+0x122>
 8006352:	2b25      	cmp	r3, #37	; 0x25
 8006354:	d0c5      	beq.n	80062e2 <__svfiscanf_r+0x8e>
 8006356:	d857      	bhi.n	8006408 <__svfiscanf_r+0x1b4>
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 80c6 	beq.w	80064ea <__svfiscanf_r+0x296>
 800635e:	2303      	movs	r3, #3
 8006360:	9347      	str	r3, [sp, #284]	; 0x11c
 8006362:	230a      	movs	r3, #10
 8006364:	9342      	str	r3, [sp, #264]	; 0x108
 8006366:	e07f      	b.n	8006468 <__svfiscanf_r+0x214>
 8006368:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800636a:	fb02 1103 	mla	r1, r2, r3, r1
 800636e:	3930      	subs	r1, #48	; 0x30
 8006370:	9143      	str	r1, [sp, #268]	; 0x10c
 8006372:	4655      	mov	r5, sl
 8006374:	e7d3      	b.n	800631e <__svfiscanf_r+0xca>
 8006376:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800637a:	2a20      	cmp	r2, #32
 800637c:	d8ef      	bhi.n	800635e <__svfiscanf_r+0x10a>
 800637e:	a101      	add	r1, pc, #4	; (adr r1, 8006384 <__svfiscanf_r+0x130>)
 8006380:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006384:	0800644b 	.word	0x0800644b
 8006388:	0800635f 	.word	0x0800635f
 800638c:	0800635f 	.word	0x0800635f
 8006390:	080064a9 	.word	0x080064a9
 8006394:	0800635f 	.word	0x0800635f
 8006398:	0800635f 	.word	0x0800635f
 800639c:	0800635f 	.word	0x0800635f
 80063a0:	0800635f 	.word	0x0800635f
 80063a4:	0800635f 	.word	0x0800635f
 80063a8:	0800635f 	.word	0x0800635f
 80063ac:	0800635f 	.word	0x0800635f
 80063b0:	080064bf 	.word	0x080064bf
 80063b4:	080064a5 	.word	0x080064a5
 80063b8:	0800640f 	.word	0x0800640f
 80063bc:	0800640f 	.word	0x0800640f
 80063c0:	0800640f 	.word	0x0800640f
 80063c4:	0800635f 	.word	0x0800635f
 80063c8:	08006461 	.word	0x08006461
 80063cc:	0800635f 	.word	0x0800635f
 80063d0:	0800635f 	.word	0x0800635f
 80063d4:	0800635f 	.word	0x0800635f
 80063d8:	0800635f 	.word	0x0800635f
 80063dc:	080064cf 	.word	0x080064cf
 80063e0:	0800649d 	.word	0x0800649d
 80063e4:	08006443 	.word	0x08006443
 80063e8:	0800635f 	.word	0x0800635f
 80063ec:	0800635f 	.word	0x0800635f
 80063f0:	080064cb 	.word	0x080064cb
 80063f4:	0800635f 	.word	0x0800635f
 80063f8:	080064a5 	.word	0x080064a5
 80063fc:	0800635f 	.word	0x0800635f
 8006400:	0800635f 	.word	0x0800635f
 8006404:	0800644b 	.word	0x0800644b
 8006408:	3b45      	subs	r3, #69	; 0x45
 800640a:	2b02      	cmp	r3, #2
 800640c:	d8a7      	bhi.n	800635e <__svfiscanf_r+0x10a>
 800640e:	2305      	movs	r3, #5
 8006410:	e029      	b.n	8006466 <__svfiscanf_r+0x212>
 8006412:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006414:	4621      	mov	r1, r4
 8006416:	4630      	mov	r0, r6
 8006418:	4798      	blx	r3
 800641a:	2800      	cmp	r0, #0
 800641c:	f43f af66 	beq.w	80062ec <__svfiscanf_r+0x98>
 8006420:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006422:	07da      	lsls	r2, r3, #31
 8006424:	f140 80a3 	bpl.w	800656e <__svfiscanf_r+0x31a>
 8006428:	9844      	ldr	r0, [sp, #272]	; 0x110
 800642a:	2800      	cmp	r0, #0
 800642c:	d066      	beq.n	80064fc <__svfiscanf_r+0x2a8>
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006434:	bf18      	it	ne
 8006436:	f04f 30ff 	movne.w	r0, #4294967295
 800643a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800643e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006442:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006444:	f042 0220 	orr.w	r2, r2, #32
 8006448:	9241      	str	r2, [sp, #260]	; 0x104
 800644a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800644c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006450:	9241      	str	r2, [sp, #260]	; 0x104
 8006452:	2210      	movs	r2, #16
 8006454:	2b6f      	cmp	r3, #111	; 0x6f
 8006456:	9242      	str	r2, [sp, #264]	; 0x108
 8006458:	bf34      	ite	cc
 800645a:	2303      	movcc	r3, #3
 800645c:	2304      	movcs	r3, #4
 800645e:	e002      	b.n	8006466 <__svfiscanf_r+0x212>
 8006460:	2300      	movs	r3, #0
 8006462:	9342      	str	r3, [sp, #264]	; 0x108
 8006464:	2303      	movs	r3, #3
 8006466:	9347      	str	r3, [sp, #284]	; 0x11c
 8006468:	6863      	ldr	r3, [r4, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	dd49      	ble.n	8006502 <__svfiscanf_r+0x2ae>
 800646e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006470:	065b      	lsls	r3, r3, #25
 8006472:	d404      	bmi.n	800647e <__svfiscanf_r+0x22a>
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	781a      	ldrb	r2, [r3, #0]
 8006478:	5cba      	ldrb	r2, [r7, r2]
 800647a:	0710      	lsls	r0, r2, #28
 800647c:	d448      	bmi.n	8006510 <__svfiscanf_r+0x2bc>
 800647e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006480:	2b02      	cmp	r3, #2
 8006482:	dc60      	bgt.n	8006546 <__svfiscanf_r+0x2f2>
 8006484:	466b      	mov	r3, sp
 8006486:	4622      	mov	r2, r4
 8006488:	a941      	add	r1, sp, #260	; 0x104
 800648a:	4630      	mov	r0, r6
 800648c:	f000 f898 	bl	80065c0 <_scanf_chars>
 8006490:	2801      	cmp	r0, #1
 8006492:	d074      	beq.n	800657e <__svfiscanf_r+0x32a>
 8006494:	2802      	cmp	r0, #2
 8006496:	f47f af10 	bne.w	80062ba <__svfiscanf_r+0x66>
 800649a:	e7c1      	b.n	8006420 <__svfiscanf_r+0x1cc>
 800649c:	2308      	movs	r3, #8
 800649e:	9342      	str	r3, [sp, #264]	; 0x108
 80064a0:	2304      	movs	r3, #4
 80064a2:	e7e0      	b.n	8006466 <__svfiscanf_r+0x212>
 80064a4:	220a      	movs	r2, #10
 80064a6:	e7d5      	b.n	8006454 <__svfiscanf_r+0x200>
 80064a8:	4629      	mov	r1, r5
 80064aa:	4640      	mov	r0, r8
 80064ac:	f000 fb6c 	bl	8006b88 <__sccl>
 80064b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80064b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064b6:	9341      	str	r3, [sp, #260]	; 0x104
 80064b8:	4605      	mov	r5, r0
 80064ba:	2301      	movs	r3, #1
 80064bc:	e7d3      	b.n	8006466 <__svfiscanf_r+0x212>
 80064be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80064c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064c4:	9341      	str	r3, [sp, #260]	; 0x104
 80064c6:	2300      	movs	r3, #0
 80064c8:	e7cd      	b.n	8006466 <__svfiscanf_r+0x212>
 80064ca:	2302      	movs	r3, #2
 80064cc:	e7cb      	b.n	8006466 <__svfiscanf_r+0x212>
 80064ce:	9841      	ldr	r0, [sp, #260]	; 0x104
 80064d0:	06c3      	lsls	r3, r0, #27
 80064d2:	f53f aef2 	bmi.w	80062ba <__svfiscanf_r+0x66>
 80064d6:	9b00      	ldr	r3, [sp, #0]
 80064d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80064da:	1d19      	adds	r1, r3, #4
 80064dc:	9100      	str	r1, [sp, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	07c0      	lsls	r0, r0, #31
 80064e2:	bf4c      	ite	mi
 80064e4:	801a      	strhmi	r2, [r3, #0]
 80064e6:	601a      	strpl	r2, [r3, #0]
 80064e8:	e6e7      	b.n	80062ba <__svfiscanf_r+0x66>
 80064ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064ec:	07d8      	lsls	r0, r3, #31
 80064ee:	d405      	bmi.n	80064fc <__svfiscanf_r+0x2a8>
 80064f0:	89a3      	ldrh	r3, [r4, #12]
 80064f2:	0599      	lsls	r1, r3, #22
 80064f4:	d402      	bmi.n	80064fc <__svfiscanf_r+0x2a8>
 80064f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064f8:	f7ff fda5 	bl	8006046 <__retarget_lock_release_recursive>
 80064fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006500:	e79b      	b.n	800643a <__svfiscanf_r+0x1e6>
 8006502:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006504:	4621      	mov	r1, r4
 8006506:	4630      	mov	r0, r6
 8006508:	4798      	blx	r3
 800650a:	2800      	cmp	r0, #0
 800650c:	d0af      	beq.n	800646e <__svfiscanf_r+0x21a>
 800650e:	e787      	b.n	8006420 <__svfiscanf_r+0x1cc>
 8006510:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006512:	3201      	adds	r2, #1
 8006514:	9245      	str	r2, [sp, #276]	; 0x114
 8006516:	6862      	ldr	r2, [r4, #4]
 8006518:	3a01      	subs	r2, #1
 800651a:	2a00      	cmp	r2, #0
 800651c:	6062      	str	r2, [r4, #4]
 800651e:	dd0b      	ble.n	8006538 <__svfiscanf_r+0x2e4>
 8006520:	3301      	adds	r3, #1
 8006522:	6023      	str	r3, [r4, #0]
 8006524:	e7a6      	b.n	8006474 <__svfiscanf_r+0x220>
 8006526:	bf00      	nop
 8006528:	08006c6f 	.word	0x08006c6f
 800652c:	08006a99 	.word	0x08006a99
 8006530:	08008458 	.word	0x08008458
 8006534:	08008438 	.word	0x08008438
 8006538:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800653a:	4621      	mov	r1, r4
 800653c:	4630      	mov	r0, r6
 800653e:	4798      	blx	r3
 8006540:	2800      	cmp	r0, #0
 8006542:	d097      	beq.n	8006474 <__svfiscanf_r+0x220>
 8006544:	e76c      	b.n	8006420 <__svfiscanf_r+0x1cc>
 8006546:	2b04      	cmp	r3, #4
 8006548:	dc06      	bgt.n	8006558 <__svfiscanf_r+0x304>
 800654a:	466b      	mov	r3, sp
 800654c:	4622      	mov	r2, r4
 800654e:	a941      	add	r1, sp, #260	; 0x104
 8006550:	4630      	mov	r0, r6
 8006552:	f000 f88f 	bl	8006674 <_scanf_i>
 8006556:	e79b      	b.n	8006490 <__svfiscanf_r+0x23c>
 8006558:	4b0e      	ldr	r3, [pc, #56]	; (8006594 <__svfiscanf_r+0x340>)
 800655a:	2b00      	cmp	r3, #0
 800655c:	f43f aead 	beq.w	80062ba <__svfiscanf_r+0x66>
 8006560:	466b      	mov	r3, sp
 8006562:	4622      	mov	r2, r4
 8006564:	a941      	add	r1, sp, #260	; 0x104
 8006566:	4630      	mov	r0, r6
 8006568:	f3af 8000 	nop.w
 800656c:	e790      	b.n	8006490 <__svfiscanf_r+0x23c>
 800656e:	89a3      	ldrh	r3, [r4, #12]
 8006570:	0599      	lsls	r1, r3, #22
 8006572:	f53f af59 	bmi.w	8006428 <__svfiscanf_r+0x1d4>
 8006576:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006578:	f7ff fd65 	bl	8006046 <__retarget_lock_release_recursive>
 800657c:	e754      	b.n	8006428 <__svfiscanf_r+0x1d4>
 800657e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006580:	07da      	lsls	r2, r3, #31
 8006582:	d405      	bmi.n	8006590 <__svfiscanf_r+0x33c>
 8006584:	89a3      	ldrh	r3, [r4, #12]
 8006586:	059b      	lsls	r3, r3, #22
 8006588:	d402      	bmi.n	8006590 <__svfiscanf_r+0x33c>
 800658a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800658c:	f7ff fd5b 	bl	8006046 <__retarget_lock_release_recursive>
 8006590:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006592:	e752      	b.n	800643a <__svfiscanf_r+0x1e6>
 8006594:	00000000 	.word	0x00000000

08006598 <_vfiscanf_r>:
 8006598:	b530      	push	{r4, r5, lr}
 800659a:	4604      	mov	r4, r0
 800659c:	b085      	sub	sp, #20
 800659e:	b148      	cbz	r0, 80065b4 <_vfiscanf_r+0x1c>
 80065a0:	6a05      	ldr	r5, [r0, #32]
 80065a2:	b93d      	cbnz	r5, 80065b4 <_vfiscanf_r+0x1c>
 80065a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065a8:	9101      	str	r1, [sp, #4]
 80065aa:	f7ff fb57 	bl	8005c5c <__sinit>
 80065ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065b2:	9901      	ldr	r1, [sp, #4]
 80065b4:	4620      	mov	r0, r4
 80065b6:	b005      	add	sp, #20
 80065b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065bc:	f7ff be4a 	b.w	8006254 <__svfiscanf_r>

080065c0 <_scanf_chars>:
 80065c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c4:	4615      	mov	r5, r2
 80065c6:	688a      	ldr	r2, [r1, #8]
 80065c8:	4680      	mov	r8, r0
 80065ca:	460c      	mov	r4, r1
 80065cc:	b932      	cbnz	r2, 80065dc <_scanf_chars+0x1c>
 80065ce:	698a      	ldr	r2, [r1, #24]
 80065d0:	2a00      	cmp	r2, #0
 80065d2:	bf0c      	ite	eq
 80065d4:	2201      	moveq	r2, #1
 80065d6:	f04f 32ff 	movne.w	r2, #4294967295
 80065da:	608a      	str	r2, [r1, #8]
 80065dc:	6822      	ldr	r2, [r4, #0]
 80065de:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006670 <_scanf_chars+0xb0>
 80065e2:	06d1      	lsls	r1, r2, #27
 80065e4:	bf5f      	itttt	pl
 80065e6:	681a      	ldrpl	r2, [r3, #0]
 80065e8:	1d11      	addpl	r1, r2, #4
 80065ea:	6019      	strpl	r1, [r3, #0]
 80065ec:	6816      	ldrpl	r6, [r2, #0]
 80065ee:	2700      	movs	r7, #0
 80065f0:	69a0      	ldr	r0, [r4, #24]
 80065f2:	b188      	cbz	r0, 8006618 <_scanf_chars+0x58>
 80065f4:	2801      	cmp	r0, #1
 80065f6:	d107      	bne.n	8006608 <_scanf_chars+0x48>
 80065f8:	682a      	ldr	r2, [r5, #0]
 80065fa:	7811      	ldrb	r1, [r2, #0]
 80065fc:	6962      	ldr	r2, [r4, #20]
 80065fe:	5c52      	ldrb	r2, [r2, r1]
 8006600:	b952      	cbnz	r2, 8006618 <_scanf_chars+0x58>
 8006602:	2f00      	cmp	r7, #0
 8006604:	d031      	beq.n	800666a <_scanf_chars+0xaa>
 8006606:	e022      	b.n	800664e <_scanf_chars+0x8e>
 8006608:	2802      	cmp	r0, #2
 800660a:	d120      	bne.n	800664e <_scanf_chars+0x8e>
 800660c:	682b      	ldr	r3, [r5, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006614:	071b      	lsls	r3, r3, #28
 8006616:	d41a      	bmi.n	800664e <_scanf_chars+0x8e>
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	06da      	lsls	r2, r3, #27
 800661c:	bf5e      	ittt	pl
 800661e:	682b      	ldrpl	r3, [r5, #0]
 8006620:	781b      	ldrbpl	r3, [r3, #0]
 8006622:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006626:	682a      	ldr	r2, [r5, #0]
 8006628:	686b      	ldr	r3, [r5, #4]
 800662a:	3201      	adds	r2, #1
 800662c:	602a      	str	r2, [r5, #0]
 800662e:	68a2      	ldr	r2, [r4, #8]
 8006630:	3b01      	subs	r3, #1
 8006632:	3a01      	subs	r2, #1
 8006634:	606b      	str	r3, [r5, #4]
 8006636:	3701      	adds	r7, #1
 8006638:	60a2      	str	r2, [r4, #8]
 800663a:	b142      	cbz	r2, 800664e <_scanf_chars+0x8e>
 800663c:	2b00      	cmp	r3, #0
 800663e:	dcd7      	bgt.n	80065f0 <_scanf_chars+0x30>
 8006640:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006644:	4629      	mov	r1, r5
 8006646:	4640      	mov	r0, r8
 8006648:	4798      	blx	r3
 800664a:	2800      	cmp	r0, #0
 800664c:	d0d0      	beq.n	80065f0 <_scanf_chars+0x30>
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	f013 0310 	ands.w	r3, r3, #16
 8006654:	d105      	bne.n	8006662 <_scanf_chars+0xa2>
 8006656:	68e2      	ldr	r2, [r4, #12]
 8006658:	3201      	adds	r2, #1
 800665a:	60e2      	str	r2, [r4, #12]
 800665c:	69a2      	ldr	r2, [r4, #24]
 800665e:	b102      	cbz	r2, 8006662 <_scanf_chars+0xa2>
 8006660:	7033      	strb	r3, [r6, #0]
 8006662:	6923      	ldr	r3, [r4, #16]
 8006664:	443b      	add	r3, r7
 8006666:	6123      	str	r3, [r4, #16]
 8006668:	2000      	movs	r0, #0
 800666a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800666e:	bf00      	nop
 8006670:	08008458 	.word	0x08008458

08006674 <_scanf_i>:
 8006674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006678:	4698      	mov	r8, r3
 800667a:	4b74      	ldr	r3, [pc, #464]	; (800684c <_scanf_i+0x1d8>)
 800667c:	460c      	mov	r4, r1
 800667e:	4682      	mov	sl, r0
 8006680:	4616      	mov	r6, r2
 8006682:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006686:	b087      	sub	sp, #28
 8006688:	ab03      	add	r3, sp, #12
 800668a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800668e:	4b70      	ldr	r3, [pc, #448]	; (8006850 <_scanf_i+0x1dc>)
 8006690:	69a1      	ldr	r1, [r4, #24]
 8006692:	4a70      	ldr	r2, [pc, #448]	; (8006854 <_scanf_i+0x1e0>)
 8006694:	2903      	cmp	r1, #3
 8006696:	bf18      	it	ne
 8006698:	461a      	movne	r2, r3
 800669a:	68a3      	ldr	r3, [r4, #8]
 800669c:	9201      	str	r2, [sp, #4]
 800669e:	1e5a      	subs	r2, r3, #1
 80066a0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80066a4:	bf88      	it	hi
 80066a6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80066aa:	4627      	mov	r7, r4
 80066ac:	bf82      	ittt	hi
 80066ae:	eb03 0905 	addhi.w	r9, r3, r5
 80066b2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80066b6:	60a3      	strhi	r3, [r4, #8]
 80066b8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80066bc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80066c0:	bf98      	it	ls
 80066c2:	f04f 0900 	movls.w	r9, #0
 80066c6:	6023      	str	r3, [r4, #0]
 80066c8:	463d      	mov	r5, r7
 80066ca:	f04f 0b00 	mov.w	fp, #0
 80066ce:	6831      	ldr	r1, [r6, #0]
 80066d0:	ab03      	add	r3, sp, #12
 80066d2:	7809      	ldrb	r1, [r1, #0]
 80066d4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80066d8:	2202      	movs	r2, #2
 80066da:	f7f9 fd79 	bl	80001d0 <memchr>
 80066de:	b328      	cbz	r0, 800672c <_scanf_i+0xb8>
 80066e0:	f1bb 0f01 	cmp.w	fp, #1
 80066e4:	d159      	bne.n	800679a <_scanf_i+0x126>
 80066e6:	6862      	ldr	r2, [r4, #4]
 80066e8:	b92a      	cbnz	r2, 80066f6 <_scanf_i+0x82>
 80066ea:	6822      	ldr	r2, [r4, #0]
 80066ec:	2308      	movs	r3, #8
 80066ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066f2:	6063      	str	r3, [r4, #4]
 80066f4:	6022      	str	r2, [r4, #0]
 80066f6:	6822      	ldr	r2, [r4, #0]
 80066f8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80066fc:	6022      	str	r2, [r4, #0]
 80066fe:	68a2      	ldr	r2, [r4, #8]
 8006700:	1e51      	subs	r1, r2, #1
 8006702:	60a1      	str	r1, [r4, #8]
 8006704:	b192      	cbz	r2, 800672c <_scanf_i+0xb8>
 8006706:	6832      	ldr	r2, [r6, #0]
 8006708:	1c51      	adds	r1, r2, #1
 800670a:	6031      	str	r1, [r6, #0]
 800670c:	7812      	ldrb	r2, [r2, #0]
 800670e:	f805 2b01 	strb.w	r2, [r5], #1
 8006712:	6872      	ldr	r2, [r6, #4]
 8006714:	3a01      	subs	r2, #1
 8006716:	2a00      	cmp	r2, #0
 8006718:	6072      	str	r2, [r6, #4]
 800671a:	dc07      	bgt.n	800672c <_scanf_i+0xb8>
 800671c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006720:	4631      	mov	r1, r6
 8006722:	4650      	mov	r0, sl
 8006724:	4790      	blx	r2
 8006726:	2800      	cmp	r0, #0
 8006728:	f040 8085 	bne.w	8006836 <_scanf_i+0x1c2>
 800672c:	f10b 0b01 	add.w	fp, fp, #1
 8006730:	f1bb 0f03 	cmp.w	fp, #3
 8006734:	d1cb      	bne.n	80066ce <_scanf_i+0x5a>
 8006736:	6863      	ldr	r3, [r4, #4]
 8006738:	b90b      	cbnz	r3, 800673e <_scanf_i+0xca>
 800673a:	230a      	movs	r3, #10
 800673c:	6063      	str	r3, [r4, #4]
 800673e:	6863      	ldr	r3, [r4, #4]
 8006740:	4945      	ldr	r1, [pc, #276]	; (8006858 <_scanf_i+0x1e4>)
 8006742:	6960      	ldr	r0, [r4, #20]
 8006744:	1ac9      	subs	r1, r1, r3
 8006746:	f000 fa1f 	bl	8006b88 <__sccl>
 800674a:	f04f 0b00 	mov.w	fp, #0
 800674e:	68a3      	ldr	r3, [r4, #8]
 8006750:	6822      	ldr	r2, [r4, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d03d      	beq.n	80067d2 <_scanf_i+0x15e>
 8006756:	6831      	ldr	r1, [r6, #0]
 8006758:	6960      	ldr	r0, [r4, #20]
 800675a:	f891 c000 	ldrb.w	ip, [r1]
 800675e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006762:	2800      	cmp	r0, #0
 8006764:	d035      	beq.n	80067d2 <_scanf_i+0x15e>
 8006766:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800676a:	d124      	bne.n	80067b6 <_scanf_i+0x142>
 800676c:	0510      	lsls	r0, r2, #20
 800676e:	d522      	bpl.n	80067b6 <_scanf_i+0x142>
 8006770:	f10b 0b01 	add.w	fp, fp, #1
 8006774:	f1b9 0f00 	cmp.w	r9, #0
 8006778:	d003      	beq.n	8006782 <_scanf_i+0x10e>
 800677a:	3301      	adds	r3, #1
 800677c:	f109 39ff 	add.w	r9, r9, #4294967295
 8006780:	60a3      	str	r3, [r4, #8]
 8006782:	6873      	ldr	r3, [r6, #4]
 8006784:	3b01      	subs	r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	6073      	str	r3, [r6, #4]
 800678a:	dd1b      	ble.n	80067c4 <_scanf_i+0x150>
 800678c:	6833      	ldr	r3, [r6, #0]
 800678e:	3301      	adds	r3, #1
 8006790:	6033      	str	r3, [r6, #0]
 8006792:	68a3      	ldr	r3, [r4, #8]
 8006794:	3b01      	subs	r3, #1
 8006796:	60a3      	str	r3, [r4, #8]
 8006798:	e7d9      	b.n	800674e <_scanf_i+0xda>
 800679a:	f1bb 0f02 	cmp.w	fp, #2
 800679e:	d1ae      	bne.n	80066fe <_scanf_i+0x8a>
 80067a0:	6822      	ldr	r2, [r4, #0]
 80067a2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80067a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80067aa:	d1bf      	bne.n	800672c <_scanf_i+0xb8>
 80067ac:	2310      	movs	r3, #16
 80067ae:	6063      	str	r3, [r4, #4]
 80067b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067b4:	e7a2      	b.n	80066fc <_scanf_i+0x88>
 80067b6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80067ba:	6022      	str	r2, [r4, #0]
 80067bc:	780b      	ldrb	r3, [r1, #0]
 80067be:	f805 3b01 	strb.w	r3, [r5], #1
 80067c2:	e7de      	b.n	8006782 <_scanf_i+0x10e>
 80067c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80067c8:	4631      	mov	r1, r6
 80067ca:	4650      	mov	r0, sl
 80067cc:	4798      	blx	r3
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d0df      	beq.n	8006792 <_scanf_i+0x11e>
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	05d9      	lsls	r1, r3, #23
 80067d6:	d50d      	bpl.n	80067f4 <_scanf_i+0x180>
 80067d8:	42bd      	cmp	r5, r7
 80067da:	d909      	bls.n	80067f0 <_scanf_i+0x17c>
 80067dc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80067e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067e4:	4632      	mov	r2, r6
 80067e6:	4650      	mov	r0, sl
 80067e8:	4798      	blx	r3
 80067ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80067ee:	464d      	mov	r5, r9
 80067f0:	42bd      	cmp	r5, r7
 80067f2:	d028      	beq.n	8006846 <_scanf_i+0x1d2>
 80067f4:	6822      	ldr	r2, [r4, #0]
 80067f6:	f012 0210 	ands.w	r2, r2, #16
 80067fa:	d113      	bne.n	8006824 <_scanf_i+0x1b0>
 80067fc:	702a      	strb	r2, [r5, #0]
 80067fe:	6863      	ldr	r3, [r4, #4]
 8006800:	9e01      	ldr	r6, [sp, #4]
 8006802:	4639      	mov	r1, r7
 8006804:	4650      	mov	r0, sl
 8006806:	47b0      	blx	r6
 8006808:	f8d8 3000 	ldr.w	r3, [r8]
 800680c:	6821      	ldr	r1, [r4, #0]
 800680e:	1d1a      	adds	r2, r3, #4
 8006810:	f8c8 2000 	str.w	r2, [r8]
 8006814:	f011 0f20 	tst.w	r1, #32
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	d00f      	beq.n	800683c <_scanf_i+0x1c8>
 800681c:	6018      	str	r0, [r3, #0]
 800681e:	68e3      	ldr	r3, [r4, #12]
 8006820:	3301      	adds	r3, #1
 8006822:	60e3      	str	r3, [r4, #12]
 8006824:	6923      	ldr	r3, [r4, #16]
 8006826:	1bed      	subs	r5, r5, r7
 8006828:	445d      	add	r5, fp
 800682a:	442b      	add	r3, r5
 800682c:	6123      	str	r3, [r4, #16]
 800682e:	2000      	movs	r0, #0
 8006830:	b007      	add	sp, #28
 8006832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006836:	f04f 0b00 	mov.w	fp, #0
 800683a:	e7ca      	b.n	80067d2 <_scanf_i+0x15e>
 800683c:	07ca      	lsls	r2, r1, #31
 800683e:	bf4c      	ite	mi
 8006840:	8018      	strhmi	r0, [r3, #0]
 8006842:	6018      	strpl	r0, [r3, #0]
 8006844:	e7eb      	b.n	800681e <_scanf_i+0x1aa>
 8006846:	2001      	movs	r0, #1
 8006848:	e7f2      	b.n	8006830 <_scanf_i+0x1bc>
 800684a:	bf00      	nop
 800684c:	08007098 	.word	0x08007098
 8006850:	08007029 	.word	0x08007029
 8006854:	08006f41 	.word	0x08006f41
 8006858:	0800844c 	.word	0x0800844c

0800685c <__sflush_r>:
 800685c:	898a      	ldrh	r2, [r1, #12]
 800685e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006862:	4605      	mov	r5, r0
 8006864:	0710      	lsls	r0, r2, #28
 8006866:	460c      	mov	r4, r1
 8006868:	d458      	bmi.n	800691c <__sflush_r+0xc0>
 800686a:	684b      	ldr	r3, [r1, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	dc05      	bgt.n	800687c <__sflush_r+0x20>
 8006870:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006872:	2b00      	cmp	r3, #0
 8006874:	dc02      	bgt.n	800687c <__sflush_r+0x20>
 8006876:	2000      	movs	r0, #0
 8006878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800687c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800687e:	2e00      	cmp	r6, #0
 8006880:	d0f9      	beq.n	8006876 <__sflush_r+0x1a>
 8006882:	2300      	movs	r3, #0
 8006884:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006888:	682f      	ldr	r7, [r5, #0]
 800688a:	6a21      	ldr	r1, [r4, #32]
 800688c:	602b      	str	r3, [r5, #0]
 800688e:	d032      	beq.n	80068f6 <__sflush_r+0x9a>
 8006890:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006892:	89a3      	ldrh	r3, [r4, #12]
 8006894:	075a      	lsls	r2, r3, #29
 8006896:	d505      	bpl.n	80068a4 <__sflush_r+0x48>
 8006898:	6863      	ldr	r3, [r4, #4]
 800689a:	1ac0      	subs	r0, r0, r3
 800689c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800689e:	b10b      	cbz	r3, 80068a4 <__sflush_r+0x48>
 80068a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068a2:	1ac0      	subs	r0, r0, r3
 80068a4:	2300      	movs	r3, #0
 80068a6:	4602      	mov	r2, r0
 80068a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068aa:	6a21      	ldr	r1, [r4, #32]
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b0      	blx	r6
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	89a3      	ldrh	r3, [r4, #12]
 80068b4:	d106      	bne.n	80068c4 <__sflush_r+0x68>
 80068b6:	6829      	ldr	r1, [r5, #0]
 80068b8:	291d      	cmp	r1, #29
 80068ba:	d82b      	bhi.n	8006914 <__sflush_r+0xb8>
 80068bc:	4a29      	ldr	r2, [pc, #164]	; (8006964 <__sflush_r+0x108>)
 80068be:	410a      	asrs	r2, r1
 80068c0:	07d6      	lsls	r6, r2, #31
 80068c2:	d427      	bmi.n	8006914 <__sflush_r+0xb8>
 80068c4:	2200      	movs	r2, #0
 80068c6:	6062      	str	r2, [r4, #4]
 80068c8:	04d9      	lsls	r1, r3, #19
 80068ca:	6922      	ldr	r2, [r4, #16]
 80068cc:	6022      	str	r2, [r4, #0]
 80068ce:	d504      	bpl.n	80068da <__sflush_r+0x7e>
 80068d0:	1c42      	adds	r2, r0, #1
 80068d2:	d101      	bne.n	80068d8 <__sflush_r+0x7c>
 80068d4:	682b      	ldr	r3, [r5, #0]
 80068d6:	b903      	cbnz	r3, 80068da <__sflush_r+0x7e>
 80068d8:	6560      	str	r0, [r4, #84]	; 0x54
 80068da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068dc:	602f      	str	r7, [r5, #0]
 80068de:	2900      	cmp	r1, #0
 80068e0:	d0c9      	beq.n	8006876 <__sflush_r+0x1a>
 80068e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068e6:	4299      	cmp	r1, r3
 80068e8:	d002      	beq.n	80068f0 <__sflush_r+0x94>
 80068ea:	4628      	mov	r0, r5
 80068ec:	f7ff fbba 	bl	8006064 <_free_r>
 80068f0:	2000      	movs	r0, #0
 80068f2:	6360      	str	r0, [r4, #52]	; 0x34
 80068f4:	e7c0      	b.n	8006878 <__sflush_r+0x1c>
 80068f6:	2301      	movs	r3, #1
 80068f8:	4628      	mov	r0, r5
 80068fa:	47b0      	blx	r6
 80068fc:	1c41      	adds	r1, r0, #1
 80068fe:	d1c8      	bne.n	8006892 <__sflush_r+0x36>
 8006900:	682b      	ldr	r3, [r5, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0c5      	beq.n	8006892 <__sflush_r+0x36>
 8006906:	2b1d      	cmp	r3, #29
 8006908:	d001      	beq.n	800690e <__sflush_r+0xb2>
 800690a:	2b16      	cmp	r3, #22
 800690c:	d101      	bne.n	8006912 <__sflush_r+0xb6>
 800690e:	602f      	str	r7, [r5, #0]
 8006910:	e7b1      	b.n	8006876 <__sflush_r+0x1a>
 8006912:	89a3      	ldrh	r3, [r4, #12]
 8006914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006918:	81a3      	strh	r3, [r4, #12]
 800691a:	e7ad      	b.n	8006878 <__sflush_r+0x1c>
 800691c:	690f      	ldr	r7, [r1, #16]
 800691e:	2f00      	cmp	r7, #0
 8006920:	d0a9      	beq.n	8006876 <__sflush_r+0x1a>
 8006922:	0793      	lsls	r3, r2, #30
 8006924:	680e      	ldr	r6, [r1, #0]
 8006926:	bf08      	it	eq
 8006928:	694b      	ldreq	r3, [r1, #20]
 800692a:	600f      	str	r7, [r1, #0]
 800692c:	bf18      	it	ne
 800692e:	2300      	movne	r3, #0
 8006930:	eba6 0807 	sub.w	r8, r6, r7
 8006934:	608b      	str	r3, [r1, #8]
 8006936:	f1b8 0f00 	cmp.w	r8, #0
 800693a:	dd9c      	ble.n	8006876 <__sflush_r+0x1a>
 800693c:	6a21      	ldr	r1, [r4, #32]
 800693e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006940:	4643      	mov	r3, r8
 8006942:	463a      	mov	r2, r7
 8006944:	4628      	mov	r0, r5
 8006946:	47b0      	blx	r6
 8006948:	2800      	cmp	r0, #0
 800694a:	dc06      	bgt.n	800695a <__sflush_r+0xfe>
 800694c:	89a3      	ldrh	r3, [r4, #12]
 800694e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006952:	81a3      	strh	r3, [r4, #12]
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	e78e      	b.n	8006878 <__sflush_r+0x1c>
 800695a:	4407      	add	r7, r0
 800695c:	eba8 0800 	sub.w	r8, r8, r0
 8006960:	e7e9      	b.n	8006936 <__sflush_r+0xda>
 8006962:	bf00      	nop
 8006964:	dfbffffe 	.word	0xdfbffffe

08006968 <_fflush_r>:
 8006968:	b538      	push	{r3, r4, r5, lr}
 800696a:	690b      	ldr	r3, [r1, #16]
 800696c:	4605      	mov	r5, r0
 800696e:	460c      	mov	r4, r1
 8006970:	b913      	cbnz	r3, 8006978 <_fflush_r+0x10>
 8006972:	2500      	movs	r5, #0
 8006974:	4628      	mov	r0, r5
 8006976:	bd38      	pop	{r3, r4, r5, pc}
 8006978:	b118      	cbz	r0, 8006982 <_fflush_r+0x1a>
 800697a:	6a03      	ldr	r3, [r0, #32]
 800697c:	b90b      	cbnz	r3, 8006982 <_fflush_r+0x1a>
 800697e:	f7ff f96d 	bl	8005c5c <__sinit>
 8006982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0f3      	beq.n	8006972 <_fflush_r+0xa>
 800698a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800698c:	07d0      	lsls	r0, r2, #31
 800698e:	d404      	bmi.n	800699a <_fflush_r+0x32>
 8006990:	0599      	lsls	r1, r3, #22
 8006992:	d402      	bmi.n	800699a <_fflush_r+0x32>
 8006994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006996:	f7ff fb55 	bl	8006044 <__retarget_lock_acquire_recursive>
 800699a:	4628      	mov	r0, r5
 800699c:	4621      	mov	r1, r4
 800699e:	f7ff ff5d 	bl	800685c <__sflush_r>
 80069a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069a4:	07da      	lsls	r2, r3, #31
 80069a6:	4605      	mov	r5, r0
 80069a8:	d4e4      	bmi.n	8006974 <_fflush_r+0xc>
 80069aa:	89a3      	ldrh	r3, [r4, #12]
 80069ac:	059b      	lsls	r3, r3, #22
 80069ae:	d4e1      	bmi.n	8006974 <_fflush_r+0xc>
 80069b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069b2:	f7ff fb48 	bl	8006046 <__retarget_lock_release_recursive>
 80069b6:	e7dd      	b.n	8006974 <_fflush_r+0xc>

080069b8 <__swhatbuf_r>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	460c      	mov	r4, r1
 80069bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c0:	2900      	cmp	r1, #0
 80069c2:	b096      	sub	sp, #88	; 0x58
 80069c4:	4615      	mov	r5, r2
 80069c6:	461e      	mov	r6, r3
 80069c8:	da0d      	bge.n	80069e6 <__swhatbuf_r+0x2e>
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80069d0:	f04f 0100 	mov.w	r1, #0
 80069d4:	bf0c      	ite	eq
 80069d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80069da:	2340      	movne	r3, #64	; 0x40
 80069dc:	2000      	movs	r0, #0
 80069de:	6031      	str	r1, [r6, #0]
 80069e0:	602b      	str	r3, [r5, #0]
 80069e2:	b016      	add	sp, #88	; 0x58
 80069e4:	bd70      	pop	{r4, r5, r6, pc}
 80069e6:	466a      	mov	r2, sp
 80069e8:	f000 f9c6 	bl	8006d78 <_fstat_r>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	dbec      	blt.n	80069ca <__swhatbuf_r+0x12>
 80069f0:	9901      	ldr	r1, [sp, #4]
 80069f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80069f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80069fa:	4259      	negs	r1, r3
 80069fc:	4159      	adcs	r1, r3
 80069fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a02:	e7eb      	b.n	80069dc <__swhatbuf_r+0x24>

08006a04 <__smakebuf_r>:
 8006a04:	898b      	ldrh	r3, [r1, #12]
 8006a06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a08:	079d      	lsls	r5, r3, #30
 8006a0a:	4606      	mov	r6, r0
 8006a0c:	460c      	mov	r4, r1
 8006a0e:	d507      	bpl.n	8006a20 <__smakebuf_r+0x1c>
 8006a10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	6123      	str	r3, [r4, #16]
 8006a18:	2301      	movs	r3, #1
 8006a1a:	6163      	str	r3, [r4, #20]
 8006a1c:	b002      	add	sp, #8
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}
 8006a20:	ab01      	add	r3, sp, #4
 8006a22:	466a      	mov	r2, sp
 8006a24:	f7ff ffc8 	bl	80069b8 <__swhatbuf_r>
 8006a28:	9900      	ldr	r1, [sp, #0]
 8006a2a:	4605      	mov	r5, r0
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f7ff fb85 	bl	800613c <_malloc_r>
 8006a32:	b948      	cbnz	r0, 8006a48 <__smakebuf_r+0x44>
 8006a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a38:	059a      	lsls	r2, r3, #22
 8006a3a:	d4ef      	bmi.n	8006a1c <__smakebuf_r+0x18>
 8006a3c:	f023 0303 	bic.w	r3, r3, #3
 8006a40:	f043 0302 	orr.w	r3, r3, #2
 8006a44:	81a3      	strh	r3, [r4, #12]
 8006a46:	e7e3      	b.n	8006a10 <__smakebuf_r+0xc>
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	6020      	str	r0, [r4, #0]
 8006a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a50:	81a3      	strh	r3, [r4, #12]
 8006a52:	9b00      	ldr	r3, [sp, #0]
 8006a54:	6163      	str	r3, [r4, #20]
 8006a56:	9b01      	ldr	r3, [sp, #4]
 8006a58:	6120      	str	r0, [r4, #16]
 8006a5a:	b15b      	cbz	r3, 8006a74 <__smakebuf_r+0x70>
 8006a5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a60:	4630      	mov	r0, r6
 8006a62:	f000 f99b 	bl	8006d9c <_isatty_r>
 8006a66:	b128      	cbz	r0, 8006a74 <__smakebuf_r+0x70>
 8006a68:	89a3      	ldrh	r3, [r4, #12]
 8006a6a:	f023 0303 	bic.w	r3, r3, #3
 8006a6e:	f043 0301 	orr.w	r3, r3, #1
 8006a72:	81a3      	strh	r3, [r4, #12]
 8006a74:	89a3      	ldrh	r3, [r4, #12]
 8006a76:	431d      	orrs	r5, r3
 8006a78:	81a5      	strh	r5, [r4, #12]
 8006a7a:	e7cf      	b.n	8006a1c <__smakebuf_r+0x18>

08006a7c <lflush>:
 8006a7c:	898b      	ldrh	r3, [r1, #12]
 8006a7e:	f003 0309 	and.w	r3, r3, #9
 8006a82:	2b09      	cmp	r3, #9
 8006a84:	d103      	bne.n	8006a8e <lflush+0x12>
 8006a86:	4b03      	ldr	r3, [pc, #12]	; (8006a94 <lflush+0x18>)
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	f7ff bf6d 	b.w	8006968 <_fflush_r>
 8006a8e:	2000      	movs	r0, #0
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	2000006c 	.word	0x2000006c

08006a98 <__srefill_r>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	4605      	mov	r5, r0
 8006a9e:	b118      	cbz	r0, 8006aa8 <__srefill_r+0x10>
 8006aa0:	6a03      	ldr	r3, [r0, #32]
 8006aa2:	b90b      	cbnz	r3, 8006aa8 <__srefill_r+0x10>
 8006aa4:	f7ff f8da 	bl	8005c5c <__sinit>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	6063      	str	r3, [r4, #4]
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ab2:	069e      	lsls	r6, r3, #26
 8006ab4:	d502      	bpl.n	8006abc <__srefill_r+0x24>
 8006ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aba:	e05c      	b.n	8006b76 <__srefill_r+0xde>
 8006abc:	0758      	lsls	r0, r3, #29
 8006abe:	d448      	bmi.n	8006b52 <__srefill_r+0xba>
 8006ac0:	06d9      	lsls	r1, r3, #27
 8006ac2:	d405      	bmi.n	8006ad0 <__srefill_r+0x38>
 8006ac4:	2309      	movs	r3, #9
 8006ac6:	602b      	str	r3, [r5, #0]
 8006ac8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006acc:	81a3      	strh	r3, [r4, #12]
 8006ace:	e7f2      	b.n	8006ab6 <__srefill_r+0x1e>
 8006ad0:	071a      	lsls	r2, r3, #28
 8006ad2:	d50b      	bpl.n	8006aec <__srefill_r+0x54>
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f7ff ff46 	bl	8006968 <_fflush_r>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d1ea      	bne.n	8006ab6 <__srefill_r+0x1e>
 8006ae0:	89a3      	ldrh	r3, [r4, #12]
 8006ae2:	60a0      	str	r0, [r4, #8]
 8006ae4:	f023 0308 	bic.w	r3, r3, #8
 8006ae8:	81a3      	strh	r3, [r4, #12]
 8006aea:	61a0      	str	r0, [r4, #24]
 8006aec:	89a3      	ldrh	r3, [r4, #12]
 8006aee:	f043 0304 	orr.w	r3, r3, #4
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	6923      	ldr	r3, [r4, #16]
 8006af6:	b91b      	cbnz	r3, 8006b00 <__srefill_r+0x68>
 8006af8:	4621      	mov	r1, r4
 8006afa:	4628      	mov	r0, r5
 8006afc:	f7ff ff82 	bl	8006a04 <__smakebuf_r>
 8006b00:	89a6      	ldrh	r6, [r4, #12]
 8006b02:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8006b06:	07b3      	lsls	r3, r6, #30
 8006b08:	d00f      	beq.n	8006b2a <__srefill_r+0x92>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	4a1b      	ldr	r2, [pc, #108]	; (8006b7c <__srefill_r+0xe4>)
 8006b0e:	491c      	ldr	r1, [pc, #112]	; (8006b80 <__srefill_r+0xe8>)
 8006b10:	481c      	ldr	r0, [pc, #112]	; (8006b84 <__srefill_r+0xec>)
 8006b12:	81a3      	strh	r3, [r4, #12]
 8006b14:	f006 0609 	and.w	r6, r6, #9
 8006b18:	f7ff f8b8 	bl	8005c8c <_fwalk_sglue>
 8006b1c:	2e09      	cmp	r6, #9
 8006b1e:	81a7      	strh	r7, [r4, #12]
 8006b20:	d103      	bne.n	8006b2a <__srefill_r+0x92>
 8006b22:	4621      	mov	r1, r4
 8006b24:	4628      	mov	r0, r5
 8006b26:	f7ff fe99 	bl	800685c <__sflush_r>
 8006b2a:	6922      	ldr	r2, [r4, #16]
 8006b2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006b2e:	6963      	ldr	r3, [r4, #20]
 8006b30:	6a21      	ldr	r1, [r4, #32]
 8006b32:	6022      	str	r2, [r4, #0]
 8006b34:	4628      	mov	r0, r5
 8006b36:	47b0      	blx	r6
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	6060      	str	r0, [r4, #4]
 8006b3c:	dc1c      	bgt.n	8006b78 <__srefill_r+0xe0>
 8006b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b42:	bf17      	itett	ne
 8006b44:	2200      	movne	r2, #0
 8006b46:	f043 0320 	orreq.w	r3, r3, #32
 8006b4a:	6062      	strne	r2, [r4, #4]
 8006b4c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8006b50:	e7bc      	b.n	8006acc <__srefill_r+0x34>
 8006b52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b54:	2900      	cmp	r1, #0
 8006b56:	d0cd      	beq.n	8006af4 <__srefill_r+0x5c>
 8006b58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b5c:	4299      	cmp	r1, r3
 8006b5e:	d002      	beq.n	8006b66 <__srefill_r+0xce>
 8006b60:	4628      	mov	r0, r5
 8006b62:	f7ff fa7f 	bl	8006064 <_free_r>
 8006b66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b68:	6063      	str	r3, [r4, #4]
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0c0      	beq.n	8006af4 <__srefill_r+0x5c>
 8006b72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b78:	2000      	movs	r0, #0
 8006b7a:	e7fc      	b.n	8006b76 <__srefill_r+0xde>
 8006b7c:	20000014 	.word	0x20000014
 8006b80:	08006a7d 	.word	0x08006a7d
 8006b84:	20000020 	.word	0x20000020

08006b88 <__sccl>:
 8006b88:	b570      	push	{r4, r5, r6, lr}
 8006b8a:	780b      	ldrb	r3, [r1, #0]
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	2b5e      	cmp	r3, #94	; 0x5e
 8006b90:	bf0b      	itete	eq
 8006b92:	784b      	ldrbeq	r3, [r1, #1]
 8006b94:	1c4a      	addne	r2, r1, #1
 8006b96:	1c8a      	addeq	r2, r1, #2
 8006b98:	2100      	movne	r1, #0
 8006b9a:	bf08      	it	eq
 8006b9c:	2101      	moveq	r1, #1
 8006b9e:	3801      	subs	r0, #1
 8006ba0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006ba4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006ba8:	42a8      	cmp	r0, r5
 8006baa:	d1fb      	bne.n	8006ba4 <__sccl+0x1c>
 8006bac:	b90b      	cbnz	r3, 8006bb2 <__sccl+0x2a>
 8006bae:	1e50      	subs	r0, r2, #1
 8006bb0:	bd70      	pop	{r4, r5, r6, pc}
 8006bb2:	f081 0101 	eor.w	r1, r1, #1
 8006bb6:	54e1      	strb	r1, [r4, r3]
 8006bb8:	4610      	mov	r0, r2
 8006bba:	4602      	mov	r2, r0
 8006bbc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006bc0:	2d2d      	cmp	r5, #45	; 0x2d
 8006bc2:	d005      	beq.n	8006bd0 <__sccl+0x48>
 8006bc4:	2d5d      	cmp	r5, #93	; 0x5d
 8006bc6:	d016      	beq.n	8006bf6 <__sccl+0x6e>
 8006bc8:	2d00      	cmp	r5, #0
 8006bca:	d0f1      	beq.n	8006bb0 <__sccl+0x28>
 8006bcc:	462b      	mov	r3, r5
 8006bce:	e7f2      	b.n	8006bb6 <__sccl+0x2e>
 8006bd0:	7846      	ldrb	r6, [r0, #1]
 8006bd2:	2e5d      	cmp	r6, #93	; 0x5d
 8006bd4:	d0fa      	beq.n	8006bcc <__sccl+0x44>
 8006bd6:	42b3      	cmp	r3, r6
 8006bd8:	dcf8      	bgt.n	8006bcc <__sccl+0x44>
 8006bda:	3002      	adds	r0, #2
 8006bdc:	461a      	mov	r2, r3
 8006bde:	3201      	adds	r2, #1
 8006be0:	4296      	cmp	r6, r2
 8006be2:	54a1      	strb	r1, [r4, r2]
 8006be4:	dcfb      	bgt.n	8006bde <__sccl+0x56>
 8006be6:	1af2      	subs	r2, r6, r3
 8006be8:	3a01      	subs	r2, #1
 8006bea:	1c5d      	adds	r5, r3, #1
 8006bec:	42b3      	cmp	r3, r6
 8006bee:	bfa8      	it	ge
 8006bf0:	2200      	movge	r2, #0
 8006bf2:	18ab      	adds	r3, r5, r2
 8006bf4:	e7e1      	b.n	8006bba <__sccl+0x32>
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	e7da      	b.n	8006bb0 <__sccl+0x28>

08006bfa <__submore>:
 8006bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfe:	460c      	mov	r4, r1
 8006c00:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006c02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c06:	4299      	cmp	r1, r3
 8006c08:	d11d      	bne.n	8006c46 <__submore+0x4c>
 8006c0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c0e:	f7ff fa95 	bl	800613c <_malloc_r>
 8006c12:	b918      	cbnz	r0, 8006c1c <__submore+0x22>
 8006c14:	f04f 30ff 	mov.w	r0, #4294967295
 8006c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c20:	63a3      	str	r3, [r4, #56]	; 0x38
 8006c22:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006c26:	6360      	str	r0, [r4, #52]	; 0x34
 8006c28:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006c2c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006c30:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006c34:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006c38:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006c3c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006c40:	6020      	str	r0, [r4, #0]
 8006c42:	2000      	movs	r0, #0
 8006c44:	e7e8      	b.n	8006c18 <__submore+0x1e>
 8006c46:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006c48:	0077      	lsls	r7, r6, #1
 8006c4a:	463a      	mov	r2, r7
 8006c4c:	f000 f8c6 	bl	8006ddc <_realloc_r>
 8006c50:	4605      	mov	r5, r0
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d0de      	beq.n	8006c14 <__submore+0x1a>
 8006c56:	eb00 0806 	add.w	r8, r0, r6
 8006c5a:	4601      	mov	r1, r0
 8006c5c:	4632      	mov	r2, r6
 8006c5e:	4640      	mov	r0, r8
 8006c60:	f7ff f9f2 	bl	8006048 <memcpy>
 8006c64:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006c68:	f8c4 8000 	str.w	r8, [r4]
 8006c6c:	e7e9      	b.n	8006c42 <__submore+0x48>

08006c6e <_ungetc_r>:
 8006c6e:	b570      	push	{r4, r5, r6, lr}
 8006c70:	4614      	mov	r4, r2
 8006c72:	1c4a      	adds	r2, r1, #1
 8006c74:	4606      	mov	r6, r0
 8006c76:	460d      	mov	r5, r1
 8006c78:	d103      	bne.n	8006c82 <_ungetc_r+0x14>
 8006c7a:	f04f 35ff 	mov.w	r5, #4294967295
 8006c7e:	4628      	mov	r0, r5
 8006c80:	bd70      	pop	{r4, r5, r6, pc}
 8006c82:	b118      	cbz	r0, 8006c8c <_ungetc_r+0x1e>
 8006c84:	6a03      	ldr	r3, [r0, #32]
 8006c86:	b90b      	cbnz	r3, 8006c8c <_ungetc_r+0x1e>
 8006c88:	f7fe ffe8 	bl	8005c5c <__sinit>
 8006c8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c8e:	07db      	lsls	r3, r3, #31
 8006c90:	d405      	bmi.n	8006c9e <_ungetc_r+0x30>
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	0598      	lsls	r0, r3, #22
 8006c96:	d402      	bmi.n	8006c9e <_ungetc_r+0x30>
 8006c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c9a:	f7ff f9d3 	bl	8006044 <__retarget_lock_acquire_recursive>
 8006c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ca2:	f023 0320 	bic.w	r3, r3, #32
 8006ca6:	0759      	lsls	r1, r3, #29
 8006ca8:	81a3      	strh	r3, [r4, #12]
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	d423      	bmi.n	8006cf6 <_ungetc_r+0x88>
 8006cae:	06d3      	lsls	r3, r2, #27
 8006cb0:	d409      	bmi.n	8006cc6 <_ungetc_r+0x58>
 8006cb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cb4:	07dd      	lsls	r5, r3, #31
 8006cb6:	d4e0      	bmi.n	8006c7a <_ungetc_r+0xc>
 8006cb8:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006cbc:	d1dd      	bne.n	8006c7a <_ungetc_r+0xc>
 8006cbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cc0:	f7ff f9c1 	bl	8006046 <__retarget_lock_release_recursive>
 8006cc4:	e7d9      	b.n	8006c7a <_ungetc_r+0xc>
 8006cc6:	0710      	lsls	r0, r2, #28
 8006cc8:	d511      	bpl.n	8006cee <_ungetc_r+0x80>
 8006cca:	4621      	mov	r1, r4
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f7ff fe4b 	bl	8006968 <_fflush_r>
 8006cd2:	b130      	cbz	r0, 8006ce2 <_ungetc_r+0x74>
 8006cd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cd6:	07d9      	lsls	r1, r3, #31
 8006cd8:	d4cf      	bmi.n	8006c7a <_ungetc_r+0xc>
 8006cda:	89a3      	ldrh	r3, [r4, #12]
 8006cdc:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006ce0:	e7ec      	b.n	8006cbc <_ungetc_r+0x4e>
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	60a0      	str	r0, [r4, #8]
 8006ce6:	f023 0308 	bic.w	r3, r3, #8
 8006cea:	81a3      	strh	r3, [r4, #12]
 8006cec:	61a0      	str	r0, [r4, #24]
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	f043 0304 	orr.w	r3, r3, #4
 8006cf4:	81a3      	strh	r3, [r4, #12]
 8006cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cf8:	6862      	ldr	r2, [r4, #4]
 8006cfa:	b2ed      	uxtb	r5, r5
 8006cfc:	b1d3      	cbz	r3, 8006d34 <_ungetc_r+0xc6>
 8006cfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006d00:	4293      	cmp	r3, r2
 8006d02:	dc05      	bgt.n	8006d10 <_ungetc_r+0xa2>
 8006d04:	4621      	mov	r1, r4
 8006d06:	4630      	mov	r0, r6
 8006d08:	f7ff ff77 	bl	8006bfa <__submore>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d1e1      	bne.n	8006cd4 <_ungetc_r+0x66>
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	1e5a      	subs	r2, r3, #1
 8006d14:	6022      	str	r2, [r4, #0]
 8006d16:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006d1a:	6863      	ldr	r3, [r4, #4]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	6063      	str	r3, [r4, #4]
 8006d20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d22:	07da      	lsls	r2, r3, #31
 8006d24:	d4ab      	bmi.n	8006c7e <_ungetc_r+0x10>
 8006d26:	89a3      	ldrh	r3, [r4, #12]
 8006d28:	059b      	lsls	r3, r3, #22
 8006d2a:	d4a8      	bmi.n	8006c7e <_ungetc_r+0x10>
 8006d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d2e:	f7ff f98a 	bl	8006046 <__retarget_lock_release_recursive>
 8006d32:	e7a4      	b.n	8006c7e <_ungetc_r+0x10>
 8006d34:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006d36:	6920      	ldr	r0, [r4, #16]
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	f001 0101 	and.w	r1, r1, #1
 8006d3e:	b160      	cbz	r0, 8006d5a <_ungetc_r+0xec>
 8006d40:	4298      	cmp	r0, r3
 8006d42:	d20a      	bcs.n	8006d5a <_ungetc_r+0xec>
 8006d44:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8006d48:	42a8      	cmp	r0, r5
 8006d4a:	d106      	bne.n	8006d5a <_ungetc_r+0xec>
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	3201      	adds	r2, #1
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	6062      	str	r2, [r4, #4]
 8006d54:	2900      	cmp	r1, #0
 8006d56:	d192      	bne.n	8006c7e <_ungetc_r+0x10>
 8006d58:	e7e5      	b.n	8006d26 <_ungetc_r+0xb8>
 8006d5a:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006d5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d62:	6363      	str	r3, [r4, #52]	; 0x34
 8006d64:	2303      	movs	r3, #3
 8006d66:	63a3      	str	r3, [r4, #56]	; 0x38
 8006d68:	4623      	mov	r3, r4
 8006d6a:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006d6e:	6023      	str	r3, [r4, #0]
 8006d70:	2301      	movs	r3, #1
 8006d72:	6063      	str	r3, [r4, #4]
 8006d74:	e7ee      	b.n	8006d54 <_ungetc_r+0xe6>
	...

08006d78 <_fstat_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4d07      	ldr	r5, [pc, #28]	; (8006d98 <_fstat_r+0x20>)
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	4608      	mov	r0, r1
 8006d82:	4611      	mov	r1, r2
 8006d84:	602b      	str	r3, [r5, #0]
 8006d86:	f7f9 ff2a 	bl	8000bde <_fstat>
 8006d8a:	1c43      	adds	r3, r0, #1
 8006d8c:	d102      	bne.n	8006d94 <_fstat_r+0x1c>
 8006d8e:	682b      	ldr	r3, [r5, #0]
 8006d90:	b103      	cbz	r3, 8006d94 <_fstat_r+0x1c>
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	bd38      	pop	{r3, r4, r5, pc}
 8006d96:	bf00      	nop
 8006d98:	200006d8 	.word	0x200006d8

08006d9c <_isatty_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4d06      	ldr	r5, [pc, #24]	; (8006db8 <_isatty_r+0x1c>)
 8006da0:	2300      	movs	r3, #0
 8006da2:	4604      	mov	r4, r0
 8006da4:	4608      	mov	r0, r1
 8006da6:	602b      	str	r3, [r5, #0]
 8006da8:	f7f9 ff29 	bl	8000bfe <_isatty>
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	d102      	bne.n	8006db6 <_isatty_r+0x1a>
 8006db0:	682b      	ldr	r3, [r5, #0]
 8006db2:	b103      	cbz	r3, 8006db6 <_isatty_r+0x1a>
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	bd38      	pop	{r3, r4, r5, pc}
 8006db8:	200006d8 	.word	0x200006d8

08006dbc <_sbrk_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4d06      	ldr	r5, [pc, #24]	; (8006dd8 <_sbrk_r+0x1c>)
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	4608      	mov	r0, r1
 8006dc6:	602b      	str	r3, [r5, #0]
 8006dc8:	f7f9 ff32 	bl	8000c30 <_sbrk>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d102      	bne.n	8006dd6 <_sbrk_r+0x1a>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	b103      	cbz	r3, 8006dd6 <_sbrk_r+0x1a>
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	bd38      	pop	{r3, r4, r5, pc}
 8006dd8:	200006d8 	.word	0x200006d8

08006ddc <_realloc_r>:
 8006ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006de0:	4680      	mov	r8, r0
 8006de2:	4614      	mov	r4, r2
 8006de4:	460e      	mov	r6, r1
 8006de6:	b921      	cbnz	r1, 8006df2 <_realloc_r+0x16>
 8006de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dec:	4611      	mov	r1, r2
 8006dee:	f7ff b9a5 	b.w	800613c <_malloc_r>
 8006df2:	b92a      	cbnz	r2, 8006e00 <_realloc_r+0x24>
 8006df4:	f7ff f936 	bl	8006064 <_free_r>
 8006df8:	4625      	mov	r5, r4
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e00:	f000 f914 	bl	800702c <_malloc_usable_size_r>
 8006e04:	4284      	cmp	r4, r0
 8006e06:	4607      	mov	r7, r0
 8006e08:	d802      	bhi.n	8006e10 <_realloc_r+0x34>
 8006e0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e0e:	d812      	bhi.n	8006e36 <_realloc_r+0x5a>
 8006e10:	4621      	mov	r1, r4
 8006e12:	4640      	mov	r0, r8
 8006e14:	f7ff f992 	bl	800613c <_malloc_r>
 8006e18:	4605      	mov	r5, r0
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	d0ed      	beq.n	8006dfa <_realloc_r+0x1e>
 8006e1e:	42bc      	cmp	r4, r7
 8006e20:	4622      	mov	r2, r4
 8006e22:	4631      	mov	r1, r6
 8006e24:	bf28      	it	cs
 8006e26:	463a      	movcs	r2, r7
 8006e28:	f7ff f90e 	bl	8006048 <memcpy>
 8006e2c:	4631      	mov	r1, r6
 8006e2e:	4640      	mov	r0, r8
 8006e30:	f7ff f918 	bl	8006064 <_free_r>
 8006e34:	e7e1      	b.n	8006dfa <_realloc_r+0x1e>
 8006e36:	4635      	mov	r5, r6
 8006e38:	e7df      	b.n	8006dfa <_realloc_r+0x1e>
	...

08006e3c <_strtol_l.constprop.0>:
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e42:	d001      	beq.n	8006e48 <_strtol_l.constprop.0+0xc>
 8006e44:	2b24      	cmp	r3, #36	; 0x24
 8006e46:	d906      	bls.n	8006e56 <_strtol_l.constprop.0+0x1a>
 8006e48:	f7ff f8d2 	bl	8005ff0 <__errno>
 8006e4c:	2316      	movs	r3, #22
 8006e4e:	6003      	str	r3, [r0, #0]
 8006e50:	2000      	movs	r0, #0
 8006e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e56:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006f3c <_strtol_l.constprop.0+0x100>
 8006e5a:	460d      	mov	r5, r1
 8006e5c:	462e      	mov	r6, r5
 8006e5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e62:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006e66:	f017 0708 	ands.w	r7, r7, #8
 8006e6a:	d1f7      	bne.n	8006e5c <_strtol_l.constprop.0+0x20>
 8006e6c:	2c2d      	cmp	r4, #45	; 0x2d
 8006e6e:	d132      	bne.n	8006ed6 <_strtol_l.constprop.0+0x9a>
 8006e70:	782c      	ldrb	r4, [r5, #0]
 8006e72:	2701      	movs	r7, #1
 8006e74:	1cb5      	adds	r5, r6, #2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d05b      	beq.n	8006f32 <_strtol_l.constprop.0+0xf6>
 8006e7a:	2b10      	cmp	r3, #16
 8006e7c:	d109      	bne.n	8006e92 <_strtol_l.constprop.0+0x56>
 8006e7e:	2c30      	cmp	r4, #48	; 0x30
 8006e80:	d107      	bne.n	8006e92 <_strtol_l.constprop.0+0x56>
 8006e82:	782c      	ldrb	r4, [r5, #0]
 8006e84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006e88:	2c58      	cmp	r4, #88	; 0x58
 8006e8a:	d14d      	bne.n	8006f28 <_strtol_l.constprop.0+0xec>
 8006e8c:	786c      	ldrb	r4, [r5, #1]
 8006e8e:	2310      	movs	r3, #16
 8006e90:	3502      	adds	r5, #2
 8006e92:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006e96:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e9a:	f04f 0e00 	mov.w	lr, #0
 8006e9e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006ea2:	4676      	mov	r6, lr
 8006ea4:	fb03 8a19 	mls	sl, r3, r9, r8
 8006ea8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006eac:	f1bc 0f09 	cmp.w	ip, #9
 8006eb0:	d816      	bhi.n	8006ee0 <_strtol_l.constprop.0+0xa4>
 8006eb2:	4664      	mov	r4, ip
 8006eb4:	42a3      	cmp	r3, r4
 8006eb6:	dd24      	ble.n	8006f02 <_strtol_l.constprop.0+0xc6>
 8006eb8:	f1be 3fff 	cmp.w	lr, #4294967295
 8006ebc:	d008      	beq.n	8006ed0 <_strtol_l.constprop.0+0x94>
 8006ebe:	45b1      	cmp	r9, r6
 8006ec0:	d31c      	bcc.n	8006efc <_strtol_l.constprop.0+0xc0>
 8006ec2:	d101      	bne.n	8006ec8 <_strtol_l.constprop.0+0x8c>
 8006ec4:	45a2      	cmp	sl, r4
 8006ec6:	db19      	blt.n	8006efc <_strtol_l.constprop.0+0xc0>
 8006ec8:	fb06 4603 	mla	r6, r6, r3, r4
 8006ecc:	f04f 0e01 	mov.w	lr, #1
 8006ed0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ed4:	e7e8      	b.n	8006ea8 <_strtol_l.constprop.0+0x6c>
 8006ed6:	2c2b      	cmp	r4, #43	; 0x2b
 8006ed8:	bf04      	itt	eq
 8006eda:	782c      	ldrbeq	r4, [r5, #0]
 8006edc:	1cb5      	addeq	r5, r6, #2
 8006ede:	e7ca      	b.n	8006e76 <_strtol_l.constprop.0+0x3a>
 8006ee0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006ee4:	f1bc 0f19 	cmp.w	ip, #25
 8006ee8:	d801      	bhi.n	8006eee <_strtol_l.constprop.0+0xb2>
 8006eea:	3c37      	subs	r4, #55	; 0x37
 8006eec:	e7e2      	b.n	8006eb4 <_strtol_l.constprop.0+0x78>
 8006eee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006ef2:	f1bc 0f19 	cmp.w	ip, #25
 8006ef6:	d804      	bhi.n	8006f02 <_strtol_l.constprop.0+0xc6>
 8006ef8:	3c57      	subs	r4, #87	; 0x57
 8006efa:	e7db      	b.n	8006eb4 <_strtol_l.constprop.0+0x78>
 8006efc:	f04f 3eff 	mov.w	lr, #4294967295
 8006f00:	e7e6      	b.n	8006ed0 <_strtol_l.constprop.0+0x94>
 8006f02:	f1be 3fff 	cmp.w	lr, #4294967295
 8006f06:	d105      	bne.n	8006f14 <_strtol_l.constprop.0+0xd8>
 8006f08:	2322      	movs	r3, #34	; 0x22
 8006f0a:	6003      	str	r3, [r0, #0]
 8006f0c:	4646      	mov	r6, r8
 8006f0e:	b942      	cbnz	r2, 8006f22 <_strtol_l.constprop.0+0xe6>
 8006f10:	4630      	mov	r0, r6
 8006f12:	e79e      	b.n	8006e52 <_strtol_l.constprop.0+0x16>
 8006f14:	b107      	cbz	r7, 8006f18 <_strtol_l.constprop.0+0xdc>
 8006f16:	4276      	negs	r6, r6
 8006f18:	2a00      	cmp	r2, #0
 8006f1a:	d0f9      	beq.n	8006f10 <_strtol_l.constprop.0+0xd4>
 8006f1c:	f1be 0f00 	cmp.w	lr, #0
 8006f20:	d000      	beq.n	8006f24 <_strtol_l.constprop.0+0xe8>
 8006f22:	1e69      	subs	r1, r5, #1
 8006f24:	6011      	str	r1, [r2, #0]
 8006f26:	e7f3      	b.n	8006f10 <_strtol_l.constprop.0+0xd4>
 8006f28:	2430      	movs	r4, #48	; 0x30
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1b1      	bne.n	8006e92 <_strtol_l.constprop.0+0x56>
 8006f2e:	2308      	movs	r3, #8
 8006f30:	e7af      	b.n	8006e92 <_strtol_l.constprop.0+0x56>
 8006f32:	2c30      	cmp	r4, #48	; 0x30
 8006f34:	d0a5      	beq.n	8006e82 <_strtol_l.constprop.0+0x46>
 8006f36:	230a      	movs	r3, #10
 8006f38:	e7ab      	b.n	8006e92 <_strtol_l.constprop.0+0x56>
 8006f3a:	bf00      	nop
 8006f3c:	08008458 	.word	0x08008458

08006f40 <_strtol_r>:
 8006f40:	f7ff bf7c 	b.w	8006e3c <_strtol_l.constprop.0>

08006f44 <_strtoul_l.constprop.0>:
 8006f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f48:	4f36      	ldr	r7, [pc, #216]	; (8007024 <_strtoul_l.constprop.0+0xe0>)
 8006f4a:	4686      	mov	lr, r0
 8006f4c:	460d      	mov	r5, r1
 8006f4e:	4628      	mov	r0, r5
 8006f50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f54:	5d3e      	ldrb	r6, [r7, r4]
 8006f56:	f016 0608 	ands.w	r6, r6, #8
 8006f5a:	d1f8      	bne.n	8006f4e <_strtoul_l.constprop.0+0xa>
 8006f5c:	2c2d      	cmp	r4, #45	; 0x2d
 8006f5e:	d130      	bne.n	8006fc2 <_strtoul_l.constprop.0+0x7e>
 8006f60:	782c      	ldrb	r4, [r5, #0]
 8006f62:	2601      	movs	r6, #1
 8006f64:	1c85      	adds	r5, r0, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d057      	beq.n	800701a <_strtoul_l.constprop.0+0xd6>
 8006f6a:	2b10      	cmp	r3, #16
 8006f6c:	d109      	bne.n	8006f82 <_strtoul_l.constprop.0+0x3e>
 8006f6e:	2c30      	cmp	r4, #48	; 0x30
 8006f70:	d107      	bne.n	8006f82 <_strtoul_l.constprop.0+0x3e>
 8006f72:	7828      	ldrb	r0, [r5, #0]
 8006f74:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006f78:	2858      	cmp	r0, #88	; 0x58
 8006f7a:	d149      	bne.n	8007010 <_strtoul_l.constprop.0+0xcc>
 8006f7c:	786c      	ldrb	r4, [r5, #1]
 8006f7e:	2310      	movs	r3, #16
 8006f80:	3502      	adds	r5, #2
 8006f82:	f04f 38ff 	mov.w	r8, #4294967295
 8006f86:	2700      	movs	r7, #0
 8006f88:	fbb8 f8f3 	udiv	r8, r8, r3
 8006f8c:	fb03 f908 	mul.w	r9, r3, r8
 8006f90:	ea6f 0909 	mvn.w	r9, r9
 8006f94:	4638      	mov	r0, r7
 8006f96:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006f9a:	f1bc 0f09 	cmp.w	ip, #9
 8006f9e:	d815      	bhi.n	8006fcc <_strtoul_l.constprop.0+0x88>
 8006fa0:	4664      	mov	r4, ip
 8006fa2:	42a3      	cmp	r3, r4
 8006fa4:	dd23      	ble.n	8006fee <_strtoul_l.constprop.0+0xaa>
 8006fa6:	f1b7 3fff 	cmp.w	r7, #4294967295
 8006faa:	d007      	beq.n	8006fbc <_strtoul_l.constprop.0+0x78>
 8006fac:	4580      	cmp	r8, r0
 8006fae:	d31b      	bcc.n	8006fe8 <_strtoul_l.constprop.0+0xa4>
 8006fb0:	d101      	bne.n	8006fb6 <_strtoul_l.constprop.0+0x72>
 8006fb2:	45a1      	cmp	r9, r4
 8006fb4:	db18      	blt.n	8006fe8 <_strtoul_l.constprop.0+0xa4>
 8006fb6:	fb00 4003 	mla	r0, r0, r3, r4
 8006fba:	2701      	movs	r7, #1
 8006fbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fc0:	e7e9      	b.n	8006f96 <_strtoul_l.constprop.0+0x52>
 8006fc2:	2c2b      	cmp	r4, #43	; 0x2b
 8006fc4:	bf04      	itt	eq
 8006fc6:	782c      	ldrbeq	r4, [r5, #0]
 8006fc8:	1c85      	addeq	r5, r0, #2
 8006fca:	e7cc      	b.n	8006f66 <_strtoul_l.constprop.0+0x22>
 8006fcc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006fd0:	f1bc 0f19 	cmp.w	ip, #25
 8006fd4:	d801      	bhi.n	8006fda <_strtoul_l.constprop.0+0x96>
 8006fd6:	3c37      	subs	r4, #55	; 0x37
 8006fd8:	e7e3      	b.n	8006fa2 <_strtoul_l.constprop.0+0x5e>
 8006fda:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006fde:	f1bc 0f19 	cmp.w	ip, #25
 8006fe2:	d804      	bhi.n	8006fee <_strtoul_l.constprop.0+0xaa>
 8006fe4:	3c57      	subs	r4, #87	; 0x57
 8006fe6:	e7dc      	b.n	8006fa2 <_strtoul_l.constprop.0+0x5e>
 8006fe8:	f04f 37ff 	mov.w	r7, #4294967295
 8006fec:	e7e6      	b.n	8006fbc <_strtoul_l.constprop.0+0x78>
 8006fee:	1c7b      	adds	r3, r7, #1
 8006ff0:	d106      	bne.n	8007000 <_strtoul_l.constprop.0+0xbc>
 8006ff2:	2322      	movs	r3, #34	; 0x22
 8006ff4:	f8ce 3000 	str.w	r3, [lr]
 8006ff8:	4638      	mov	r0, r7
 8006ffa:	b932      	cbnz	r2, 800700a <_strtoul_l.constprop.0+0xc6>
 8006ffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007000:	b106      	cbz	r6, 8007004 <_strtoul_l.constprop.0+0xc0>
 8007002:	4240      	negs	r0, r0
 8007004:	2a00      	cmp	r2, #0
 8007006:	d0f9      	beq.n	8006ffc <_strtoul_l.constprop.0+0xb8>
 8007008:	b107      	cbz	r7, 800700c <_strtoul_l.constprop.0+0xc8>
 800700a:	1e69      	subs	r1, r5, #1
 800700c:	6011      	str	r1, [r2, #0]
 800700e:	e7f5      	b.n	8006ffc <_strtoul_l.constprop.0+0xb8>
 8007010:	2430      	movs	r4, #48	; 0x30
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1b5      	bne.n	8006f82 <_strtoul_l.constprop.0+0x3e>
 8007016:	2308      	movs	r3, #8
 8007018:	e7b3      	b.n	8006f82 <_strtoul_l.constprop.0+0x3e>
 800701a:	2c30      	cmp	r4, #48	; 0x30
 800701c:	d0a9      	beq.n	8006f72 <_strtoul_l.constprop.0+0x2e>
 800701e:	230a      	movs	r3, #10
 8007020:	e7af      	b.n	8006f82 <_strtoul_l.constprop.0+0x3e>
 8007022:	bf00      	nop
 8007024:	08008458 	.word	0x08008458

08007028 <_strtoul_r>:
 8007028:	f7ff bf8c 	b.w	8006f44 <_strtoul_l.constprop.0>

0800702c <_malloc_usable_size_r>:
 800702c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007030:	1f18      	subs	r0, r3, #4
 8007032:	2b00      	cmp	r3, #0
 8007034:	bfbc      	itt	lt
 8007036:	580b      	ldrlt	r3, [r1, r0]
 8007038:	18c0      	addlt	r0, r0, r3
 800703a:	4770      	bx	lr

0800703c <_init>:
 800703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703e:	bf00      	nop
 8007040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007042:	bc08      	pop	{r3}
 8007044:	469e      	mov	lr, r3
 8007046:	4770      	bx	lr

08007048 <_fini>:
 8007048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704a:	bf00      	nop
 800704c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800704e:	bc08      	pop	{r3}
 8007050:	469e      	mov	lr, r3
 8007052:	4770      	bx	lr
